<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ajax后端接口定义</title>
    <url>/2020/07/17/Ajax%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h1 id="后端接口定义"><a href="#后端接口定义" class="headerlink" title="后端接口定义"></a>后端接口定义</h1><h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"success"</span> : <span class="keyword">true</span>/<span class="keyword">false</span>,  <span class="comment">// 本次请求是否成功</span></span><br><span class="line">  <span class="string">"code"</span> : <span class="number">0</span>,  <span class="comment">// 返回码, 默认是0表示成功</span></span><br><span class="line">  <span class="string">"message"</span> : <span class="string">"xxx"</span>,  <span class="comment">// 请求失败时, 返回错误信息; 请求成功时, 可以没有这个字段或为空</span></span><br><span class="line">  <span class="string">"data"</span> : &#123;</span><br><span class="line">    ...  <span class="comment">// 具体的数据, 格式是根据前端约定好的, 不一定是个对象, 也可能是数组/字符串之类的</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"total"</span> : <span class="number">11</span>  <span class="comment">// 服务端返回的数据数量, 用于分页之类的, 如果没用的话可以不返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>注意:</p>
<ul>
<li>服务端接口在任何情况下都返回200, 通过success字段判断是否成功, 不要返回4xx/5xx之类的错误</li>
<li>一般禁止3xx重定向</li>
<li>所有请求, 如果要传参数的, 一般用post, 否则用get</li>
<li>如果没有特殊说明，请求的<code>Content-Type</code>默认是<code>application/json</code></li>
</ul>
<h2 id="用户相关接口"><a href="#用户相关接口" class="headerlink" title="用户相关接口"></a>用户相关接口</h2><h3 id="获取当前登录用户"><a href="#获取当前登录用户" class="headerlink" title="获取当前登录用户"></a>获取当前登录用户</h3><ul>
<li>接口名：<code>/api/getCurrentUser</code></li>
<li>说明：获得当前登录的用户名，是否登录完全由后端判断</li>
<li>是否必需：是</li>
<li>输入：不需要任何参数</li>
<li>输出：如果当前用户未登录则返回success=false，例如<code>{&quot;code&quot;:10,&quot;data&quot;:null,&quot;message&quot;:&quot;not login yet&quot;,&quot;success&quot;:false,&quot;total&quot;:null}</code>；已登录则返回登录的用户名，例如<code>{&quot;code&quot;:0,&quot;data&quot;:&quot;guest&quot;,&quot;message&quot;:&quot;&quot;,&quot;success&quot;:true,&quot;total&quot;:null}</code></li>
</ul>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ul>
<li>接口名：<code>/api/login</code></li>
<li>说明：校验用户的登录信息，成功的话返回当前登录的用户名</li>
<li>是否必需：是</li>
<li>输入：request body是一个表单(<code>Content-Type=application/x-www-form-urlencoded</code>)，包含两个参数<code>username</code>/<code>password</code>，后端拿到这两个参数去校验</li>
<li>输出：成功的话返回登录后的用户名，例如：<code>{&quot;code&quot;:0,&quot;data&quot;:&quot;guest&quot;,&quot;message&quot;:&quot;&quot;,&quot;success&quot;:true,&quot;total&quot;:null}</code>，否则返回错误信息。</li>
</ul>
<h3 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h3><ul>
<li>接口名：<code>/api/logout</code></li>
<li>说明：注销当前用户，用户点击注销时浏览器会直接跳转到这个地址，由服务端控制后续的重定向等等。这样设计是因为使用SSO时logout逻辑很难统一，还是让后端自己去实现比较好。</li>
<li>是否必需：是</li>
<li>输入：无</li>
<li>输出：无</li>
</ul>
<h2 id="CRUD相关接口"><a href="#CRUD相关接口" class="headerlink" title="CRUD相关接口"></a>CRUD相关接口</h2><p>对于CRUD接口，每个表要分别实现，跟schema对应。</p>
<h3 id="select-查询"><a href="#select-查询" class="headerlink" title="select-查询"></a>select-查询</h3><ul>
<li>接口名：<code>/api/{tableName}/select</code></li>
<li>说明：查询数据，传入查询条件，返回查询的结果。</li>
<li>是否必需：是</li>
<li>输入：request body是一个object，和querySchema中配置的查询条件对应，例如<code>{&quot;page&quot;:1,&quot;pageSize&quot;:50,&quot;name&quot;:&quot;guest&quot;,&quot;id:100&quot;}</code></li>
<li>输出：返回的data是一个数组，包含查询出来的数据（数据格式和dataSchema对应），例如<code>{&quot;code&quot;:0,&quot;data&quot;:[{&quot;experience&quot;:&quot;Less than 1 year&quot;,&quot;frequency&quot;:&quot;2 to 5 SMS daily&quot;,&quot;id&quot;:6,&quot;isNative&quot;:&quot;no&quot;,&quot;phoneModel&quot;:&quot;Nokia&quot;}],&quot;message&quot;:&quot;&quot;,&quot;success&quot;:true,&quot;total&quot;:31461}</code>，注意必须返回total字段，表示符合查询条件的记录共有多少条，用于分页。</li>
</ul>
<h3 id="insert-插入"><a href="#insert-插入" class="headerlink" title="insert-插入"></a>insert-插入</h3><ul>
<li>接口名：<code>/api/{tableName}/insert</code></li>
<li>说明：插入数据，返回插入后的完整记录</li>
<li>是否必需：可选，如果不使用插入功能可以忽略这个接口</li>
<li>输入：request body是一个object，代表要插入的数据，和dataSchema对应，例如：<code>{&quot;content&quot;:&quot;fasdf&quot;,&quot;phoneModel&quot;:&quot;jxy&quot;}</code></li>
<li>输出：返回的data是一个object，是插入后的完整数据（主要是为了获得插入后的主键），例如：<code>{&quot;code&quot;:0,&quot;data&quot;:{&quot;content&quot;:&quot;fasdf&quot;,&quot;id&quot;:31471,&quot;phoneModel&quot;:&quot;jxy&quot;},&quot;message&quot;:&quot;&quot;,&quot;success&quot;:true,&quot;total&quot;:null}</code>。</li>
</ul>
<h3 id="update-更新"><a href="#update-更新" class="headerlink" title="update-更新"></a>update-更新</h3><ul>
<li>接口名：<code>/api/{tableName}/update?keys=</code></li>
<li>说明：更新数据，只能按主键更新，url中要带上keys参数表明要更新哪些记录，可以单条更新也可以批量更新，多个key逗号分隔，返回更新成功的记录数</li>
<li>是否必需：可选，如果不使用更新功能可以忽略这个接口</li>
<li>输入：请求的url例子：<code>/api/{tableName}/update?keys=5488,5489</code>，body是和dataSchema对应的一个object，例如：<code>{&quot;phoneModel&quot;:&quot;jxyjxy&quot;,&quot;isNative&quot;:&quot;yes&quot;}</code></li>
<li>输出：返回的data是一个数字，表示更新成功的记录数，例如：<code>{&quot;code&quot;:0,&quot;data&quot;:1,&quot;message&quot;:&quot;&quot;,&quot;success&quot;:true,&quot;total&quot;:null}</code></li>
</ul>
<h3 id="delete-删除"><a href="#delete-删除" class="headerlink" title="delete-删除"></a>delete-删除</h3><ul>
<li>接口名：<code>/api/{tableName}/delete?keys=</code></li>
<li>说明：删除数据，跟更新数据类似，也是只能按主键删除，url中要带上keys参数，多个key逗号分隔，返回删除成功的记录数</li>
<li>是否必需：可选，如果不使用删除功能可以忽略这个接口</li>
<li>输入：请求url例子：<code>/api/{tableName}/delete?keys=31471</code></li>
<li>输出：返回的data是一个数字，表示删除成功的记录数，例如：<code>{&quot;code&quot;:0,&quot;data&quot;:1,&quot;message&quot;:&quot;&quot;,&quot;success&quot;:true,&quot;total&quot;:null}</code></li>
</ul>
<h3 id="import-导入"><a href="#import-导入" class="headerlink" title="import-导入"></a>import-导入</h3><ul>
<li>接口名：<code>/api/{tableName}/import</code></li>
<li>说明：导入数据，返回一个string的提示信息</li>
<li>是否必需：可选，如果不使用导入功能可以忽略这个接口</li>
<li>输入：一个文件上传请求，参数名为file</li>
<li>输出：返回的data是一个string，用于提示用户，例如：<code>{&quot;data&quot;:&quot;导入成功XX条，导入失败YY条，导入失败的行：1,2,3&quot;,&quot;message&quot;:&quot;&quot;,&quot;success&quot;:true,&quot;total&quot;:null}</code></li>
</ul>
<h3 id="export-导出"><a href="#export-导出" class="headerlink" title="export-导出"></a>export-导出</h3><ul>
<li>接口名：<code>/api/{tableName}/export?q=</code></li>
<li>说明：导出数据。这个接口比较特殊。跟select接口类似，也是传入一个querySchema的查询条件。不同之处在于select时查询条件是通过request body传入的，而export时查询条件通过url中的q参数传入。而且这个接口不是通过ajax请求的，用户导出时会直接打开一个新窗口请求这个url。</li>
<li>是否必需：可选，如果不使用导出功能可以忽略这个接口</li>
<li>输入：请求url例子：<code>/api/{tableName}/export?q={&quot;name&quot;:&quot;jxy&quot;}</code>，传入的q是一个string，代表查询条件，后端要拿到这个string再反序列化。</li>
<li>输出：不要返回json了。返回一个<code>Content-Disposition=attachment; filename=xxx</code>的下载请求，浏览器会自动处理这种请求并下载文件。</li>
</ul>
<h3 id="schema-异步schema"><a href="#schema-异步schema" class="headerlink" title="schema-异步schema"></a>schema-异步schema</h3><ul>
<li>接口名：<code>/api/{tableName}/schema</code></li>
<li>说明：返回服务端schema，前端拿到结果后会和本地schema合并作为最终的schema</li>
<li>是否必需：可选，如果不使用异步schema可以忽略这个接口</li>
<li>输入：不需要任何参数</li>
<li>输出：返回的data是一个json，包含<code>querySchema</code>/<code>dataSchema</code>两个可选的key，value是对应的schema，参考<a href="AsyncSchema.md">异步schema相关配置</a>。</li>
</ul>
<h2 id="上传相关接口"><a href="#上传相关接口" class="headerlink" title="上传相关接口"></a>上传相关接口</h2><p>上传图片和上传文件是非常类似的。但上传图片时往往要做一些特殊的处理，所以我分为两个接口。</p>
<h3 id="uploadImage-上传图片"><a href="#uploadImage-上传图片" class="headerlink" title="uploadImage-上传图片"></a>uploadImage-上传图片</h3><ul>
<li>接口名：<code>/api/uploadImage</code></li>
<li>说明：上传图片，返回上传后的url</li>
<li>是否必需：可选，如果不使用图片上传可以忽略这个接口</li>
<li>输入：文件上传请求，参数名为file</li>
<li>输出：返回的data是一个string，是图片上传后的url，例如：<code>{&quot;data&quot;:&quot;http://jxy.me/about/avatar.jpg&quot;,&quot;message&quot;:&quot;&quot;,&quot;success&quot;:true,&quot;total&quot;:null}</code>。</li>
</ul>
<h3 id="uploadFile-上传文件"><a href="#uploadFile-上传文件" class="headerlink" title="uploadFile-上传文件"></a>uploadFile-上传文件</h3><ul>
<li>接口名：<code>/api/uploadFile</code></li>
<li>说明：上传文件，返回上传后的url</li>
<li>是否必需：可选，如果不使用文件上传可以忽略这个接口</li>
<li>输入：文件上传请求，参数名为file</li>
<li>输出：返回的data是一个string，是文件上传后的url，例如：<code>{&quot;data&quot;:&quot;https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf&quot;,&quot;message&quot;:&quot;&quot;,&quot;success&quot;:true,&quot;total&quot;:null}</code>。</li>
</ul>
<h2 id="关于上传的一些说明"><a href="#关于上传的一些说明" class="headerlink" title="关于上传的一些说明"></a>关于上传的一些说明</h2><p>导入/上传图片/上传文件接口都很类似，输入是一个<code>Content-Type=multipart/form-data</code>的上传请求，参数名为file。</p>
<p>不太好给出例子，如果用标准的html表单来实现上传，大概是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#x2F;api&#x2F;uploadImage&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">	&lt;button type&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>只要接口能处理这种上传请求就可以了。</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax参考文档</title>
    <url>/2020/07/18/Ajax%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><blockquote>
<p>Web 程序最初的目的就是将信息（数据）放到公共的服务器，让所有网络用户都可以通过浏览器访问。</p>
</blockquote>
<img src="/2020/07/18/Ajax%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/Ajax1.png" class="" title="ajax1">

<p>在此之前，我们可以通过以下几种方式让浏览器发出对服务端的请求，获得服务端的数据：</p>
<ul>
<li>地址栏输入地址，回车，刷新</li>
<li>特定元素的 href 或 src 属性</li>
<li>表单提交</li>
</ul>
<a id="more"></a>

<p>这些方案都是我们无法通过或者很难通过代码的方式进行编程（对服务端发出请求并且接受服务端返回的响应），如果我们可以通过 JavaScript 直接发送网络请求，那么 Web 的可能就会更多，随之能够实现的功能也会更多，至少不再是“单机游戏”。</p>
<p>AJAX（Asynchronous JavaScript and XML），最早出现在 2005 年的 Google Suggest，是在浏览器端进行网络编程（发送请求、接收响应）的技术方案，它使我们可以通过 JavaScript 直接获取服务端最新的内容而不必重新加载页面。让 Web 更能接近桌面应用的用户体验。</p>
<p><strong>说白了，AJAX 就是浏览器提供的一套 API，可以通过 JavaScript 调用，从而实现通过代码控制请求与响应。实现网络编程。</strong></p>
<blockquote>
<p>能力不够 API 凑。</p>
</blockquote>
<h2 id="2-快速上手"><a href="#2-快速上手" class="headerlink" title="2. 快速上手"></a>2. 快速上手</h2><p>使用 AJAX 的过程可以类比平常我们访问网页过程</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个 XMLHttpRequest 类型的对象 —— 相当于打开了一个浏览器 </span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 2. 打开与一个网址之间的连接 —— 相当于在地址栏输入访问地址 </span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>) </span><br><span class="line"><span class="comment">// 3. 通过连接发送一次请求 —— 相当于回车或者点击访问发送请求 </span></span><br><span class="line">xhr.send(<span class="literal">null</span>) </span><br><span class="line"><span class="comment">// 4. 指定 xhr 状态变化事件处理函数 —— 相当于处理网页呈现后的操作 </span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </span><br><span class="line">	<span class="comment">// 通过 xhr 的 readyState 判断此次请求的响应是否接收完成   </span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;    </span><br><span class="line">    <span class="comment">// 通过 xhr 的 responseText 获取到响应的响应体     </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-1-readyState"><a href="#2-1-readyState" class="headerlink" title="2. 1. readyState"></a>2. 1. readyState</h3><p>由于 <code>readystatechange</code> 事件是在 <code>xhr</code> 对象状态变化时触发（不单是在得到响应时），也就意味着这个事件会被触发多次，所以我们有必要了解每一个状态值代表的含义：</p>
<table>
<thead>
<tr>
<th>readyState</th>
<th>状态描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>UNSENT</td>
<td>代理（XHR）被创建，但尚未调用 <code>open()</code> 方法。</td>
</tr>
<tr>
<td>1</td>
<td>OPENED</td>
<td><code>open()</code> 方法已经被调用，建立了连接。</td>
</tr>
<tr>
<td>2</td>
<td>HEADERS_RECEIVED</td>
<td><code>send()</code> 方法已经被调用，并且已经可以获取状态行和响应头。</td>
</tr>
<tr>
<td>3</td>
<td>LOADING</td>
<td>响应体下载中， <code>responseText</code> 属性可能已经包含部分数据。</td>
</tr>
<tr>
<td>4</td>
<td>DONE</td>
<td>响应体下载完成，可以直接使用 <code>responseText</code>。</td>
</tr>
</tbody></table>
<h4 id="2-1-1-时间轴"><a href="#2-1-1-时间轴" class="headerlink" title="2. 1. 1. 时间轴"></a>2. 1. 1. 时间轴</h4><img src="/2020/07/18/Ajax%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%97%B6%E9%97%B4%E8%BD%B4.png" class="" title="时间轴">





<h4 id="2-1-2-流程代码"><a href="#2-1-2-流程代码" class="headerlink" title="2. 1. 2. 流程代码"></a>2. 1. 2. 流程代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState) </span><br><span class="line"><span class="comment">// =&gt; 0 </span></span><br><span class="line"><span class="comment">// 初始化 请求代理对象   </span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'time.php'</span>) </span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState) </span><br><span class="line"><span class="comment">// =&gt; 1 </span></span><br><span class="line"><span class="comment">// open 方法已经调用，建立一个与服务端特定端口的连接   </span></span><br><span class="line">xhr.send()   </span><br><span class="line"></span><br><span class="line">xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.readyState) &#123;     </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:       </span><br><span class="line">            <span class="comment">// =&gt; 2      </span></span><br><span class="line">            <span class="comment">// 已经接受到了响应报文的响应头         </span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 可以拿到头      </span></span><br><span class="line">            <span class="comment">// console.log(this.getAllResponseHeaders()) </span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.getResponseHeader(<span class="string">'server'</span>))      </span><br><span class="line">            <span class="comment">// 但是还没有拿到体       </span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)      </span><br><span class="line">            <span class="keyword">break</span>       </span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:       </span><br><span class="line">            <span class="comment">// =&gt; 3      </span></span><br><span class="line">            <span class="comment">// 正在下载响应报文的响应体，有可能响应体为空，也有可能不完整        </span></span><br><span class="line">            <span class="comment">// 在这里处理响应体不保险（不可靠）       </span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)       </span><br><span class="line">            <span class="keyword">break</span>      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:      </span><br><span class="line">            <span class="comment">// =&gt; 4       </span></span><br><span class="line">            <span class="comment">// 一切 OK （整个响应报文已经完整下载下来了）         </span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 这里处理响应体       </span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)       </span><br><span class="line">            <span class="keyword">break</span>   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>通过理解每一个状态值的含义得出一个结论：一般我们都是在 <code>readyState</code> 值为 <code>4</code> 时，执行响应的后续逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;    </span><br><span class="line">        <span class="comment">// 后续逻辑......   </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="2-2-遵循-HTTP"><a href="#2-2-遵循-HTTP" class="headerlink" title="2. 2. 遵循 HTTP"></a>2. 2. 遵循 HTTP</h3><p>本质上 XMLHttpRequest 就是 JavaScript 在 Web 平台中发送 HTTP 请求的手段，所以我们发送出去的请求任然是</p>
<p>HTTP 请求，同样符合 HTTP 约定的格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置请求报文的请求行 </span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>) </span><br><span class="line"><span class="comment">// 设置请求头 </span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'text/plain'</span>) </span><br><span class="line"><span class="comment">// 设置请求体 xhr.send(null)   </span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;     </span><br><span class="line">        <span class="comment">// 获取响应状态码     </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.status)     </span><br><span class="line">        <span class="comment">// 获取响应状态描述     </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.statusText)    </span><br><span class="line">        <span class="comment">// 获取响应头信息     </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.getResponseHeader(<span class="string">'Content‐Type'</span>)) <span class="comment">// 指定响应头     </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.getAllResponseHeader()) <span class="comment">// 全部响应头     </span></span><br><span class="line">        <span class="comment">// 获取响应体    </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText) <span class="comment">// 文本形式 </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseXML) <span class="comment">// XML 形式，了解即可不用了   </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考链接：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest</a></li>
</ul>
</blockquote>
<h2 id="3-具体用法"><a href="#3-具体用法" class="headerlink" title="3. 具体用法"></a>3. 具体用法</h2><h3 id="3-1-GET-请求"><a href="#3-1-GET-请求" class="headerlink" title="3. 1. GET 请求"></a>3. 1. GET 请求</h3><blockquote>
<p>通常在一次 GET 请求过程中，参数传递都是通过 URL 地址中的<code>?</code> 参数传递。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// GET 请求传递参数通常使用的是问号传参</span></span><br><span class="line"><span class="comment">// 这里可以在请求地址后面加上参数，从而传递数据到服务端</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./delete.php?id=1'</span>)</span><br><span class="line"><span class="comment">// 一般在 GET 请求时无需设置响应体，可以传 null 或者干脆不传</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.readyState ===  <span class="number">4</span> ) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般情况下 URL 传递的都是参数性质的数据，而 POST 一般都是业务数据</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-POST-请求"><a href="#3-2-POST-请求" class="headerlink" title="3. 2. POST 请求"></a>3. 2. POST 请求</h3><blockquote>
<p>POST 请求过程中，都是采用请求体承载需要提交的数据。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// open 方法的第一个参数的作用就是设置请求的 method</span></span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'./add.php'</span>)</span><br><span class="line"><span class="comment">// 设置请求头中的 Content‐Type 为 application/x‐www‐form‐urlencoded</span></span><br><span class="line"><span class="comment">// 标识此次请求的请求体格式为 urlencoded 以便于服务端接收数据</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content‐Type'</span>, <span class="string">'application/x‐www‐form‐urlencoded'</span>)</span><br><span class="line"><span class="comment">// 需要提交到服务端的数据可以通过 send 方法的参数传递</span></span><br><span class="line"><span class="comment">// 格式：key1=value1&amp;key2=value</span></span><br><span class="line">xhr.send(<span class="string">'key1=value1&amp;key2=value2'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.readyState ===  <span class="number">4</span> ) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-同步与异步"><a href="#3-3-同步与异步" class="headerlink" title="3. 3. 同步与异步"></a>3. 3. 同步与异步</h3><p>关于同步与异步的概念在生活中有很多常见的场景，举例说明。</p>
<blockquote>
<p>同步：一个人在同一个时刻只能做一件事情，在执行一些耗时的操作（不需要看管）不去做别的事，只是等</p>
<p>待</p>
<p>异步：在执行一些耗时的操作（不需要看管）去做别的事，而不是等待</p>
</blockquote>
<p><code>xhr.open()</code> 方法第三个参数要求传入的是一个 <code>bool</code> 值，其作用就是设置此次请求是否采用异步方式执行，默认为 <code>true</code>，如果需要同步执行可以通过传递 <code>false</code> 实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'before ajax'</span>)</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 默认第三个参数为 true 意味着采用异步方式执行</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.readyState ===  <span class="number">4</span> ) &#123;</span><br><span class="line"><span class="comment">// 这里的代码最后执行</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'request done'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after ajax'</span>)</span><br></pre></td></tr></table></figure>

<p>如果采用同步方式执行，则代码会卡死在 <code>xhr.send()</code> 这一步：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'before ajax'</span>)</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 同步方式</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 同步方式 执行需要 先注册事件再调用 send，否则 readystatechange 无法触发</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.readyState ===  <span class="number">4</span> ) &#123;</span><br><span class="line"><span class="comment">// 这里的代码最后执行</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'request done'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after ajax'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>演示同步异步差异。</p>
<ul>
<li>一定在发送请求 send() 之前注册 readystatechange（不管同步或者异步）</li>
<li>为了让这个事件可以更加可靠（一定触发），一定是先注册。</li>
<li>了解同步模式即可，切记不要使用同步模式。</li>
<li>至此，我们已经大致了解了 AJAX 的基本 API 。</li>
</ul>
</blockquote>
<h3 id="3-4-响应数据格式"><a href="#3-4-响应数据格式" class="headerlink" title="3. 4. 响应数据格式"></a>3. 4. 响应数据格式</h3><blockquote>
<p>提问：如果希望服务端返回一个复杂数据，该如何处理？</p>
</blockquote>
<p>关心的问题就是服务端发出何种格式的数据，这种格式如何在客户端用 JavaScript 解析。</p>
<h4 id="3-4-1-XML"><a href="#3-4-1-XML" class="headerlink" title="3. 4. 1. XML"></a>3. 4. 1. XML</h4><p>一种数据描述手段</p>
<p>老掉牙的东西，简单演示一下，不在这里浪费时间，基本现在的项目不用了。</p>
<p><strong>淘汰的原因：数据冗余太多</strong></p>
<h4 id="3-4-2-JSON"><a href="#3-4-2-JSON" class="headerlink" title="3. 4. 2. JSON"></a>3. 4. 2. JSON</h4><p>也是一种数据描述手段，类似于 JavaScript 字面量方式</p>
<p>服务端采用 JSON 格式返回数据，客户端按照 JSON 格式解析数据。</p>
<blockquote>
<p>不管是 JSON 也好，还是 XML，只是在 AJAX 请求过程中用到，并不代表它们之间有必然的联系，它们只是数据协议罢了。</p>
</blockquote>
<h3 id="3-5-处理响应数据渲染"><a href="#3-5-处理响应数据渲染" class="headerlink" title="3. 5. 处理响应数据渲染"></a>3. 5. 处理响应数据渲染</h3><blockquote>
<p>模板引擎：</p>
<p>artTemplate：<a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">https://aui.github.io/art-template/</a></p>
</blockquote>
<p>模板引擎实际上就是一个 API，模板引擎有很多种，使用方式大同小异，目的为了可以更容易的将数据渲染到HTML中</p>
<h3 id="3-6-兼容方案"><a href="#3-6-兼容方案" class="headerlink" title="3. 6. 兼容方案"></a>3. 6. 兼容方案</h3><p><strong>(可能的考点)</strong>XMLHttpRequest 在老版本浏览器（IE5/6）中有兼容问题，可以通过另外一种方式代替</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject    (<span class="string">'Microsoft.XMLHTTP'</span>)</span><br></pre></td></tr></table></figure>



<h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h2><h3 id="4-1-AJAX-请求封装"><a href="#4-1-AJAX-请求封装" class="headerlink" title="4. 1. AJAX 请求封装"></a>4. 1. AJAX 请求封装</h3><blockquote>
<p>函数就可以理解为一个想要做的事情，函数体中约定了这件事情做的过程，直到调用时才开始工作。</p>
<p>将函数作为参数传递就像是将一个事情交给别人，这就是委托的概念。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 发送一个 AJAX 请求</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param  <span class="type">&#123;String&#125;</span>   </span>method 请求方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param  <span class="type">&#123;String&#125;</span>   </span>url    请求地址</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param  <span class="type">&#123;Object&#125;</span>   </span>params 请求参数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param  <span class="type">&#123;Function&#125;</span> </span>done   请求完成过后需要做的事情（委托/回调）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">method, url, params, done</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 统一转换为大写便于后续判断</span></span><br><span class="line">	method = method.toUpperCase()</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 对象形式的参数转换为 urlencoded 格式</span></span><br><span class="line">	<span class="keyword">var</span> pairs = []</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">	pairs.push(key + <span class="string">'='</span> + params[key])</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">var</span> querystring = pairs.join(<span class="string">'&amp;'</span>)</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span></span><br><span class="line">    ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br><span class="line">	xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.readyState !==  <span class="number">4</span> ) <span class="keyword">return</span></span><br><span class="line">	<span class="comment">// 尝试通过 JSON 格式解析响应体</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">	done(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">	done(<span class="keyword">this</span>.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 如果是 GET 请求就设置 URL 地址 问号参数</span></span><br><span class="line">	<span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">	url += <span class="string">'?'</span> + querystring</span><br><span class="line">  	&#125;</span><br><span class="line">	xhr.open(method, url)</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 如果是 POST 请求就设置请求体</span></span><br><span class="line">	<span class="keyword">var</span> data = <span class="literal">null</span></span><br><span class="line">	<span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">	xhr.setRequestHeader(<span class="string">'Content‐Type'</span>, <span class="string">'application/x‐www‐form‐urlencoded'</span>)</span><br><span class="line">	data = querystring</span><br><span class="line">  &#125;</span><br><span class="line">	xhr.send(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(<span class="string">'get'</span>, <span class="string">'./get.php'</span>, &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)   </span><br><span class="line">ajax(<span class="string">'post'</span>, <span class="string">'./post.php'</span>, &#123; <span class="attr">foo</span>: <span class="string">'posted data'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(data) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>






<h3 id="4-2-jQuery-中的-AJAX"><a href="#4-2-jQuery-中的-AJAX" class="headerlink" title="4. 2. jQuery 中的 AJAX"></a>4. 2. jQuery 中的 AJAX</h3><p>jQuery 中有一套专门针对 AJAX 的封装，功能十分完善，经常使用，需要着重注意。</p>
<blockquote>
<p>参考：</p>
<p><a href="http://www.jquery123.com/category/ajax/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/</a></p>
<p><a href="http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp</a></p>
</blockquote>
<h4 id="4-2-1-ajax"><a href="#4-2-1-ajax" class="headerlink" title="4. 2. 1. $.ajax"></a>4. 2. 1. $.ajax</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">'./get.php'</span>,</span><br><span class="line">type: <span class="string">'get'</span>,</span><br><span class="line">dataType: <span class="string">'json'</span>,</span><br><span class="line">data: &#123; <span class="attr">id</span>:  <span class="number">1</span>  &#125;,</span><br><span class="line">beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'before send'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;,</span><br><span class="line">error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;,</span><br><span class="line">complete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'request completed'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>常用选项参数介绍：</strong></p>
<ul>
<li><p>url：请求地址</p>
</li>
<li><p>type：请求方法，默认为 get</p>
</li>
<li><p>dataType：服务端响应数据类型</p>
</li>
<li><p>contentType：请求体内容类型，默认 application/x-www-form-urlencoded</p>
</li>
<li><p>data：需要传递到服务端的数据，如果 GET 则通过 URL 传递，如果 POST 则通过请求体传递</p>
</li>
<li><p>timeout：请求超时时间</p>
</li>
<li><p>beforeSend：请求发起之前触发</p>
</li>
<li><p>success：请求成功之后触发（响应状态码 200 ）</p>
</li>
<li><p>error：请求失败触发</p>
</li>
<li><p>complete：请求完成触发（不管成功与否）</p>
</li>
</ul>
<h4 id="4-2-2-get"><a href="#4-2-2-get" class="headerlink" title="4. 2. 2. $.get"></a>4. 2. 2. $.get</h4><p>GET 请求快捷方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="keyword">get</span>("data.json",function (res) &#123;  <span class="comment">/*get请求*/</span></span><br><span class="line">    <span class="comment">//回调函数</span></span><br><span class="line">       <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>



<h4 id="4-2-3-post"><a href="#4-2-3-post" class="headerlink" title="4. 2. 3. $.post"></a>4. 2. 3. $.post</h4><p>POST 请求快捷方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.post(<span class="string">"data.json"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;     <span class="comment">/*post请求*/</span></span><br><span class="line">       <span class="built_in">console</span>.log(res);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>



<h4 id="4-2-4-全局事件处理"><a href="#4-2-4-全局事件处理" class="headerlink" title="4. 2. 4. 全局事件处理"></a>4. 2. 4. 全局事件处理</h4><blockquote>
<p><a href="http://www.jquery123.com/category/ajax/global-ajax-event-handlers/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/global-ajax-event-handlers/</a></p>
</blockquote>
<h4 id="4-2-5-自学内容"><a href="#4-2-5-自学内容" class="headerlink" title="4. 2. 5. 自学内容"></a>4. 2. 5. 自学内容</h4><blockquote>
<p>$(selector).load()</p>
<p>$.getJSON()<br>$.getScript()</p>
<p>简单概括以上方法的作用和基本用法。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$(selector).load() 部分加载效果 不用重新加载页面</span></span><br><span class="line">  $(<span class="string">".list-group-item"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">var</span> url=$(<span class="keyword">this</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">               $(<span class="string">"#main"</span>).load(url+<span class="string">" #main"</span>); <span class="comment">/*获取指定页面中的id 注意id前有空格*/</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;        <span class="comment">//阻止默认事件</span></span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$.getJSON() 通过 HTTP GET 请求载入 JSON 数据。</span></span><br><span class="line">$.getJSON(<span class="string">"data.json"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$.getScript()方法通过 HTTP GET 请求载入并执行 JavaScript 文件。</span></span><br><span class="line"><span class="comment">//载入 jQuery 官方颜色动画插件 成功后绑定颜色变化动画：</span></span><br><span class="line"></span><br><span class="line">jQuery.getScript(<span class="string">"http://dev.jquery.com/view/trunk/plugins/color/jquery.color.js"</span>,</span><br><span class="line"> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#go"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".block"</span>).animate( &#123; <span class="attr">backgroundColor</span>: <span class="string">'pink'</span> &#125;, <span class="number">1000</span>)</span><br><span class="line">      .animate( &#123; <span class="attr">backgroundColor</span>: <span class="string">'blue'</span> &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="5-跨域"><a href="#5-跨域" class="headerlink" title="5. 跨域"></a>5. 跨域</h2><h3 id="5-1-相关概念"><a href="#5-1-相关概念" class="headerlink" title="5. 1. 相关概念"></a>5. 1. 相关概念</h3><p>同源策略是浏览器的一种安全策略，所谓同源是指域名，协议，端口完全相同，只有同源的地址才可以相互通过</p>
<p>AJAX 的方式请求。</p>
<p>同源或者不同源说的是两个地址之间的关系，不同源地址之间请求我们称之为跨域请求</p>
<p>什么是同源？例如：<a href="http://www.example.com/detail.html" target="_blank" rel="noopener">http://www.example.com/detail.html</a> 与一下地址对比</p>
<table>
<thead>
<tr>
<th>对比地址</th>
<th>是否同源</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://api.example.com/detail.html" target="_blank" rel="noopener">http://api.example.com/detail.html</a></td>
<td>不同源</td>
<td>域名不同</td>
</tr>
<tr>
<td><a href="https://www.example.com/detail.html" target="_blank" rel="noopener">https://www.example.com/detail.html</a></td>
<td>不同源</td>
<td>协议不同</td>
</tr>
<tr>
<td><a href="http://www.example.com:8080/detail.html" target="_blank" rel="noopener">http://www.example.com:8080/detail.html</a></td>
<td>不同源</td>
<td>端口不同</td>
</tr>
<tr>
<td><a href="http://api.example.com:8080/detail.html" target="_blank" rel="noopener">http://api.example.com:8080/detail.html</a></td>
<td>不同源</td>
<td>域名、端口不同</td>
</tr>
<tr>
<td><a href="https://api.example.com/detail.html" target="_blank" rel="noopener">https://api.example.com/detail.html</a></td>
<td>不同源</td>
<td>协议、域名不同</td>
</tr>
<tr>
<td><a href="https://www.example.com:8080/detail.html" target="_blank" rel="noopener">https://www.example.com:8080/detail.html</a></td>
<td>不同源</td>
<td>端口、协议不同</td>
</tr>
<tr>
<td><a href="http://www.example.com/other.html" target="_blank" rel="noopener">http://www.example.com/other.html</a></td>
<td>同源</td>
<td>只是目录不同</td>
</tr>
</tbody></table>
<h3 id="5-2-解决方案"><a href="#5-2-解决方案" class="headerlink" title="5. 2. 解决方案"></a>5. 2. 解决方案</h3><p><strong>现代化的 Web 应用中肯定会有不同源的现象，所以必然要解决这个问题，从而实现跨域请求。</strong></p>
<blockquote>
<p>参考：<a href="http://rickgray.me/solutions-to-cross-domain-in-browser" target="_blank" rel="noopener">http://rickgray.me/solutions-to-cross-domain-in-browser</a></p>
</blockquote>
<h4 id="5-2-1-JSONP"><a href="#5-2-1-JSONP" class="headerlink" title="5. 2. 1. JSONP"></a>5. 2. 1. JSONP</h4><p><strong>JSON</strong> with <strong>P</strong>adding，是一种借助于 <code>script</code> 标签发送跨域请求的技巧。</p>
<p>其原理就是在客户端借助 <code>script</code> 标签请求服务端的一个动态网页（php 文件），服务端的这个动态网页返回一 段带有函数调用的 JavaScript 全局函数调用的脚本，将原本需要返回给客户端的数据传递进去。</p>
<p> 以后绝大多数情况都是采用 JSONP 的手段完成不同源地址之间的跨域请求</p>
<p> 客户端 <a href="http://www.zce.me/users-list.html" target="_blank" rel="noopener">http://www.zce.me/users-list.html</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://api.zce.me/users.php?callback=foo"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务端 <a href="http://api.zce.me/users.php?callback=foo" target="_blank" rel="noopener">http://api.zce.me/users.php?callback=foo</a> 返回的结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foo([<span class="string">'我'</span>, <span class="string">'是'</span>, <span class="string">'你'</span>, <span class="string">'原'</span>, <span class="string">'本'</span>, <span class="string">'需'</span>, <span class="string">'要'</span>, <span class="string">'的'</span>, <span class="string">'数'</span>, <span class="string">'据'</span>])</span><br></pre></td></tr></table></figure>

<p><strong>总结一下</strong>：由于 XMLHttpRequest 无法发送不同源地址之间的跨域请求，所以我们必须要另寻他法，script 这种方案就是我们最终选择的方式，我们把这种方式称之为 <strong>JSONP</strong>，如果你不了解原理，先记住怎么用，多用一段时间再来看原理。</p>
<p><strong>问题：</strong></p>
<ol>
<li><p>JSONP 需要服务端配合，服务端按照客户端的要求返回一段 JavaScript 调用客户端的函数</p>
</li>
<li><p>只能发送 GET 请求</p>
</li>
</ol>
<blockquote>
<p>注意：JSONP 用的是 script 标签，跟 AJAX 提供的 XMLHttpRequest 没有任何关系！！！</p>
</blockquote>
<p>jQuery 中使用 JSONP 就是将 dataType 设置为 jsonp</p>
<p>其他常见的 AJAX 封装 库：<code>Axios</code></p>
<h4 id="5-2-2-CORS"><a href="#5-2-2-CORS" class="headerlink" title="5. 2. 2. CORS"></a>5. 2. 2. CORS</h4><p>Cross Origin Resource Share，跨域资源共享</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许远端访问</span></span><br><span class="line">header(<span class="string">'Access‐Control‐Allow‐Origin: *'</span>);</span><br></pre></td></tr></table></figure>



<p>这种方案无需客户端作出任何变化（客户端不用改代码），只是在被请求的服务端响应的时候添加一个 <code>Access-Control-Allow-Origin</code> 的响应头，表示这个资源是否允许指定域请求。</p>
<h2 id="6-XMLHttpRequest-2-0"><a href="#6-XMLHttpRequest-2-0" class="headerlink" title="6. XMLHttpRequest 2.0"></a>6. XMLHttpRequest 2.0</h2><blockquote>
<p>暂作了解，无需着重看待</p>
<p>更易用，更强大</p>
</blockquote>
<h3 id="6-1-onload-onprogress"><a href="#6-1-onload-onprogress" class="headerlink" title="6. 1. onload / onprogress"></a>6. 1. onload / onprogress</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>)</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// onload readyState === </span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.readyState)</span><br><span class="line">&#125;</span><br><span class="line">xhr.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// onload readyState === </span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.readyState)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>




<h3 id="6-2-FormData"><a href="#6-2-FormData" class="headerlink" title="6. 2. FormData"></a>6. 2. FormData</h3><p><strong>以前 AJAX 只能提交字符串，现在可以提交 二进制 的数据</strong></p>
<h3 id="6-3-案例"><a href="#6-3-案例" class="headerlink" title="6. 3. 案例"></a>6. 3. 案例</h3><p>异步上传文件</p>
<p>参考文章：</p>
<blockquote>
<p>使用Ajax异步上传文件:</p>
<p><a href="https://www.cnblogs.com/youcong/p/10887064.html" target="_blank" rel="noopener">https://www.cnblogs.com/youcong/p/10887064.html</a> </p>
</blockquote>
<h2 id="7-参考链接"><a href="#7-参考链接" class="headerlink" title="7. 参考链接"></a>7. 参考链接</h2><blockquote>
<p><a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/ajax/index.asp</a></p>
<p><a href="https://aui.github.io/art-template/zh-cn" target="_blank" rel="noopener">https://aui.github.io/art-template/zh-cn</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Ala小区练手项目的一些笔记</title>
    <url>/2020/09/12/Ala%E5%B0%8F%E5%8C%BA%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="VueCli项目阿拉小区笔记"><a href="#VueCli项目阿拉小区笔记" class="headerlink" title="VueCli项目阿拉小区笔记"></a>VueCli项目阿拉小区笔记</h1><h2 id="1-创建项目报错"><a href="#1-创建项目报错" class="headerlink" title="1.创建项目报错"></a>1.创建项目报错</h2><blockquote>
<p>Warning: name can no longer contain capital letters</p>
</blockquote>
<p><strong>项目名不能有大写</strong></p>
<h2 id="2-安装font-awesome"><a href="#2-安装font-awesome" class="headerlink" title="2.安装font-awesome"></a>2.安装font-awesome</h2><p><code>cnpm -i font-awesome</code></p>
<p><strong>不用了 可以使用了下面的VantUI框架代替</strong></p>
<a id="more"></a>

<h2 id="3-安装Vant前端框架"><a href="#3-安装Vant前端框架" class="headerlink" title="3.安装Vant前端框架"></a>3.安装Vant前端框架</h2><h3 id="3-1-全局安装"><a href="#3-1-全局安装" class="headerlink" title="3.1.全局安装"></a>3.1.全局安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vant -S</span><br></pre></td></tr></table></figure>

<p><strong>在main.js中配置</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'vant/lib/index.css'</span></span><br><span class="line">Vue.use(Vant)</span><br></pre></td></tr></table></figure>



<h3 id="3-2-部分安装，按需使用官网推荐"><a href="#3-2-部分安装，按需使用官网推荐" class="headerlink" title="3.2.部分安装，按需使用官网推荐"></a>3.2.部分安装，按需使用官网推荐</h3><h4 id="3-2-1安装插件"><a href="#3-2-1安装插件" class="headerlink" title="3.2.1安装插件"></a>3.2.1安装插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i babel-plugin-import -D</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2配置babel"><a href="#3-2-2配置babel" class="headerlink" title="3.2.2配置babel"></a>3.2.2配置babel</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    <span class="string">'@vue/app'</span></span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    [<span class="string">"import"</span>, &#123;</span><br><span class="line">      libraryName: <span class="string">'vant'</span>,</span><br><span class="line">      libraryDirectory: <span class="string">'es'</span>,</span><br><span class="line">      style: <span class="literal">true</span></span><br><span class="line">    &#125;,<span class="string">"vant"</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-3main-js引入需要用到的插件"><a href="#3-2-3main-js引入需要用到的插件" class="headerlink" title="3.2.3main.js引入需要用到的插件"></a>3.2.3main.js引入需要用到的插件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">"vant"</span>;</span><br><span class="line">Vue.use(Button);</span><br></pre></td></tr></table></figure>

<h4 id="3-2-4模板中使用"><a href="#3-2-4模板中使用" class="headerlink" title="3.2.4模板中使用"></a>3.2.4模板中使用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="坑"><a href="#坑" class="headerlink" title="!!!坑"></a>!!!坑</h4><p><strong>1.运行项目警告: “export ‘DropdownItem’ was not found in ‘vant’诸如此类…</strong></p>
<p>查询到解决方式升级本地版本，升级命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vant@2.10.6</span><br><span class="line"></span><br><span class="line">//2.10.6是版本号，每次用官网上面最新的版本号</span><br></pre></td></tr></table></figure>



<p><strong>2.字体图标显示为方框</strong></p>
<p><strong>引入reset.css文件重置了所有样式，所以字体图标无法正常显示</strong></p>
<h2 id="4-安装mockjs模拟后台接口"><a href="#4-安装mockjs模拟后台接口" class="headerlink" title="4.安装mockjs模拟后台接口"></a>4.安装mockjs模拟后台接口</h2><h3 id="4-1安装"><a href="#4-1安装" class="headerlink" title="4.1安装"></a>4.1安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i mockjs  --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i mockjs --D</span><br></pre></td></tr></table></figure>

<h3 id="4-2在src目录下新建mock文件夹，创建index-js文件"><a href="#4-2在src目录下新建mock文件夹，创建index-js文件" class="headerlink" title="4.2在src目录下新建mock文件夹，创建index.js文件"></a>4.2在src目录下新建mock文件夹，创建index.js文件</h3><p>在index.js文件下导入<code>import Mock from &quot;mockjs&quot;</code></p>
<h3 id="4-3在main-js中引入"><a href="#4-3在main-js中引入" class="headerlink" title="4.3在main.js中引入:"></a>4.3在main.js中引入:</h3><p><code>import &quot;./mock&quot;;</code></p>
<h3 id="4-4模拟数据"><a href="#4-4模拟数据" class="headerlink" title="4.4模拟数据"></a>4.4模拟数据</h3><p><strong>在mock文件夹下新建一个js文件放置下面的数据</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="string">"error_code"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"msg"</span>:<span class="string">"获取成功"</span>,</span><br><span class="line">    <span class="string">"data"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">"title"</span>:<span class="string">"抗疫:本小区实行全面封锁"</span>,</span><br><span class="line">            <span class="string">"content"</span>:<span class="string">"新冠肺炎疫情，在一段时间的好转后，似乎出现死灰复燃的现象"</span>,</span><br><span class="line">            <span class="string">"imageUrl"</span>:<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_RES_URL&#125;</span>/Ala/ala1.jpg`</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最后在index.js文件中引入该文件</strong></p>
<h2 id="5-安装axios"><a href="#5-安装axios" class="headerlink" title="5.安装axios"></a>5.安装axios</h2><h3 id="5-1安装"><a href="#5-1安装" class="headerlink" title="5.1安装"></a>5.1安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i axios --save</span><br></pre></td></tr></table></figure>

<h3 id="5-2导入"><a href="#5-2导入" class="headerlink" title="5.2导入"></a>5.2导入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="comment">//在Vue原型加入axios</span></span><br><span class="line">Vue.prototype.$axios = axios</span><br></pre></td></tr></table></figure>

<h3 id="5-3使用"><a href="#5-3使用" class="headerlink" title="5.3使用"></a>5.3使用</h3><p>注意axios对象的调用<code>this.$axios</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getInfo()&#123;          <span class="keyword">this</span>.$axios.get(<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_BASE_URL&#125;</span>/Ala/info`</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(response)</span><br><span class="line">           &#125;,error=&gt;&#123;</span><br><span class="line"></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>





<h2 id="技巧相关"><a href="#技巧相关" class="headerlink" title="技巧相关"></a>技巧相关</h2><h2 id="1-flex布局中超出文字显示省略号"><a href="#1-flex布局中超出文字显示省略号" class="headerlink" title="1.flex布局中超出文字显示省略号"></a>1.flex布局中超出文字显示省略号</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">            <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="built_in">px2rem</span>(<span class="number">20</span>);</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">0</span>;    <span class="comment">/*容易忽略的重要点*/</span></span><br><span class="line">            span&#123;  </span><br><span class="line">                <span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;  </span><br><span class="line">                <span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line">          <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">          <span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<h2 id="配置Express服务器以连接MYSQL"><a href="#配置Express服务器以连接MYSQL" class="headerlink" title="配置Express服务器以连接MYSQL"></a>配置Express服务器以连接MYSQL</h2><h3 id="安装Express服务器相关依赖"><a href="#安装Express服务器相关依赖" class="headerlink" title="安装Express服务器相关依赖"></a>安装Express服务器相关依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express mysql body-parser</span><br></pre></td></tr></table></figure>

<h3 id="1-在项目根目录下新建server文件夹放置Express服务器相关文件-非src目录"><a href="#1-在项目根目录下新建server文件夹放置Express服务器相关文件-非src目录" class="headerlink" title="1.在项目根目录下新建server文件夹放置Express服务器相关文件(非src目录)"></a>1.在项目根目录下新建server文件夹放置Express服务器相关文件(非src目录)</h3><h4 id="1-1-db-js文件用来添加mysql配置"><a href="#1-1-db-js文件用来添加mysql配置" class="headerlink" title="1.1 db.js文件用来添加mysql配置"></a>1.1 db.js文件用来添加mysql配置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据库连接配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mysql: &#123;</span><br><span class="line">        host: <span class="string">'localhost'</span>,</span><br><span class="line">        user: <span class="string">'root'</span>,</span><br><span class="line">        password: <span class="string">'123456'</span>,</span><br><span class="line">        database: <span class="string">'chat'</span>, <span class="comment">//数据库名</span></span><br><span class="line">        port: <span class="string">'3306'</span>   <span class="comment">//端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-index-js—-Express服务器入口文件"><a href="#1-2-index-js—-Express服务器入口文件" class="headerlink" title="1.2 index.js—-Express服务器入口文件"></a>1.2 index.js—-Express服务器入口文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node 后端服务器</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> userApi = <span class="built_in">require</span>(<span class="string">'./api/userApi'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 后端api路由</span></span><br><span class="line">app.use(<span class="string">'/api/user'</span>, userApi);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'success listen at port:3000......'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="1-3-sqlMap-js—-SQL语句映射文件，以供api逻辑调用"><a href="#1-3-sqlMap-js—-SQL语句映射文件，以供api逻辑调用" class="headerlink" title="1.3 sqlMap.js—-SQL语句映射文件，以供api逻辑调用"></a>1.3 sqlMap.js—-SQL语句映射文件，以供api逻辑调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SQL语句映射文件，以供api逻辑调用</span></span><br><span class="line"><span class="comment">// sql语句</span></span><br><span class="line"><span class="keyword">var</span> sqlMap = &#123;</span><br><span class="line">    <span class="comment">// 用户</span></span><br><span class="line">    user: &#123;</span><br><span class="line">        add: <span class="string">'insert into user(id, name, age) values (0, ?, ?)'</span>,</span><br><span class="line">        getInfo:<span class="string">"select * from book"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = sqlMap;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-在server文件夹下新建api文件夹-在api文件夹下新建userApi-js-—-测试用api示例"><a href="#1-4-在server文件夹下新建api文件夹-在api文件夹下新建userApi-js-—-测试用api示例" class="headerlink" title="1.4 在server文件夹下新建api文件夹 在api文件夹下新建userApi.js —- 测试用api示例"></a>1.4 在server文件夹下新建api文件夹 在api文件夹下新建userApi.js —- 测试用api示例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试用api示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> models = <span class="built_in">require</span>(<span class="string">'../db'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> $sql = <span class="built_in">require</span>(<span class="string">'../sqlMap'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; request, response &#125; = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="keyword">var</span> conn = mysql.createConnection(models.mysql);</span><br><span class="line"> </span><br><span class="line">conn.connect();</span><br><span class="line"><span class="keyword">var</span> jsonWrite = <span class="function"><span class="keyword">function</span>(<span class="params">res, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> ret === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            code: <span class="string">'1'</span>,</span><br><span class="line">            msg: <span class="string">'操作失败'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.json(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 增加用户接口</span></span><br><span class="line">router.post(<span class="string">'/addUser'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> sql = $sql.user.add;</span><br><span class="line">    <span class="keyword">var</span> params = req.body;</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">    conn.query(sql, [params.username, params.age], <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            jsonWrite(res, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户查询数据的接口</span></span><br><span class="line">router.get(<span class="string">"/getInfo"</span>,(request,response)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> sql=$sql.user.getInfo</span><br><span class="line">    conn.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            <span class="comment">//jsonWrite函数为上面的自定义函数</span></span><br><span class="line">            jsonWrite(response,result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>

<p><strong>文件夹结构如下</strong></p>
<img src="/2020/09/12/Ala%E5%B0%8F%E5%8C%BA%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/server%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9B%AE%E5%BD%95.png" class="" title="文件夹目录">

<h4 id="1-5调用"><a href="#1-5调用" class="headerlink" title="1.5调用"></a>1.5调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getInfo2()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$axios.get(<span class="string">`/api/user/getInfo`</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response)</span><br><span class="line">            &#125;,error=&gt;&#123;</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-6运行服务器"><a href="#1-6运行服务器" class="headerlink" title="1.6运行服务器"></a>1.6运行服务器</h4><p><strong>在server文件夹下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node index</span><br></pre></td></tr></table></figure>

<img src="/2020/09/12/Ala%E5%B0%8F%E5%8C%BA%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/express%E6%9C%8D%E5%8A%A1%E5%99%A8.png" class="" title="express服务器">

<p><strong>出现上面一句话表示服务器已成功运行！</strong></p>
<h2 id="GIT相关"><a href="#GIT相关" class="headerlink" title="GIT相关"></a>GIT相关</h2><h3 id="报错fatal-not-a-git-repository-or-any-of-the-parent-directories-git"><a href="#报错fatal-not-a-git-repository-or-any-of-the-parent-directories-git" class="headerlink" title="报错fatal: not a git repository (or any of the parent directories): .git"></a>报错fatal: not a git repository (or any of the parent directories): .git</h3><p><strong>只需初始化一下就好，执行</strong>： <code>git init</code></p>
<h3 id="1-添加远程仓库"><a href="#1-添加远程仓库" class="headerlink" title="1.添加远程仓库"></a>1.添加远程仓库</h3><p><code>$ git remote add origin https://github.com/ITaylorfan/ALa.git</code></p>
<h3 id="2-拉取远程仓库内容"><a href="#2-拉取远程仓库内容" class="headerlink" title="2.拉取远程仓库内容"></a>2.拉取远程仓库内容</h3><p><strong>远程仓库不为空时？</strong></p>
<p><code>$ git pull --rebase origin master</code></p>
<h3 id="3-推送源代码到远程仓库"><a href="#3-推送源代码到远程仓库" class="headerlink" title="3.推送源代码到远程仓库"></a>3.推送源代码到远程仓库</h3><p><code>$ git push origin master</code></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5多媒体技术</title>
    <url>/2021/10/21/HTML5%E5%A4%9A%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="HTML5多媒体技术"><a href="#HTML5多媒体技术" class="headerlink" title="HTML5多媒体技术"></a>HTML5多媒体技术</h2><h3 id="音频Audio"><a href="#音频Audio" class="headerlink" title="音频Audio"></a>音频Audio</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"./assets/19.mp3"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"./assets/30.mp3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>属性</strong></p>
<ol>
<li><code>controls</code>是否在页面上面显示控制器，它是一个单属性</li>
<li><code>autoplay</code>是否自动播放，它是一个单属性【当前属性在谷歌浏览器里面第一次使用无效】</li>
<li><code>currentSrc</code>当前音频标签的<code>src</code>地址</li>
<li><code>currentTime</code>当前音乐播放的进度时间，以秒为单位</li>
<li><code>duration</code>当前音乐的总时长，以秒为单位</li>
<li><code>ended</code>当前音频是否已经播放结束 ，它会触发<code>onended</code>事件</li>
<li><code>loop</code>是否单曲循环，它是一个单属性，<code>true</code>代表开启单曲循环，<code>false</code>则不开启单曲循环</li>
<li><code>muted</code>当前音频是否处于静音，它是一个单属性，<code>true</code>代表静音，<code>false</code>取消静音</li>
<li><code>networkState</code>表示当前媒体的网络连接状态：0表示空，1表示正在加载，2表示 正在加载元数据，3表示已经加载了第一帧，4表示加载完成</li>
<li><code>volume</code>代表当前音频的音量，它以数字为属性值 ，范围是<code>0~1</code>之间</li>
<li><code>playbackRate</code>代表当前音频的播放速率，默认是1</li>
<li><code>paused</code>代表当前音频是否处于暂停状态，它是一个单属性，<code>true</code>代表暂停，<code>false</code>代表播放状态</li>
<li><code>readyState</code>表示当前音频的准备状态，媒体是否已经就绪（可以播放了）。0表示数据不可用，1表示可以显示当前帧，2表示可以开始播放，3表示媒体可以从头到尾播放</li>
<li><code>preload</code>预先加载，三个属性值分别是<code>metadata</code>元数据，<code>none</code>不加载，<code>auto</code>自动</li>
</ol>
<p><strong>事件</strong></p>
<p>音频标签所有的事件都支持0级事件与2级事件</p>
<ol>
<li><code>oncanplay</code>当音频已经在加载，并且可以开始播放的时候会触发这个事件</li>
<li><code>onended</code>当前音频播放结束的时候触发，如果当前音频添加了<code>loop</code>单曲循环的属性，则永远不会触发这个事件</li>
<li><code>onloadeddata</code>媒体第一帧在加载的时候触发 </li>
<li><code>onplay</code>当音频播放的时候触发的事件</li>
<li><code>onpause</code>当音频在暂停的时候触发的事件</li>
<li><code>onratechange</code>当音频播放的速率发生变化的时候，就会触发这个事件</li>
<li><code>ontimeupdate</code>当音频的播放时间更新的时候触发的事件，只要是处于播放状态，这个事件会一直触发</li>
<li><code>volumechange</code>volume属性值或muted属性值已改变</li>
<li><code>waiting</code>当播放网络音频的时候，网络情况比较差，需要等待加载的时候（通俗的说就是缓冲），就会触发这个事件</li>
</ol>
<p><strong>方法</strong></p>
<ol>
<li><code>play()</code>让当前音频播放</li>
<li><code>pause()</code>让当前音频暂停</li>
</ol>
<h3 id="视频Video"><a href="#视频Video" class="headerlink" title="视频Video"></a>视频Video</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"./assets/01.mp4"</span> <span class="attr">id</span>=<span class="string">"v1"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"700px"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/6143dc472ab3f51d91373e71.png" alt="image-20210916183421976"></p>
<p>当前这个标签能够支持的视频格式非常有限，如上图所示，最常见的格式就是mp4格式</p>
<p>视频与音频非常相似，在属性与方法上面保持了一致，唯独多了一些的属性</p>
<ol>
<li><code>poster</code>视频的海报</li>
<li><code>requestFullscreen()</code>视频全屏播放</li>
<li><code>document.exitFullscreen()</code>视频退出全屏</li>
<li><code>requestPictureInPicture()</code>视频开启画中画播放</li>
<li><code>document.exitPictureInPicture()</code>退出画中画播放</li>
</ol>
<p>在工作当中我们一般会使用第三方的视频库来播放视频 ，它们的功能更齐全，使用更简单，目前主要使用的比较多的有两个</p>
<ol>
<li><p><code>videojs</code></p>
</li>
<li><p><code>aliplayer</code>这是阿里云的框架，它支持点播，直播以及多种模式</p>
<p><a href="https://player.alicdn.com/aliplayer/index.html" target="_blank" rel="noopener">阿里云Aliplayer播放器 (alicdn.com)</a></p>
<p><img src="https://pic.imgdb.cn/item/6143dc832ab3f51d91376b54.png" alt="image-20210916185001374"></p>
</li>
</ol>
<hr>
<h3 id="文件与base64"><a href="#文件与base64" class="headerlink" title="文件与base64"></a>文件与base64</h3><p>base64是一种加密的数据，它不可以直接阅读，常用于HTTP网络传输，在计算机当中所有的文件都可以使用<code>base64</code>去表示，但是它需要借用助于HTML5的新兴API，叫<code>FileReader</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"fileChange(this)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fileChange</span><span class="params">(ele)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img1 = <span class="built_in">document</span>.querySelector(<span class="string">".img1"</span>);</span></span><br><span class="line">        if (ele.files.length &gt; 0) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">//说明它有文件</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> file = ele.files[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//判断一下是不是图片类型</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^image\/(jpe?g|gif|png|bmp)$/</span>;</span></span><br><span class="line">            if (reg.test(file.type)) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">//说明它是一个图片，然后将这个图片转换成base64格式</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// dataURL格式就是base64格式</span></span></span><br><span class="line">                fileReader.readAsDataURL(file);</span><br><span class="line"><span class="actionscript">                fileReader.onload = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(fileReader.result);</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// result属性就是文件的读取结果</span></span></span><br><span class="line">                    img1.src = fileReader.result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/6143dc942ab3f51d91377886.png" alt="image-20210916195825017"></p>
<p>在上面的代码里面， 我们使用了 type=”file” 来选择文件，但这个文件选择框不能设置样式，所以我们可以单独设置一个按钮去完成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"bgm"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"f1"</span><span class="attr">type</span>=<span class="string">"file"</span><span class="attr">style</span>=<span class="string">"display:none;"</span><span class="attr">onchange</span>=<span class="string">"fileChange(this)"</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"chooseMusic()"</span>&gt;</span>选择音乐<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">chooseMusic</span><span class="params">()</span> </span>&#123;   <span class="comment">//点击按钮触发input:file的点击事件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> f1 = <span class="built_in">document</span>.querySelector(<span class="string">"#f1"</span>);</span></span><br><span class="line"><span class="actionscript">    f1.click(); <span class="comment">//触发input的点击事件</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">fileChange</span><span class="params">(ele)</span> </span>&#123;</span></span><br><span class="line">    if (ele.files.length &gt; 0) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> file = ele.files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg = <span class="regexp">/^audio\/mpeg$/</span>;</span></span><br><span class="line">        if (reg.test(file.type)) &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line">            fileReader.readAsDataURL(file);</span><br><span class="line"><span class="actionscript">            <span class="comment">// 文件读取完毕，会触发onload的就去</span></span></span><br><span class="line"><span class="actionscript">            fileReader.onload = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> base64Str = fileReader.result;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> bgm = <span class="built_in">document</span>.querySelector(<span class="string">"#bgm"</span>);</span></span><br><span class="line"><span class="actionscript">                bgm.src = base64Str;   <span class="comment">//最后得到base64的字符串</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/6143e0342ab3f51d913a3de9.jpg" alt=""></p>
<p><strong>案例</strong><br>下面的案例就是一个最典型的图片上传的布局和封装过程</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-upload-box"</span> <span class="attr">onclick</span>=<span class="string">"this.children[1].click()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/upload.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">onchange</span>=<span class="string">"fileChange(this)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fileChange</span><span class="params">(ele)</span> </span>&#123;</span></span><br><span class="line">        if (ele.files.length &gt; 0) &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> file = ele.files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^image\/(jpe?g|png|gif|bmp|svg)$/</span>;</span></span><br><span class="line">            if (reg.test(file.type)) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line">                fileReader.readAsDataURL(file);</span><br><span class="line"><span class="actionscript">                fileReader.onload = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> base64Str = fileReader.result;</span></span><br><span class="line">                    ele.previousElementSibling.src = base64Str;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">上传前</th>
<th align="center">上传后</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://pic.imgdb.cn/item/6143e21f2ab3f51d913bb41b.jpg" alt=""></td>
<td align="center"><img src="https://pic.imgdb.cn/item/6143e2422ab3f51d913bcdd6.jpg" alt=""></td>
</tr>
</tbody></table>
<h3 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h3><blockquote>
<p>赋值给<code>srcObject</code>不是<code>src</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"v1"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">onclick</span>=<span class="string">"openCamera()"</span>&gt;</span>打开摄像头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">openCamera</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        navigator.getUserMedia(&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// video代表视频</span></span></span><br><span class="line"><span class="actionscript">            video: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// audio代表音频</span></span></span><br><span class="line"><span class="actionscript">            audio: <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">        &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(stream)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//成功回调函数</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"成功了"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(stream);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">/** @type &#123;HTMLVideoElement&#125;*/</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> v1 = <span class="built_in">document</span>.querySelector(<span class="string">"#v1"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//将这个流赋值给视频标签v1的srcObject</span></span></span><br><span class="line">            v1.srcObject = stream;</span><br><span class="line">            v1.play();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//失败的回调函数</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"失败了"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="画布"><a href="#画布" class="headerlink" title="画布"></a>画布</h3><p>画布是HTML5 新出的一个标签，它指在让用户能够在页面上面完成任何绘画的效果，它有2D平面绘画 ，还有3D的立体绘画。我们前端程序员更喜欢把画布看成是一个模拟的屏幕，这个屏幕上面可以显示任何东西</p>
<h4 id="画布的创建"><a href="#画布的创建" class="headerlink" title="画布的创建"></a>画布的创建</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 画布canvas不能通过CSS来设置宽度高度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：画布不能在CSS里面设置width/height，如果要设置宽度与高度，只能在HTML标签里面设置宽度与高度</p>
</blockquote>
<p>画布的创建非常简单，它只是一个标签，但是如果我们想在画布上面绘画东西，则需要一个画布对象，这个对象们叫<strong>绘画上下文对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@type<span class="type">&#123;HTMLCanvasElement&#125;</span></span></span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="keyword">var</span> c1 = <span class="built_in">document</span>.querySelector(<span class="string">"#c1"</span>);</span><br><span class="line"><span class="comment">//得到画笔，画笔也叫绘画上下文</span></span><br><span class="line"><span class="keyword">var</span> ctx = c1.getContext(<span class="string">"2d"</span>);</span><br></pre></td></tr></table></figure>

<p>在上面我们通过方法<code>getContext(&quot;2d&quot;)</code>来获取了当前画布的2D绘画上下文，有了画布及画笔以后，我们就可以开始绘画了</p>
<p>在绘画之前一定分清楚两个事情，在2D绘画上下文里面，绘画的行为只有两种</p>
<ol>
<li>描边<code>stroke</code>，描边出来的东西是一个空心的</li>
<li>填充<code>fill</code>，填充出来的东西一定是一个实心的</li>
</ol>
<h4 id="常用属性及方法"><a href="#常用属性及方法" class="headerlink" title="常用属性及方法"></a>常用属性及方法</h4><ol>
<li><p><code>font</code>用于设置字体的大小及样式</p>
</li>
<li><p><code>strokeStyle</code>设置描边的颜色</p>
</li>
<li><p><code>fillStyle</code>设置填充的颜色</p>
</li>
<li><p><code>beginPath()</code>开始一个新路径，相当于提笔的一个操作过程</p>
</li>
<li><p><code>moveTo(x,y)</code>将笔移动到某一个坐标，不画线</p>
</li>
<li><p><code>lineTo(x,y)</code>画一条线到某一个地方</p>
</li>
<li><p><code>lineWidth</code>描边线条的宽度</p>
</li>
<li><p><code>lineCap</code>线条末端的形状，<code>butt</code>方头，<code>round</code>代表圆头，<code>square</code></p>
</li>
<li><p><code>closePath()</code>闭合路径，把开始的点和结束的点连接起来</p>
</li>
<li><p><code>stroke()</code>描边的方法，可以将一个路径进行描边</p>
</li>
<li><p><code>fill()</code>填充的方法，将内部进行填充</p>
</li>
<li><p><code>arc(x,y,radius,start,end,direction)</code>画一个圆</p>
<p>画圆的时候，它是以弧度单位在画，是从3点的钟的方向开始，默认是顺时针画</p>
</li>
</ol>
<p><strong>案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /** </span><br><span class="line">     * @type&#123;HTMLCanvasElement&#125;</span><br><span class="line">     * */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c1 = <span class="built_in">document</span>.querySelector(<span class="string">"#c1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ctx = c1.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//第一步：笔架上先拿一支笔</span></span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line"><span class="actionscript">    <span class="comment">//第二步：将笔移动到画布的左上角</span></span></span><br><span class="line">    ctx.moveTo(0,0);</span><br><span class="line"><span class="actionscript">    <span class="comment">//第三步：画第一条线</span></span></span><br><span class="line">    ctx.lineTo(100,100);</span><br><span class="line"><span class="actionscript">    <span class="comment">//第四步：描边</span></span></span><br><span class="line">    ctx.stroke();</span><br><span class="line"><span class="actionscript">    <span class="comment">//第五步：拿一个粗一点笔</span></span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.lineWidth = 5;</span><br><span class="line"><span class="actionscript">    ctx.strokeStyle = <span class="string">"#ff0000"</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//第六步：将笔移动到100,100的位置</span></span></span><br><span class="line">    ctx.moveTo(100,100);</span><br><span class="line"><span class="actionscript">    <span class="comment">//第七步：画一条线</span></span></span><br><span class="line">    ctx.lineTo(200,100);</span><br><span class="line"><span class="actionscript">    <span class="comment">//第八步：描边</span></span></span><br><span class="line">    ctx.stroke();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://pic.imgdb.cn/item/6144873e2ab3f51d9115cc02.png" alt="image-20210917093131498" style="zoom:50%;" />

<p>上面的案例其实就很形象的说明了这几个方法的作用</p>
<h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><ol>
<li><code>rect(x,y,width,height)</code>方法，描边一个矩形路径，然后再调用<code>stroke()</code>描边或<code>fill()</code>来填充</li>
<li><code>strokeRect(x,y,width,height)</code>方法，描边一个矩形，一次成型</li>
<li><code>fillRect(x,y,width,height)</code>方法，填充一个矩形，一次成型</li>
<li><code>clearRect(x,y,width,height)</code>方法，清除某一个矩形区域</li>
</ol>
<h4 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h4><p>在画布里面绘画图片分为静态图片的绘制与动态图片的绘制</p>
<p>绘制图片使用的是<code>drawImage(img,x,y,width,height)</code>方法</p>
<p><strong>静态绘制</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img1"</span> <span class="attr">src</span>=<span class="string">"./img/w04.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 画布canvas不能通过CSS来设置宽度高度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /** </span><br><span class="line">     * @type&#123;HTMLCanvasElement&#125;</span><br><span class="line">     * */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c1 = <span class="built_in">document</span>.querySelector(<span class="string">"#c1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ctx = c1.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//静态绘制</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> img1 = <span class="built_in">document</span>.querySelector(<span class="string">"#img1"</span>);</span></span><br><span class="line"><span class="actionscript">    img1.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//图片加载成功以后，我们就可以使用这一张图片绘画</span></span></span><br><span class="line">        ctx.drawImage(img1, 50, 50, 200, 250);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>静态绘制是页面上面已经存在这个图片，然后我们获取这个图片以后，使用<code>drawImage()</code>方法来绘制图片</li>
<li>绘制图片的时候一定要等图片的onload事件完成（也就是图片加载完成以后再进行）</li>
</ol>
</blockquote>
<p><span style="color:red;font-weight:bold;">重点</span>：静态绘制最重要的一个点就是可以实现视频的屏幕</p>
<p><strong>案例一：使用静态绘制实现视频截图并下载</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>静态绘制就是绘制一个已经存在的东西<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"v1"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">"./assets/bgg.mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"takePhoto()"</span>&gt;</span>截图<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">     * @type &#123;HTMLVideoElement&#125;</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> v1 = <span class="built_in">document</span>.querySelector(<span class="string">"#v1"</span>);</span></span><br><span class="line">    /**</span><br><span class="line">     * @type &#123;HTMLCanvasElement&#125;</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c1 = <span class="built_in">document</span>.querySelector(<span class="string">"#c1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ctx = c1.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">takePhoto</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//将视频里面的东西画到的画布上面</span></span></span><br><span class="line">        ctx.drawImage(v1, 0, 0, 400, 400);</span><br><span class="line"><span class="actionscript">        <span class="comment">//将画布面的信息转换成base64,dataURL格式就是base64格式</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> base64Str = c1.toDataURL(<span class="string">"image/png"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//使用a标签进行下载</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span></span><br><span class="line">        a.href = base64Str;</span><br><span class="line"><span class="actionscript">        a.download = <span class="string">"标哥的截图.png"</span>;</span></span><br><span class="line">        a.click();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><code>drawImage()</code>这个方法里面不仅可以绘制图片，还可以在以一个<code>video</code>视频为素材去绘制</li>
<li>上面的代码当中，我们还有一个功能就是下载，下载使用的是<code>a</code>标签在下载</li>
<li>我们刚刚还使用了一个方法<code>canvas.toDataURL()</code>，它是将<code>canvas</code>画布上面的数据转换成<code>base64</code>格式</li>
</ol>
</blockquote>
<p><strong>案例二：摄像头照相截图</strong></p>
<p>之前在讲视频<code>video</code>标签的时候顺带着讲了一下浏览器摄像头的使用，我们可以将摄像头的视频信息显示在<code>video</code>标签里面，再结合今天的<code>canvas</code> 就可以实现视频截图照相</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"v1"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"openCamera()"</span>&gt;</span>打开摄像头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"takePhoto()"</span>&gt;</span>拍照<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">     * @type &#123;HTMLVideoElement&#125;</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> v1 = <span class="built_in">document</span>.querySelector(<span class="string">"#v1"</span>);</span></span><br><span class="line">    /**</span><br><span class="line">     * @type &#123;HTMLCanvasElement&#125;</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c1 = <span class="built_in">document</span>.querySelector(<span class="string">"#c1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ctx = c1.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">openCamera</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        navigator.getUserMedia(&#123;</span><br><span class="line"><span class="actionscript">            video: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            audio: <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">        &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(stream)</span> </span>&#123;</span></span><br><span class="line">            v1.srcObject = stream;</span><br><span class="line">            v1.play();</span><br><span class="line"><span class="actionscript">        &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">takePhoto</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        ctx.drawImage(v1, 0, 0, 400, 400);</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> base64Str = c1.toDataURL(<span class="string">"image/png"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span></span><br><span class="line">        a.href = base64Str;</span><br><span class="line"><span class="actionscript">        a.download = <span class="string">"摄像头截图.png"</span>;</span></span><br><span class="line">        a.click();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/61448ac22ab3f51d911ab5d4.png" alt=""></p>
<p><strong>动态绘制</strong></p>
<p>它是实时的创建我们需要绘制的素材，然后再去绘制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@type <span class="type">&#123;HTMLCanvasElement&#125;</span></span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> c1 = <span class="built_in">document</span>.querySelector(<span class="string">"#c1"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = c1.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// var img = document.createElement("img");</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">"./img/w04.jpg"</span>;</span><br><span class="line">img.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img, <span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">250</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>在上面的代码当中，我们动态的创建了一个图片，然后将这个图片<code>onload</code>以后去绘制</li>
<li>我们图片的创建可以使用<code>document.createElement(&quot;img&quot;)</code>也可以使用<code>new Image()</code>来完成（只有媒体标签可以）</li>
</ol>
</blockquote>
<h4 id="渐变设置"><a href="#渐变设置" class="headerlink" title="渐变设置"></a>渐变设置</h4><p>渐变在之前的CSS里面我们就已经接触过了，现在canvas里面也有渐变，它主要是线性渐变和径向渐变</p>
<h5 id="使用线性渐变"><a href="#使用线性渐变" class="headerlink" title="使用线性渐变"></a>使用线性渐变</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.strokeRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">//创建一个线性渐变</span></span><br><span class="line"><span class="keyword">var</span> gradient = ctx.createLinearGradient(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">150</span>);</span><br><span class="line">gradient.addColorStop(<span class="number">0</span>,<span class="string">"red"</span>);</span><br><span class="line">gradient.addColorStop(<span class="number">0.5</span>,<span class="string">"orange"</span>);</span><br><span class="line">gradient.addColorStop(<span class="number">1</span>,<span class="string">"blue"</span>);</span><br><span class="line">ctx.fillStyle = gradient;</span><br><span class="line">ctx.fillRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">250</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<p><strong>效果图</strong></p>
<img src="https://pic.imgdb.cn/item/61448b462ab3f51d911b6d82.png" alt="image-20210917103503263" style="zoom:50%;" />

<h5 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建径向渐变</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeRect(<span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">var</span> gradient2 = ctx.createRadialGradient(<span class="number">200</span>, <span class="number">300</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">gradient2.addColorStop(<span class="number">0</span>, <span class="string">"red"</span>);</span><br><span class="line">gradient2.addColorStop(<span class="number">1</span>, <span class="string">"blue"</span>)</span><br><span class="line">ctx.fillStyle = gradient2;</span><br><span class="line">ctx.fillRect(<span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<p><strong>效果图</strong></p>
<img src="https://pic.imgdb.cn/item/61448d2a2ab3f51d911e4a68.png" alt="image-20210917104151686" style="zoom:50%;" />

<h4 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h4><ol>
<li><code>strokeText(text,x,y,maxWidth?)</code>描边一个文字</li>
<li><code>fillText(text,x,y,maxWidth?)</code>填充一个文字</li>
<li><code>textAlign</code>设置文字的水平对齐方式，它有<code>start/center/end</code>三个位置</li>
<li><code>textBaseline</code>设置文字的垂直对齐，默认是基线，它还有<code>top/middle/bottom</code>三个位置</li>
</ol>
<h4 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h4><ol>
<li><code>translate(x,y)</code>移动画布的起点位置</li>
<li><code>rotate(angle)</code>它以<strong>弧度</strong>为单位，对画布进行旋转</li>
</ol>
<h4 id="配置的保存与还原"><a href="#配置的保存与还原" class="headerlink" title="配置的保存与还原"></a>配置的保存与还原</h4><ol>
<li><code>save()</code>将当前的配置保存起来，配置进行入栈操作</li>
<li><code>restore()</code>将配置栈里面的配置进行出栈操作，还原设置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@type <span class="type">&#123;HTMLCanvasElement&#125;</span></span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> c1 = <span class="built_in">document</span>.querySelector(<span class="string">"#c1"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = c1.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.font = <span class="string">"32px 微软雅黑"</span>;</span><br><span class="line">ctx.fillStyle = <span class="string">"black"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"第一次"</span>,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">ctx.save();     <span class="comment">//保存之前的配置，配置入栈</span></span><br><span class="line"></span><br><span class="line">ctx.font = <span class="string">"16px 宋体"</span>;</span><br><span class="line">ctx.fillStyle = <span class="string">"#FF0000"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"第二次"</span>,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">ctx.save();     <span class="comment">//保存之前的配置，配置入栈</span></span><br><span class="line"></span><br><span class="line">ctx.font = <span class="string">"48px 华文行楷"</span>;</span><br><span class="line">ctx.fillStyle = <span class="string">"#0000FF"</span>;</span><br><span class="line">ctx.fillText(<span class="string">"第三次"</span>,<span class="number">0</span>,<span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line">ctx.restore();   <span class="comment">//将之前的配置出栈</span></span><br><span class="line">ctx.fillText(<span class="string">"第四次"</span>,<span class="number">0</span>,<span class="number">250</span>);</span><br><span class="line"></span><br><span class="line">ctx.restore();   <span class="comment">//将之前的配置出栈</span></span><br><span class="line">ctx.fillText(<span class="string">"第五次"</span>,<span class="number">0</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">ctx.restore();</span><br><span class="line">ctx.fillText(<span class="string">"第六次"</span>,<span class="number">0</span>,<span class="number">350</span>);</span><br></pre></td></tr></table></figure>

<img src="https://pic.imgdb.cn/item/61448e1e2ab3f51d911fc165.png" alt="image-20210917144625819" style="zoom:50%;" />

<h4 id="使用图像数据"><a href="#使用图像数据" class="headerlink" title="使用图像数据"></a>使用图像数据</h4><p>在canvas的画布上面，图像的数据是可以转变成<code>base64</code>的，但是还可以使用另一种数值去表示 ，这个数值就是<code>rgba</code>,我们可以通过画布来获取画布的上面的原始数据（rgba数据）</p>
<ol>
<li><code>ctx.getImageData()</code>在画布上面获取图像数据</li>
<li><code>ctx.putImageData()</code>将一个图像数据放置在画布上面</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img1"</span> <span class="attr">src</span>=<span class="string">"./img/w06.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">     * @type &#123;HTMLCanvasElement&#125;</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c1 = <span class="built_in">document</span>.querySelector(<span class="string">"#c1"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ctx = c1.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> img1 = <span class="built_in">document</span>.querySelector(<span class="string">"#img1"</span>);</span></span><br><span class="line"><span class="actionscript">    img1.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line">        c1.height = img1.clientHeight;</span><br><span class="line">        ctx.drawImage(img1, 0, 0, img1.clientWidth, img1.clientHeight);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 开始获取 图像数据</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> imageData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, c1.width, c1.height);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imageData.data.length; i += <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> r = imageData.data[i];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> g = imageData.data[i + <span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> b = imageData.data[i + <span class="number">2</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> avg = <span class="built_in">parseInt</span>((r + g + b) / <span class="number">3</span>);</span></span><br><span class="line">            imageData.data[i] = avg;</span><br><span class="line">            imageData.data[i + 1] = avg;</span><br><span class="line">            imageData.data[i + 2] = avg;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//将改好以后的【数据】重新放到画布里面去</span></span></span><br><span class="line">        ctx.putImageData(imageData, 0, 0);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>效果图</strong></p>
<p><img src="https://pic.imgdb.cn/item/61448e902ab3f51d912070ef.png" alt="image-20210917171750021"></p>
<blockquote>
<p>上面的代码就是将我们的彩色图片使用图你数据片以后，变成了一个灰色图片</p>
</blockquote>
<p><img src="https://pic.imgdb.cn/item/61448ec22ab3f51d9120bc04.png" alt="image-20210917171846739"></p>
<p>上图就是我们所获取到的<code>ImageData</code>里面的数据，它是使用<code>rgba</code>来表示的</p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><img src="https://pic.imgdb.cn/item/6146c26e2ab3f51d915d0eae.png" alt="image-20210918110832866"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = c.getContext(<span class="string">"2d"</span>);    <span class="comment">//c 是 canvas的dom</span></span><br><span class="line"><span class="comment">// ctx.clearRect(e.offsetX, e.offsetY, 20, 20);</span></span><br><span class="line"><span class="comment">// 使用新方法</span></span><br><span class="line">ctx.globalCompositeOperation = <span class="string">"destination-out"</span>; <span class="comment">//相交变透明</span></span><br><span class="line">ctx.arc(e.offsetX, e.offsetY, <span class="number">5</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>); <span class="comment">//画圆</span></span><br><span class="line">ctx.fill(); <span class="comment">//填充</span></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery</title>
    <url>/2020/06/15/JQuery/</url>
    <content><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><blockquote>
<p>学习目标：</p>
<p>能够说出什么是 jQuery<br>能够说出 jQuery 的优点<br>能够简单使用 jQuery<br>能够说出 DOM 对象和 jQuery 对象的区别<br>能够写出常用的 jQuery 选择器<br>能够操作 jQuery 样式<br>能够写出常用的 jQuery 动画 </p>
</blockquote>
<a id="more"></a>
<h2 id="1-1-jQuery-介绍"><a href="#1-1-jQuery-介绍" class="headerlink" title="1.1. jQuery 介绍"></a>1.1. jQuery 介绍</h2><h3 id="1-1-1-JavaScript-库"><a href="#1-1-1-JavaScript-库" class="headerlink" title="1.1.1 JavaScript 库"></a>1.1.1 JavaScript 库</h3><p>​    JavaScript库：即 library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。</p>
<blockquote>
<p>简单理解： 就是一个JS 文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</p>
<p>比如 jQuery，就是为了快速方便的操作DOM，里面基本都是函数（方法）。</p>
</blockquote>
<p>​    常见的JavaScript 库：jQuery、Prototype、YUI、Dojo、Ext JS、移动端的zepto等，这些库都是对原生 JavaScript 的封装，内部都是用 JavaScript 实现的，我们主要学习的是 jQuery。</p>
<h3 id="1-1-2-jQuery的概念"><a href="#1-1-2-jQuery的概念" class="headerlink" title="1.1.2 jQuery的概念"></a>1.1.2 jQuery的概念</h3><p>​    jQuery总体概况如下 :</p>
<ul>
<li><p>jQuery 是一个快速、简洁的 JavaScript 库，其设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</p>
</li>
<li><p>j 就是 JavaScript；   Query 查询； 意思就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能。</p>
</li>
<li><p>jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。</p>
</li>
<li><p>学习jQuery本质： 就是学习调用这些函数（方法）。</p>
</li>
<li><p>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</p>
</li>
</ul>
<img src="/2020/06/15/JQuery/jQuery%E6%A6%82%E8%BF%B0.jpg" class="" width="1550731974575">



<h3 id="1-1-3-jQuery的优点"><a href="#1-1-3-jQuery的优点" class="headerlink" title="1.1.3 jQuery的优点"></a>1.1.3 jQuery的优点</h3><ol>
<li>轻量级。核心文件才几十kb，不会影响页面加载速度。</li>
<li>跨浏览器兼容，基本兼容了现在主流的浏览器。</li>
<li>链式编程、隐式迭代。</li>
<li>对事件、样式、动画支持，大大简化了DOM操作。</li>
<li>支持插件扩展开发。有着丰富的第三方的插件，例如：树形菜单、日期控件、轮播图等。</li>
<li>免费、开源。</li>
</ol>
<h2 id="1-2-jQuery-的基本使用"><a href="#1-2-jQuery-的基本使用" class="headerlink" title="1.2. jQuery 的基本使用"></a>1.2. jQuery 的基本使用</h2><h3 id="1-2-1-jQuery-的下载"><a href="#1-2-1-jQuery-的下载" class="headerlink" title="1.2.1 jQuery 的下载"></a>1.2.1 jQuery 的下载</h3><p>​    jQuery的官网地址： <a href="https://jquery.com/，官网即可下载最新版本。" target="_blank" rel="noopener">https://jquery.com/，官网即可下载最新版本。</a></p>
<blockquote>
<p> 各个版本的下载：<a href="https://code.jquery.com/" target="_blank" rel="noopener">https://code.jquery.com/</a></p>
</blockquote>
<p>​    版本介绍：</p>
<blockquote>
<p>1x ：兼容 IE 678 等低版本浏览器， 官网不再更新</p>
<p>2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新</p>
<p>3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本</p>
</blockquote>
<h3 id="1-2-2-体验jQuery"><a href="#1-2-2-体验jQuery" class="headerlink" title="1.2.2. 体验jQuery"></a>1.2.2. 体验jQuery</h3><p>​    步骤：</p>
<ul>
<li>引入jQuery文件。</li>
<li>在文档最末尾插入 script 标签，书写体验代码。</li>
<li>$(‘div’).hide() 可以隐藏盒子。</li>
</ul>
<h3 id="1-2-3-jQuery的入口函数"><a href="#1-2-3-jQuery的入口函数" class="headerlink" title="1.2.3. jQuery的入口函数"></a>1.2.3. jQuery的入口函数</h3><p>​    jQuery中常见的两种入口函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种: 简单易用。</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </span><br><span class="line">    ...  <span class="comment">// 此处是页面 DOM 加载完成的入口</span></span><br><span class="line">&#125;) ; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种: 繁琐，但是也可以实现</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   ...  <span class="comment">//  此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>​    总结：</p>
<ol>
<li>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</li>
<li>相当于原生 js 中的 DOMContentLoaded。</li>
<li>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css文件、图片加载完毕才执行内部代码。</li>
<li>更推荐使用第一种方式。</li>
</ol>
<h3 id="1-2-4-jQuery中的顶级对象"><a href="#1-2-4-jQuery中的顶级对象" class="headerlink" title="1.2.4. jQuery中的顶级对象$"></a>1.2.4. jQuery中的顶级对象$</h3><ol>
<li>$是 jQuery 的别称，在代码中可以使用 jQuery 代替，但一般为了方便，通常都直接使用 $ 。</li>
<li>$是jQuery的顶级对象，相当于原生JavaScript中的 window。把元素利用$包装成jQuery对象，就可以调用jQuery 的方法。</li>
</ol>
<h3 id="1-2-5-jQuery-对象和-DOM-对象"><a href="#1-2-5-jQuery-对象和-DOM-对象" class="headerlink" title="1.2.5.  jQuery 对象和 DOM 对象"></a>1.2.5.  jQuery 对象和 DOM 对象</h3><p>​    使用 jQuery 方法和原生JS获取的元素是不一样的，总结如下 : </p>
<ol>
<li>用原生 JS 获取来的对象就是 DOM 对象</li>
<li>jQuery 方法获取的元素就是 jQuery 对象。</li>
<li>jQuery 对象本质是： 利用$对DOM 对象包装后产生的对象（伪数组形式存储）。</li>
</ol>
<blockquote>
<p>注意：</p>
<p>只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法。</p>
</blockquote>
<img src="/2020/06/15/JQuery/jQuery%E5%AF%B9%E8%B1%A1%E5%92%8CDOM%E5%AF%B9%E8%B1%A1.png" class="" title="jQuery对象和DOM对象">

<h3 id="1-2-6-jQuery-对象和-DOM-对象转换"><a href="#1-2-6-jQuery-对象和-DOM-对象转换" class="headerlink" title="1.2.6.  jQuery 对象和 DOM 对象转换"></a>1.2.6.  jQuery 对象和 DOM 对象转换</h3><p>​    DOM 对象与 jQuery 对象之间是可以相互转换的。因为原生js 比 jQuery 更大，原生的一些属性和方法 jQuery没有给我们封装. 要想使用这些属性和方法需要把jQuery对象转换为DOM对象才能使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.DOM对象转换成jQuery对象，方法只有一种</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);  <span class="comment">// 获取DOM对象</span></span><br><span class="line"><span class="keyword">var</span> jQueryObject = $(box);  <span class="comment">// 把DOM对象转换为 jQuery 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.jQuery 对象转换为 DOM 对象有两种方法：</span></span><br><span class="line"><span class="comment">//   2.1 jQuery对象[索引值]</span></span><br><span class="line"><span class="keyword">var</span> domObject1 = $(<span class="string">'div'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//   2.2 jQuery对象.get(索引值)</span></span><br><span class="line"><span class="keyword">var</span> domObject2 = $(<span class="string">'div'</span>).get(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>总结：实际开发比较常用的是把DOM对象转换为jQuery对象，这样能够调用功能更加强大的jQuery中的方法。</p>
<h2 id="1-3-jQuery-选择器"><a href="#1-3-jQuery-选择器" class="headerlink" title="1.3. jQuery 选择器"></a>1.3. jQuery 选择器</h2><p>​    原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p>
<h3 id="1-3-1-基础选择器"><a href="#1-3-1-基础选择器" class="headerlink" title="1.3.1. 基础选择器"></a>1.3.1. 基础选择器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"选择器"</span>)   <span class="comment">//  里面选择器直接写 CSS 选择器即可，但是要加引号</span></span><br></pre></td></tr></table></figure>

<p>​</p>
<img src="/2020/06/15/JQuery/%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8.png" class="" title="基础选择器">

<h3 id="1-3-2-层级选择器"><a href="#1-3-2-层级选择器" class="headerlink" title="1.3.2. 层级选择器"></a>1.3.2. 层级选择器</h3><p>​    层级选择器最常用的两个分别为：后代选择器和子代选择器。</p>
<p>​</p>
<img src="/2020/06/15/JQuery/%E5%B1%82%E7%BA%A7%E9%80%89%E6%8B%A9%E5%99%A8.png" class="" title="层级选择器">

<p><strong>基础选择器和层级选择器案例代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;我是div&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="nav"&gt;我是nav div&lt;/</span>div&gt;</span><br><span class="line">    &lt;p&gt;我是p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;我是ul 的&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;我是ul 的&lt;<span class="regexp">/li&gt;        </span></span><br><span class="line"><span class="regexp">        &lt;li&gt;我是ul 的&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        $(function() &#123;</span></span><br><span class="line"><span class="regexp">            console.log($(".nav"));</span></span><br><span class="line"><span class="regexp">            console.log($("ul li"));</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-筛选选择器"><a href="#1-3-3-筛选选择器" class="headerlink" title="1.3.3. 筛选选择器"></a>1.3.3. 筛选选择器</h3><p>​    筛选选择器，顾名思义就是在所有的选项中选择满足条件的进行筛选选择。常见如下 :</p>
<img src="/2020/06/15/JQuery/%E7%AD%9B%E9%80%89%E9%80%89%E6%8B%A9%E5%99%A8.png" class="" title="筛选选择器">

<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ol&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;多个里面筛选几个&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;多个里面筛选几个&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ol&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"ul li:first"</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line">            $(<span class="string">"ul li:eq(2)"</span>).css(<span class="string">"color"</span>, <span class="string">"blue"</span>);</span><br><span class="line">            $(<span class="string">"ol li:odd"</span>).css(<span class="string">"color"</span>, <span class="string">"skyblue"</span>);</span><br><span class="line">            $(<span class="string">"ol li:even"</span>).css(<span class="string">"color"</span>, <span class="string">"pink"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>

<p>另:  jQuery中还有一些筛选方法，类似DOM中的通过一个节点找另外一个节点，父、子、兄以外有所加强。</p>
<img src="/2020/06/15/JQuery/relation.png" class="" title="筛选方法">

<p>偏重于记忆，演示代码略。</p>
<h3 id="1-3-4-知识铺垫"><a href="#1-3-4-知识铺垫" class="headerlink" title="1.3.4 知识铺垫"></a>1.3.4 知识铺垫</h3><ul>
<li>jQuery 设置样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'属性'</span>, <span class="string">'值'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>jQuery 里面的排他思想</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</span></span><br><span class="line">$(<span class="keyword">this</span>).css(“color”,”red”);</span><br><span class="line">$(<span class="keyword">this</span>).siblings(). css(“color”,””);</span><br></pre></td></tr></table></figure>

<ul>
<li>隐式迭代</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</span></span><br><span class="line"><span class="comment">// 简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</span></span><br><span class="line">$(<span class="string">'div'</span>).hide();  <span class="comment">// 页面中所有的div全部隐藏，不用循环操作</span></span><br></pre></td></tr></table></figure>

<ul>
<li>链式编程</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链式编程是为了节省代码量，看起来更优雅。</span></span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">'color'</span>, <span class="string">'red'</span>).sibling().css(<span class="string">'color'</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure>

<p>​    jQuery中常用的样式操作有两种：css() 和 设置类样式方法</p>
<h3 id="1-4-1-方法1-操作-css-方法"><a href="#1-4-1-方法1-操作-css-方法" class="headerlink" title="1.4.1. 方法1: 操作 css 方法"></a>1.4.1. 方法1: 操作 css 方法</h3><p>​    jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。</p>
<p>​    常用以下三种形式 : </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.参数只写属性名，则是返回属性值</span></span><br><span class="line"><span class="keyword">var</span> strColor = $(<span class="keyword">this</span>).css(<span class="string">'color'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.  参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</span></span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">''</span>color<span class="string">''</span>, <span class="string">''</span>red<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.  参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开， 属性可以不用加引号</span></span><br><span class="line">$(<span class="keyword">this</span>).css(&#123; <span class="string">"color"</span>:<span class="string">"white"</span>,<span class="string">"font-size"</span>:<span class="string">"20px"</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>​    注意：css() 多用于样式少时操作，多了则不太方便。</p>
<h3 id="1-4-2-方法2-设置类样式方法"><a href="#1-4-2-方法2-设置类样式方法" class="headerlink" title="1.4.2. 方法2: 设置类样式方法"></a>1.4.2. 方法2: 设置类样式方法</h3><p>​    作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p>
<p>​    常用的三种设置类样式方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.添加类</span></span><br><span class="line">$(<span class="string">"div"</span>).addClass(<span class="string">"current"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.删除类</span></span><br><span class="line">$(<span class="string">"div"</span>).removeClass(<span class="string">"current"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.切换类</span></span><br><span class="line">$(<span class="string">"div"</span>).toggleClass(<span class="string">"current"</span>);</span><br></pre></td></tr></table></figure>

<p>​    注意：</p>
<ol>
<li>设置类样式方法比较适合样式多时操作，可以弥补css()的不足。</li>
<li>原生 JS 中 className 会覆盖元素原先里面的类名，jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</li>
</ol>
<h2 id="1-5-jQuery-效果"><a href="#1-5-jQuery-效果" class="headerlink" title="1.5. jQuery 效果"></a>1.5. jQuery 效果</h2><p>​    jQuery 给我们封装了很多动画效果，最为常见的如下：</p>
<ul>
<li>显示隐藏：show() / hide() / toggle() ;</li>
<li>划入画出：slideDown() / slideUp() / slideToggle() ; </li>
<li>淡入淡出：fadeIn() / fadeOut() / fadeToggle() / fadeTo() ; </li>
<li>自定义动画：animate() ;</li>
</ul>
<blockquote>
<p>注意：</p>
<p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p>
<p>jQuery为我们提供另一个方法，可以停止动画排队：stop() ;</p>
</blockquote>
<h3 id="1-5-1-显示隐藏"><a href="#1-5-1-显示隐藏" class="headerlink" title="1.5.1. 显示隐藏"></a>1.5.1. 显示隐藏</h3><p>​    显示隐藏动画，常见有三个方法：show() / hide() / toggle() ;</p>
<p>​    语法规范如下:</p>
<img src="/2020/06/15/JQuery/show.png" class="" title="show">


<img src="/2020/06/15/JQuery/hide.png" class="" title="hide">


<img src="/2020/06/15/JQuery/toggle.png" class="" title="toggle">

<p><strong>代码演示</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;显示&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button&gt;隐藏&lt;/</span>button&gt;</span><br><span class="line">    &lt;button&gt;切换&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"button"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">"div"</span>).show(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="number">1</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">"button"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">"div"</span>).hide(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="number">1</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">"button"</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              $(<span class="string">"div"</span>).toggle(<span class="number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 一般情况下，我们都不加参数直接显示隐藏就可以了</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP学生信息管理系统的一些笔记</title>
    <url>/2020/12/08/JSP%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JSP学生信息管理系统笔记"><a href="#JSP学生信息管理系统笔记" class="headerlink" title="JSP学生信息管理系统笔记"></a>JSP学生信息管理系统笔记</h1><h2 id="1-css文件变化，而jsp页面无变化问题"><a href="#1-css文件变化，而jsp页面无变化问题" class="headerlink" title="1.css文件变化，而jsp页面无变化问题"></a>1.css文件变化，而jsp页面无变化问题</h2><p><strong>清除浏览器缓存，谷歌Ctrl+F5，或者直接设置中清除。</strong></p>
<h2 id="2-使用cookie实现登录页面记住我功能"><a href="#2-使用cookie实现登录页面记住我功能" class="headerlink" title="2.使用cookie实现登录页面记住我功能"></a>2.使用cookie实现登录页面记住我功能</h2><p><strong>servlet页面</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建cookie</span></span><br><span class="line"><span class="comment">//将用户名和密码加入cookie   cookie保存多个值的方法 不能放数组 只能String类型</span></span><br><span class="line">String data=account+<span class="string">","</span>+passWord;</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"remember"</span>,data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 判断remeber 是否被选中</span></span><br><span class="line"><span class="keyword">if</span> (isChecked != <span class="keyword">null</span> &amp;&amp; isChecked.equals(<span class="string">"on"</span>)) &#123;</span><br><span class="line">	<span class="comment">// "yes" 勾选了 ==&gt; 设置有效时间为 一周</span></span><br><span class="line">	cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">// null 没勾选 ==&gt; 设置cookie的有效时间为0</span></span><br><span class="line">	cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3 将cookie添加到response</span></span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">response.sendRedirect(<span class="string">"success.jsp"</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>jsp页面</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">    &lt;%</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        Cookie remember = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//存放字符分割后的数组</span></span><br><span class="line">        String[] data=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c.getName().equals(<span class="string">"remember"</span>)) &#123;</span><br><span class="line">                    remember = c;</span><br><span class="line">                    <span class="comment">//字符串分割</span></span><br><span class="line">                    data=remember.getValue().split(<span class="string">","</span>);</span><br><span class="line">                   	<span class="comment">//out.print(data[1]);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 表单中 给输入框赋cookie中的值--&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> id=<span class="string">"inputAccount"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> name=<span class="string">"account"</span> placeholder=<span class="string">"用户名"</span> required=<span class="string">""</span> </span><br><span class="line">        autofocus=<span class="string">""</span> value=<span class="string">"&lt;%=remember==null?"</span><span class="string">":data[0] %&gt;"</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-登录界面验证码"><a href="#3-登录界面验证码" class="headerlink" title="3.登录界面验证码"></a>3.登录界面验证码</h2><p><strong>HTML表单</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"checkCode"</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> required=<span class="string">""</span> id=<span class="string">"inputCheckCode"</span> style=<span class="string">"width:50%;display:inline"</span> placeholder=<span class="string">"验证码"</span>&gt;</span><br><span class="line">				&lt;img src=<span class="string">"./tools/checkCode.jsp"</span> id=<span class="string">"checkCodeImage"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>将验证码图片单独做成一个jsp页面</strong></p>
<p><strong>图片链接为这个jsp页面</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"image/jpeg"</span> language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*,java.awt.*,java.awt.image.*,javax.imageio.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">	<span class="function">Color <span class="title">getRandColor</span><span class="params">(<span class="keyword">int</span> fc,<span class="keyword">int</span> bc)</span></span>&#123;</span><br><span class="line">		Random random = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="keyword">if</span>(fc &gt; <span class="number">255</span>)&#123;</span><br><span class="line">			fc = <span class="number">255</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(bc &lt; <span class="number">255</span>)&#123;</span><br><span class="line">			bc = <span class="number">255</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> r = fc +random.nextInt(bc-fc);</span><br><span class="line">		<span class="keyword">int</span> g = fc +random.nextInt(bc-fc);</span><br><span class="line">		<span class="keyword">int</span> b = fc +random.nextInt(bc-fc);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Color(r,g,b);</span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;% </span><br><span class="line">	<span class="comment">//设置页面不缓存</span></span><br><span class="line">	response.setHeader(<span class="string">"Pragma"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line">	response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-catch"</span>);</span><br><span class="line">	response.setDateHeader(<span class="string">"Expires"</span>,<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//在内存中创建图象</span></span><br><span class="line">	<span class="keyword">int</span> width = <span class="number">70</span>;</span><br><span class="line">	<span class="keyword">int</span> height = <span class="number">30</span>;</span><br><span class="line">	BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建图象</span></span><br><span class="line">	Graphics g = image.getGraphics();</span><br><span class="line">	<span class="comment">//生成随机对象</span></span><br><span class="line">	Random random = <span class="keyword">new</span> Random();</span><br><span class="line">	<span class="comment">//设置背景色</span></span><br><span class="line">	g.setColor(getRandColor(<span class="number">200</span>,<span class="number">250</span>));</span><br><span class="line">	g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line">	<span class="comment">//设置字体</span></span><br><span class="line">	g.setFont(<span class="keyword">new</span> Font(<span class="string">"Tines Nev Roman"</span>,Font.PLAIN,<span class="number">24</span>));</span><br><span class="line">	<span class="comment">//随机产生干扰线</span></span><br><span class="line">	g.setColor(getRandColor(<span class="number">160</span>,<span class="number">200</span>));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> x = random.nextInt(width);</span><br><span class="line">		<span class="keyword">int</span> y = random.nextInt(height);</span><br><span class="line">		<span class="keyword">int</span> xl = random.nextInt(<span class="number">12</span>);</span><br><span class="line">		<span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//随机产生认证码,4位数字</span></span><br><span class="line">	String sRand = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">		String rand = String.valueOf(random.nextInt(<span class="number">10</span>));</span><br><span class="line">		sRand  += rand;</span><br><span class="line">		<span class="comment">//将认证码显示到图象中</span></span><br><span class="line">		g.setColor(<span class="keyword">new</span> Color(<span class="number">20</span> + random.nextInt(<span class="number">110</span>),<span class="number">20</span> + random.nextInt(<span class="number">110</span>),<span class="number">20</span> + random.nextInt(<span class="number">110</span>)));</span><br><span class="line">		g.drawString(rand,<span class="number">13</span>*i+<span class="number">6</span>,<span class="number">25</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	session.setAttribute(<span class="string">"rCode"</span>,sRand);</span><br><span class="line">	<span class="comment">//图像生效</span></span><br><span class="line">	g.dispose();</span><br><span class="line">	<span class="comment">//输出图像到页面</span></span><br><span class="line">	ImageIO.write(image,<span class="string">"JPEG"</span>,response.getOutputStream());</span><br><span class="line">	out.clear();</span><br><span class="line">	out = pageContext.pushBody();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>点击刷新功能</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">		<span class="comment">//点击刷新验证码</span></span><br><span class="line">		$(<span class="string">"#checkCodeImage"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="comment">//console.log($(this).attr("src"));</span></span><br><span class="line">			$(<span class="keyword">this</span>).attr(<span class="string">"src"</span>,<span class="string">"./tools/checkCode.jsp?"</span>+<span class="built_in">Math</span>.random()); <span class="comment">//重新设置img src路径</span></span><br><span class="line">		&#125;);	</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-使用JQuery中的Ajax请求servlet"><a href="#4-使用JQuery中的Ajax请求servlet" class="headerlink" title="4.使用JQuery中的Ajax请求servlet"></a>4.使用JQuery中的Ajax请求servlet</h2><p><strong>1.servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON; <span class="comment">//关键包 需要上github获取	com.alibaba.fastjson</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//response.getWriter().append("Served at: ").append(request.getContextPath());</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 从cookie中取值</span></span><br><span class="line">		Cookie[] cookies = request.getCookies();</span><br><span class="line">		Cookie remember = <span class="keyword">null</span>;</span><br><span class="line">		String[] data = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">				<span class="keyword">if</span> (c.getName().equals(<span class="string">"remember"</span>)) &#123;</span><br><span class="line">					remember = c;</span><br><span class="line">					<span class="comment">// 字符串分割</span></span><br><span class="line">					data = URLDecoder.decode(remember.getValue(), <span class="string">"utf-8"</span>)</span><br><span class="line">							.split(<span class="string">","</span>); <span class="comment">/* 使用utf-8读取 */</span></span><br><span class="line">					<span class="comment">// out.print(data[2]);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// System.out.println(data[3].substring(0,data[3].length()-2));</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 获取班号</span></span><br><span class="line">			String class_id= data[<span class="number">3</span>].substring(<span class="number">0</span>,data[<span class="number">3</span>].length()-<span class="number">2</span>);</span><br><span class="line">			</span><br><span class="line">			String sql = <span class="string">"SELECT a.date,a.address,b.cname "</span></span><br><span class="line">					+ <span class="string">"FROM course_chart a,course_info b "</span></span><br><span class="line">					+ <span class="string">"WHERE a.cno=b.cno AND a.class_id="</span>+class_id+<span class="string">";"</span>;</span><br><span class="line">			<span class="comment">//System.out.println(sql);</span></span><br><span class="line">			ResultSet rSet = jdbc.query(sql);</span><br><span class="line">					</span><br><span class="line">			List&lt;MyChart&gt; list=<span class="keyword">new</span> ArrayList&lt;MyChart&gt;();</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">while</span> (rSet.next()) &#123;</span><br><span class="line">					<span class="comment">// 封装到javaBean中</span></span><br><span class="line">					MyChart myChart = <span class="keyword">new</span> MyChart(rSet.getString(<span class="number">1</span>),rSet.getString(<span class="number">2</span>),rSet.getString(<span class="number">3</span>));</span><br><span class="line">					<span class="comment">// 把对象加入容器</span></span><br><span class="line">					list.add(myChart);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 把容器加入session</span></span><br><span class="line">				HttpSession session = request.getSession();</span><br><span class="line">				session.setAttribute(<span class="string">"MyChart"</span>, list);</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//将list容器中的内容转换成json数据</span></span><br><span class="line">				request.setCharacterEncoding(<span class="string">"utf-8"</span>);  <span class="comment">// 设置request字符编码</span></span><br><span class="line">		        String searchText = request.getParameter(<span class="string">"search"</span>); <span class="comment">// 获取传入的search字段的内容</span></span><br><span class="line">		        response.setContentType(<span class="string">"text/json; charset=utf-8"</span>);    <span class="comment">// 设置response的编码及格式</span></span><br><span class="line">		        PrintWriter out = response.getWriter();</span><br><span class="line">		        String resJSON = JSON.toJSONString(list);     <span class="comment">// 转换为json</span></span><br><span class="line">		        <span class="comment">//System.out.println(resJSON);</span></span><br><span class="line">		        out.print(resJSON); <span class="comment">// 返回数据</span></span><br><span class="line">		        </span><br><span class="line">		        <span class="comment">//response.sendRedirect("control/MyCourseChart.jsp");</span></span><br><span class="line">				</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果没有登录信息则返回登录页面</span></span><br><span class="line">			response.sendRedirect(<span class="string">"Login.jsp"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.JS文件</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//获取数据</span></span><br><span class="line">	$.<span class="keyword">get</span>("../MyCourseChart",function(data,status)&#123;</span><br><span class="line">	    <span class="built_in">console</span>.log(<span class="string">"数据: "</span> + <span class="built_in">JSON</span>.stringify(data)+ <span class="string">"\n状态: "</span> + status);</span><br><span class="line">	    <span class="keyword">let</span> DATA=<span class="built_in">JSON</span>.stringify(data); <span class="comment">//先要转换成json字符串 否则显示[object object]</span></span><br><span class="line">	    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(DATA))</span><br><span class="line">	  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">getData();</span><br></pre></td></tr></table></figure>

<h2 id="5-servlet获取url地址栏参数乱码"><a href="#5-servlet获取url地址栏参数乱码" class="headerlink" title="5.servlet获取url地址栏参数乱码"></a>5.servlet获取url地址栏参数乱码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">String q=request.getParameter(<span class="string">"query"</span>); <span class="comment">//直接打印q出现乱码</span></span><br><span class="line"><span class="comment">//解决url地址栏参数中文乱码</span></span><br><span class="line">String query = <span class="keyword">new</span> String(q.getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"utf-8"</span>);  <span class="comment">//可正常打印</span></span><br></pre></td></tr></table></figure>

<h2 id="6-配置404页面"><a href="#6-配置404页面" class="headerlink" title="6.配置404页面"></a>6.配置404页面</h2><p><strong>web.xml文件</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"> 	&lt;error-page&gt;</span><br><span class="line">       &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">       &lt;location&gt;/tools/404NotFound.jsp&lt;/location&gt;  &lt;!-- 404页面路径 --&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure>

<p><strong>404NotFound.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">"icon"</span> href=<span class="string">"../assets/images/favicon.jpeg"</span>&gt;</span><br><span class="line">&lt;title&gt;页面走丢了&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">	.wrap&#123;</span><br><span class="line">		width:<span class="number">100</span>%;</span><br><span class="line">		height:<span class="number">100</span>%;</span><br><span class="line">		position:absolute;</span><br><span class="line">		left:<span class="number">0</span>;</span><br><span class="line">		top:<span class="number">0</span>;</span><br><span class="line">		overflow:hidden;</span><br><span class="line">		right:<span class="number">0</span>;</span><br><span class="line">		bottom:<span class="number">0</span>;</span><br><span class="line">		margin:auto;</span><br><span class="line">		background-color:#F2F2F2;</span><br><span class="line">	&#125;</span><br><span class="line">	.wrap img&#123;		</span><br><span class="line">		height:<span class="number">100</span>%;</span><br><span class="line">	&#125;</span><br><span class="line">	.wrap .img_box&#123;</span><br><span class="line">		text-align:center;</span><br><span class="line">		height:<span class="number">100</span>%;</span><br><span class="line">		position:relative;</span><br><span class="line">		margin:auto;</span><br><span class="line">	&#125;</span><br><span class="line">	.wrap .text&#123;</span><br><span class="line">		position:absolute;</span><br><span class="line">		left:<span class="number">10</span>px;</span><br><span class="line">		top:<span class="number">10</span>px;</span><br><span class="line">		z-index:<span class="number">100</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	.wrap .text a&#123;</span><br><span class="line">		text-decoration:none;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"text"</span>&gt;</span><br><span class="line">		&lt;span&gt;请点此处&lt;/span&gt;&lt;a href="JavaScript:history.go(-1)"&gt;返回&lt;/a&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"img_box"</span>&gt;</span><br><span class="line">	&lt;img src=<span class="string">"&lt;%=request.getContextPath()%&gt;/assets/images/404.png"</span>&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><h2 id="1-登录页"><a href="#1-登录页" class="headerlink" title="1.登录页"></a>1.登录页</h2><img src="/2020/12/08/JSP%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/login.png" class="" title="学生登录">

<h2 id="2-学生首页"><a href="#2-学生首页" class="headerlink" title="2.学生首页"></a>2.学生首页</h2><img src="/2020/12/08/JSP%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/studentHome.png" class="" title="学生首页">

<h2 id="3-管理员首页"><a href="#3-管理员首页" class="headerlink" title="3.管理员首页"></a>3.管理员首页</h2><img src="/2020/12/08/JSP%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/adminHome.png" class="" title="管理员首页">



<h1 id="源代码地址"><a href="#源代码地址" class="headerlink" title="源代码地址"></a>源代码地址</h1><p><a href="https://github.com/ITaylorfan/-JSP-StudentManagementSystem.git" target="_blank" rel="noopener">https://github.com/ITaylorfan/-JSP-StudentManagementSystem.git</a></p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP实训笔记</title>
    <url>/2020/09/18/JSP%E5%AE%9E%E8%AE%AD%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JSP的一些笔记"><a href="#JSP的一些笔记" class="headerlink" title="JSP的一些笔记"></a>JSP的一些笔记</h1><h2 id="1-输出对象"><a href="#1-输出对象" class="headerlink" title="1.输出对象"></a>1.输出对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.print(<span class="string">"&lt;h1&gt;哈哈哈哈哈&lt;/h1&gt;"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2.重定向"></a>2.重定向</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"./index2.jsp"</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="3-JSP常用内置对象"><a href="#3-JSP常用内置对象" class="headerlink" title="3.JSP常用内置对象"></a>3.JSP常用内置对象</h2><h3 id="1-response-响应对象"><a href="#1-response-响应对象" class="headerlink" title="1.response(响应对象)"></a>1.response(响应对象)</h3><h3 id="2-request-http请求对象"><a href="#2-request-http请求对象" class="headerlink" title="2.request(http请求对象)"></a>2.request(http请求对象)</h3><h3 id="3-Session-会话对象"><a href="#3-Session-会话对象" class="headerlink" title="3.Session(会话对象)"></a>3.Session(会话对象)</h3><h2 id="4-服务端页面接收表单传过来的参数"><a href="#4-服务端页面接收表单传过来的参数" class="headerlink" title="4.服务端页面接收表单传过来的参数"></a>4.服务端页面接收表单传过来的参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置中文编码防止乱码</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">String acc=request.getParameter(<span class="string">"account"</span>);</span><br><span class="line">String password=request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">String student=request.getParameter(<span class="string">"student"</span>);</span><br><span class="line">String age=request.getParameter(<span class="string">"age"</span>);</span><br></pre></td></tr></table></figure>



<h2 id="5-JDBC连接mysql"><a href="#5-JDBC连接mysql" class="headerlink" title="5.JDBC连接mysql"></a>5.JDBC连接mysql</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hgy.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbctest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">		String driverStr=<span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//数据库连接</span></span><br><span class="line">		String dataBaseUrl=<span class="string">"jdbc:mysql://localhost:3306/chat"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//用户名</span></span><br><span class="line">		String account=<span class="string">"root"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//密码</span></span><br><span class="line">		String password=<span class="string">"123456"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//创建连接对象 需要异常处理</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Connection connection=DriverManager.getConnection(dataBaseUrl, account, password);</span><br><span class="line">			<span class="comment">//创建命令对象</span></span><br><span class="line">			PreparedStatement pStatement=connection.prepareStatement(<span class="string">"select * from book"</span>);</span><br><span class="line">			<span class="comment">//执行命令集合 获取sql语句执行结果</span></span><br><span class="line">			ResultSet rSet=pStatement.executeQuery();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//获取字段列数</span></span><br><span class="line">			ResultSetMetaData rMetaData=rSet.getMetaData();</span><br><span class="line">			<span class="keyword">int</span> ColumnNumber=rMetaData.getColumnCount();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//打印结果 next()方法获取 下一个结果 如果为末尾返回false</span></span><br><span class="line">			<span class="keyword">while</span>(rSet.next())&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ColumnNumber;i++)&#123;</span><br><span class="line">					<span class="comment">//将每列打印出来</span></span><br><span class="line">					System.out.print(rSet.getString(i)+<span class="string">" "</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-servlet的基本使用"><a href="#6-servlet的基本使用" class="headerlink" title="6.servlet的基本使用"></a>6.servlet的基本使用</h2><h3 id="6-1新建一个servlet文件"><a href="#6-1新建一个servlet文件" class="headerlink" title="6.1新建一个servlet文件"></a>6.1新建一个servlet文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hgy.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hgy.entity.Book;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class select</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/select"</span>)  <span class="comment">//这个应该是监听的路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">select</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//		response.getWriter().append("Served at: ").append(request.getContextPath());</span></span><br><span class="line">		</span><br><span class="line">		List&lt;Book&gt; books =<span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">		books.add(<span class="keyword">new</span> Book(<span class="number">104</span>, <span class="string">"三体"</span>, <span class="number">95</span>, <span class="string">"中国人民出版社"</span>));</span><br><span class="line">		books.add(<span class="keyword">new</span> Book(<span class="number">105</span>, <span class="string">"上海堡垒"</span>, <span class="number">50</span>, <span class="string">"中国人民出版社"</span>));</span><br><span class="line">		books.add(<span class="keyword">new</span> Book(<span class="number">106</span>, <span class="string">"龙族"</span>,<span class="number">60</span>, <span class="string">"中国人民出版社"</span>));</span><br><span class="line">		books.add(<span class="keyword">new</span> Book(<span class="number">107</span>, <span class="string">"神印王座"</span>, <span class="number">66</span>, <span class="string">"中国人民出版社"</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//利用会话保存员工记录</span></span><br><span class="line">		HttpSession session=request.getSession();</span><br><span class="line">		session.setAttribute(<span class="string">"Books"</span>, books);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//跳转指定的jsp</span></span><br><span class="line">		response.sendRedirect(<span class="string">"Book_servlet.jsp"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2重定向跳转后的页面Book-servlet-jsp"><a href="#6-2重定向跳转后的页面Book-servlet-jsp" class="headerlink" title="6.2重定向跳转后的页面Book_servlet.jsp"></a>6.2重定向跳转后的页面Book_servlet.jsp</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"com.hgy.entity.Book"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"java.util.List"</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">//获取信息 打印</span></span><br><span class="line">	List&lt;Book&gt; books=(List&lt;Book&gt;) session.getAttribute(<span class="string">"Books"</span>);</span><br><span class="line">	<span class="keyword">for</span>(Book bs:books)&#123;</span><br><span class="line">		%&gt;</span><br><span class="line">		&lt;div&gt;&lt;%=bs.getTitle() %&gt;&lt;/div&gt;</span><br><span class="line">		&lt;% </span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-3调用上面创建的servlet"><a href="#6-3调用上面创建的servlet" class="headerlink" title="6.3调用上面创建的servlet"></a>6.3调用上面创建的servlet</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"select"</span>&gt;跳转到servlet&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-servlet和jdbc一起使用"><a href="#7-servlet和jdbc一起使用" class="headerlink" title="7.servlet和jdbc一起使用"></a>7.servlet和jdbc一起使用</h2><h3 id="7-1-封装好的JDBC类，直接调用方法"><a href="#7-1-封装好的JDBC类，直接调用方法" class="headerlink" title="7.1 封装好的JDBC类，直接调用方法"></a>7.1 封装好的JDBC类，直接调用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hgy.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这是jdbc封装好的文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbc</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Connection con;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> PreparedStatement ps;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ResultSet rs;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">			con = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/chat"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//增删改 </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ps = con.prepareStatement(sql);</span><br><span class="line">			ps.executeUpdate();</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查询</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">query</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ps = con.prepareStatement(sql);</span><br><span class="line">			rs = ps.executeQuery();</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> rs;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-servlet文件"><a href="#7-2-servlet文件" class="headerlink" title="7.2 servlet文件"></a>7.2 servlet文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hgy.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hgy.entity.Book;</span><br><span class="line"><span class="keyword">import</span> com.hgy.jdbc.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class jdbcSelect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/jdbcSelect"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcSelect</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">jdbcSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//		response.getWriter().append("Served at: ").append(request.getContextPath());</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//新建一个list容器</span></span><br><span class="line">			List&lt;Book&gt; books =<span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">			<span class="comment">//创建一个SQL语句</span></span><br><span class="line">			String sql = <span class="string">"select * from book"</span>;</span><br><span class="line">            <span class="comment">//调用封装好的JDBC类中的方法</span></span><br><span class="line">			ResultSet rs=jdbc.query(sql);</span><br><span class="line">            </span><br><span class="line">			<span class="comment">//获取字段列数</span></span><br><span class="line">			ResultSetMetaData rMetaData=rs.getMetaData();</span><br><span class="line">			<span class="keyword">int</span> ColumnNumber=rMetaData.getColumnCount();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="comment">//将获取到的数据库表内容加入到Book对象中</span></span><br><span class="line">				Book book = <span class="keyword">new</span> Book(rs.getInt(<span class="number">1</span>), rs.getString(<span class="number">2</span>),rs.getInt(<span class="number">3</span>),rs.getString(<span class="number">4</span>));</span><br><span class="line">                <span class="comment">//把book对象加入books容器</span></span><br><span class="line">				books.add(book);</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line"><span class="comment">//					for(int i=1;i&lt;=ColumnNumber;i++)&#123;</span></span><br><span class="line"><span class="comment">//						//将每列打印出来</span></span><br><span class="line"><span class="comment">//						System.out.print(rs.getString(i)+" ");</span></span><br><span class="line"><span class="comment">//					&#125;</span></span><br><span class="line"><span class="comment">//					System.out.println();</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//利用会话保存员工记录</span></span><br><span class="line">			HttpSession session=request.getSession();</span><br><span class="line">			session.setAttribute(<span class="string">"Books2"</span>, books);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//跳转指定的jsp</span></span><br><span class="line">			response.sendRedirect(<span class="string">"Book_servlet2.jsp"</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-跳转后的jsp页面"><a href="#7-3-跳转后的jsp页面" class="headerlink" title="7.3 跳转后的jsp页面"></a>7.3 跳转后的jsp页面</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"com.hgy.entity.Book"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"java.util.List"</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;连接mysql和servlet&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">	table&#123;</span><br><span class="line">		width:<span class="number">500</span>px;</span><br><span class="line">		height:<span class="number">40</span>px;</span><br><span class="line">		border-collapse:collapse;	</span><br><span class="line">		background-image:linear-gradient(to right,orange,yellow);</span><br><span class="line">	&#125;</span><br><span class="line">	table td&#123;</span><br><span class="line">		border:<span class="number">1</span>px solid black;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;% </span><br><span class="line">    <span class="comment">//创建一个list容器接收内容   按属性获取会话内容</span></span><br><span class="line">	List&lt;Book&gt; books2=(List&lt;Book&gt;) session.getAttribute(<span class="string">"Books2"</span>);</span><br><span class="line">	<span class="keyword">for</span>(Book bs:books2)&#123;</span><br><span class="line">		%&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getId() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getTitle() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getPrice() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getPublisher() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;% </span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8-servlet和jdbc执行删除数据操作"><a href="#8-servlet和jdbc执行删除数据操作" class="headerlink" title="8.servlet和jdbc执行删除数据操作"></a>8.servlet和jdbc执行删除数据操作</h2><blockquote>
<p>jdbc用上面封装好的</p>
</blockquote>
<h3 id="8-1-servlet文件-执行删除SQL语句"><a href="#8-1-servlet文件-执行删除SQL语句" class="headerlink" title="8.1 servlet文件,执行删除SQL语句"></a>8.1 servlet文件,执行删除SQL语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hgy.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hgy.jdbc.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class jdbcdelete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/jdbcdelete"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcdelete</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">jdbcdelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//response.getWriter().append("Served at: ").append(request.getContextPath());</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取传递过来的员工编号</span></span><br><span class="line">				String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//执行删除命令</span></span><br><span class="line">				String sql = <span class="string">"delete from book where id="</span>+id;</span><br><span class="line">				jdbc.update(sql);</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//跳转 查询操作的servlet以更新数据</span></span><br><span class="line">				response.sendRedirect(<span class="string">"jdbcSelect"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-3-jsp页面-点击删除后跳转到执行删除操作的servlet文件"><a href="#8-3-jsp页面-点击删除后跳转到执行删除操作的servlet文件" class="headerlink" title="8.3 jsp页面 点击删除后跳转到执行删除操作的servlet文件"></a>8.3 jsp页面 点击删除后跳转到执行删除操作的servlet文件</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;% </span><br><span class="line">	List&lt;Book&gt; books2=(List&lt;Book&gt;) session.getAttribute(<span class="string">"Books2"</span>);</span><br><span class="line">	<span class="keyword">for</span>(Book bs:books2)&#123;</span><br><span class="line">		%&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getId() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getTitle() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getPrice() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getPublisher() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;a onclick="return confirm('是否确认删除')" href="jdbcdelete?id=&lt;%=bs.getId() %&gt;"&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;% </span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h2 id="9-servlet和jdbc-执行插入数据操作"><a href="#9-servlet和jdbc-执行插入数据操作" class="headerlink" title="9. servlet和jdbc 执行插入数据操作"></a>9. servlet和jdbc 执行插入数据操作</h2><blockquote>
<p>jdbc用上面封装好的</p>
</blockquote>
<h3 id="9-1-servlet页面-接收jsp页面传过来的表单值"><a href="#9-1-servlet页面-接收jsp页面传过来的表单值" class="headerlink" title="9.1 servlet页面 接收jsp页面传过来的表单值"></a>9.1 servlet页面 接收jsp页面传过来的表单值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hgy.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hgy.jdbc.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class jdbcInsert</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/jdbcInsert"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcInsert</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">jdbcInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//response.getWriter().append("Served at: ").append(request.getContextPath());</span></span><br><span class="line">		</span><br><span class="line">		request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		String id=request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">		String bookName=request.getParameter(<span class="string">"bookName"</span>);</span><br><span class="line">		String price=request.getParameter(<span class="string">"price"</span>);</span><br><span class="line">		String publisher=request.getParameter(<span class="string">"publisher"</span>);</span><br><span class="line">		System.out.println(id+bookName+price+publisher);</span><br><span class="line">		<span class="comment">//执行插入命令 注意字符串拼接</span></span><br><span class="line">		String sql=<span class="string">"insert into book(id,bookname,price,publisher) values("</span>+id+<span class="string">","</span>+<span class="string">"'"</span>+bookName+<span class="string">"'"</span>+<span class="string">","</span>+price+<span class="string">","</span>+<span class="string">"'"</span>+publisher+<span class="string">"'"</span>+<span class="string">")"</span>;</span><br><span class="line">		<span class="comment">//System.out.println(sql);</span></span><br><span class="line">		jdbc.update(sql);</span><br><span class="line">		<span class="comment">//跳转查询操作</span></span><br><span class="line">		response.sendRedirect(<span class="string">"jdbcSelect"</span>);	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-jsp页面"><a href="#9-2-jsp页面" class="headerlink" title="9.2 jsp页面"></a>9.2 jsp页面</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"jdbcInsert"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">	ID&lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;</span><br><span class="line">	书名&lt;input type=<span class="string">"text"</span> name=<span class="string">"bookName"</span>&gt;</span><br><span class="line">	价格&lt;input type=<span class="string">"text"</span> name=<span class="string">"price"</span>&gt;</span><br><span class="line">	出版社&lt;input type=<span class="string">"text"</span> name=<span class="string">"publisher"</span>&gt;</span><br><span class="line">	&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h2 id="10-servlet和jdbc执行指定查询操作"><a href="#10-servlet和jdbc执行指定查询操作" class="headerlink" title="10.servlet和jdbc执行指定查询操作"></a>10.servlet和jdbc执行指定查询操作</h2><blockquote>
<p>jdbc用7.1中封装好的文件</p>
</blockquote>
<h3 id="10-1-jsp页面"><a href="#10-1-jsp页面" class="headerlink" title="10.1 jsp页面"></a>10.1 jsp页面</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;查询出版社&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"jdbcSelect2"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">	出版社&lt;input type=<span class="string">"text"</span> name=<span class="string">"publisher"</span>&gt;</span><br><span class="line">	&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 数据打印 --&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line"> &lt;% </span><br><span class="line">	List&lt;Book2&gt; books2=(List&lt;Book2&gt;) session.getAttribute(<span class="string">"Book3"</span>);</span><br><span class="line">	<span class="keyword">for</span>(Book2 bs:books2)&#123;</span><br><span class="line">		%&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getId() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getTitle() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getPrice() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getPublisher() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getTid() %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;&lt;%=bs.getTypeName() %&gt;&lt;/td&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;% </span><br><span class="line">	&#125;</span><br><span class="line">%&gt; </span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10-2-servlet文件"><a href="#10-2-servlet文件" class="headerlink" title="10.2 servlet文件"></a>10.2 servlet文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">					</span><br><span class="line">		request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    	<span class="comment">//获取表单提交的值</span></span><br><span class="line">		String publisher=request.getParameter(<span class="string">"publisher"</span>);</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建一个list容器</span></span><br><span class="line">			List&lt;Book2&gt; books2=<span class="keyword">new</span> ArrayList&lt;Book2&gt;(); </span><br><span class="line">			String sql=<span class="string">"SELECT b.*,t.name FROM book2 b,booktype t WHERE b.tid=t.id and b.publisher like '%"</span>+publisher+<span class="string">"%'"</span>;</span><br><span class="line">			ResultSet rSet=jdbc.query(sql);</span><br><span class="line">			<span class="comment">//获取字段列数</span></span><br><span class="line">			ResultSetMetaData rMetaData=rSet.getMetaData();</span><br><span class="line">			<span class="keyword">int</span> ColumnNumber=rMetaData.getColumnCount();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(rSet.next())&#123;</span><br><span class="line">				Book2 Book2=<span class="keyword">new</span> Book2(rSet.getInt(<span class="number">1</span>), rSet.getString(<span class="number">2</span>), rSet.getInt(<span class="number">3</span>),rSet.getString(<span class="number">4</span>),rSet.getInt(<span class="number">5</span>), rSet.getString(<span class="number">6</span>));</span><br><span class="line">				books2.add(Book2);</span><br><span class="line">				</span><br><span class="line">                <span class="comment">//控制台打印数据库内容</span></span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ColumnNumber;i++)&#123;</span><br><span class="line">					<span class="comment">//将每列打印出来</span></span><br><span class="line">					System.out.print(rSet.getString(i)+<span class="string">" "</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//将list容器添加到session会话中</span></span><br><span class="line">			HttpSession session=request.getSession();</span><br><span class="line">			session.setAttribute(<span class="string">"Book3"</span>, books2);</span><br><span class="line">			<span class="comment">//跳转</span></span><br><span class="line">			response.sendRedirect(<span class="string">"Book_servlet3.jsp"</span>);  <span class="comment">//这里的是10.1提交表单的jsp文件</span></span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">			System.out.println(<span class="string">"aaa"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-3-用到的数据库SQL语句"><a href="#10-3-用到的数据库SQL语句" class="headerlink" title="10.3 用到的数据库SQL语句"></a>10.3 用到的数据库SQL语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book</span><br><span class="line">(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">int</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">	<span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">	<span class="string">`price`</span> <span class="built_in">INT</span>,</span><br><span class="line">	<span class="string">`publisher`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">	<span class="string">`tid`</span> <span class="built_in">int</span></span><br><span class="line">) <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> = <span class="string">'utf8'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> BookType</span><br><span class="line">(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">int</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">) <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> = <span class="string">'utf8'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> booktype <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'小说'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> booktype <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'教材'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> booktype <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'散文'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'三国演义'</span>,<span class="number">200</span>,<span class="string">'清华大学出版社'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'水浒传'</span>,<span class="number">280</span>,<span class="string">'武汉大学出版社'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'红楼梦'</span>,<span class="number">250</span>,<span class="string">'武汉大学出版社'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'西游记'</span>,<span class="number">300</span>,<span class="string">'清华大学出版社'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'C#面向对象程序设计'</span>,<span class="number">100</span>,<span class="string">'清华大学出版社'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'C语言程序设计'</span>,<span class="number">100</span>,<span class="string">'清华大学出版社'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'SQLServer数据库'</span>,<span class="number">100</span>,<span class="string">'清华大学出版社'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'静态网页设计'</span>,<span class="number">100</span>,<span class="string">'北京大学出版社'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Java高级编程'</span>,<span class="number">100</span>,<span class="string">'北京大学出版社'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'落花生'</span>,<span class="number">200</span>,<span class="string">'北京大学出版社'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'小橘灯'</span>,<span class="number">300</span>,<span class="string">'清华大学出版社'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'我喜欢出发'</span>,<span class="number">100</span>,<span class="string">'武汉大学出版社'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'热爱生命'</span>,<span class="number">150</span>,<span class="string">'北京大学出版社'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'剪不断的情愫'</span>,<span class="number">180</span>,<span class="string">'清华大学出版社'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'嫁给幸福'</span>,<span class="number">200</span>,<span class="string">'北京大学出版社'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'围城'</span>,<span class="number">160</span>,<span class="string">'清华大学出版社'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'封神演义'</span>,<span class="number">300</span>,<span class="string">'北京大学出版社'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'官场现形记'</span>,<span class="number">260</span>,<span class="string">'武汉大学出版社'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'陌上花开'</span>,<span class="number">220</span>,<span class="string">'北京大学出版社'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'高等数学'</span>,<span class="number">190</span>,<span class="string">'武汉大学出版社'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'大学语文'</span>,<span class="number">120</span>,<span class="string">'清华大学出版社'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'流浪地球'</span>,<span class="number">100</span>,<span class="string">'北京大学出版社'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'亮剑'</span>,<span class="number">170</span>,<span class="string">'武汉大学出版社'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h1 id="引入jstl标签"><a href="#引入jstl标签" class="headerlink" title="引入jstl标签"></a>引入jstl标签</h1><h2 id="1-放入jstl-1-2-jar包"><a href="#1-放入jstl-1-2-jar包" class="headerlink" title="1.放入jstl-1.2.jar包"></a>1.放入jstl-1.2.jar包</h2><blockquote>
<p>WebContent-&gt;WEB-INF-&gt;lib文件夹下，右键jar文件 Build Path</p>
</blockquote>
<h2 id="2-头部引入-lt-taglib-uri-”http-java-sun-com-jsp-jstl-core-quot-prefix-”c”-gt"><a href="#2-头部引入-lt-taglib-uri-”http-java-sun-com-jsp-jstl-core-quot-prefix-”c”-gt" class="headerlink" title="2.头部引入&lt;%@ taglib uri=”http://java.sun.com/jsp/jstl/core&quot;  prefix=”c” %&gt;"></a>2.头部引入&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core&quot;</a>  prefix=”c” %&gt;</h2><h1 id="Eclipse的一些设置"><a href="#Eclipse的一些设置" class="headerlink" title="Eclipse的一些设置"></a>Eclipse的一些设置</h1><h2 id="1-设置全局提示"><a href="#1-设置全局提示" class="headerlink" title="1.设置全局提示"></a>1.设置全局提示</h2><p><strong>上方工具栏Window-&gt;Preferences-&gt;Java-&gt;Editor-&gt;Content Assist</strong></p>
<p><strong>在右边区域下方的 Auto activation triggers for Java: 的.后面加入26个字母 然后应用保存</strong></p>
<h2 id="2-设置JSP默认编码"><a href="#2-设置JSP默认编码" class="headerlink" title="2.设置JSP默认编码"></a>2.设置JSP默认编码</h2><p><strong>上方工具栏Window-&gt;Preferences</strong></p>
<p><strong>右上角搜索JSP</strong></p>
<p><strong>然后点击Web目录下的JSP Files选项</strong> </p>
<p><strong>右侧的Encoding中即可设置默认编码</strong></p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo目录分析</title>
    <url>/2020/04/25/hexo%E7%9B%AE%E5%BD%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<ol>
<li><p>.deploy_git:　这个目录是执行 hexo d 命令 后生成的,主要存放部署的信息.</p>
</li>
<li><p>node_modules:　这个目录存放的是一些插件包</p>
</li>
<li><p>public :　这个目录是执行 hexo g后生成的, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下</p>
<a id="more"></a>
</li>
<li><p>scaffolds:　用来存放模板文件。模板文件的正文部分一般为空，一般在模板文件顶部有一个区域 ( 以 — 分隔的区域) 称作Front-matter,在这里配置的变量主要有title(即文章标题), date(即文章创建日期),comment(是否开启评论), tags(文章标签), categories(文章所属分类)等. 当你新建文章时，Hexo 会根据 scaffold 来建立文件，也就是说会在你创建的每个文件顶部自动加上模板文件中配置的这些内容.</p>
</li>
<li><p>source:　存放你的文章(.md后缀的文件)</p>
</li>
<li><p>themes:　这个目录是存放主题的(默认主题是landscape, 目前使用最多的是next主题)</p>
</li>
<li><p>.gitignore:　这个文件和git有关, 在这个文件里面可以配置哪些文件不被提交(例如: 配置 *.log ,那么在hexo d命令的时候, 任何以.log为后缀的文件将不会被提交到github)</p>
</li>
<li><p>_admin-config.yml:　这个文件是安装了hexo 后台管理插件后生成的,这里暂时不作介绍,后面再说</p>
</li>
<li><p>_config.yml:　这个文件是hexo的核心配置文件(也称站点配置文件)</p>
</li>
<li><p>_config.yml.back.yml:　这个文件是我自己创建的,是站点配置文件的备份. 以防哪一天老眼昏花把内容改错了,到时可以恢复.</p>
</li>
<li><p>package.json:　应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p>
</li>
<li><p>db.json：db.json是由<code>source/**/*.md</code>的所有文件解析得到的</p>
</li>
<li><p>package-lock.json: package-lock.json是当 node_modules 或 package.json 发生变化时自动生成的文件。<br>这个文件主要功能是确定当前安装的包的依赖，以便后续重新安装的时候生成相同的依赖，而忽略项目开发过程中有些依赖已经发生的更新。<br>使用npm 命令执行后产生的package-lock.json文件：其中显示当前各npm包锁定的版本。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6笔记</title>
    <url>/2020/07/04/ES6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="hello-es6"><a href="#hello-es6" class="headerlink" title="hello-es6"></a>hello-es6</h1><p>ES6 各种新语法 入门了解  石川blue讲解</p>
<p>视频地址</p>
<ul>
<li><a href="https://www.bilibili.com/video/av20327829/" target="_blank" rel="noopener">b站：深入解读ES6系列</a></li>
</ul>
<!-- 这里开始被注释了

看视频整理要点笔记:

----

- [hello-es6](#hello-es6)
    - [1.ES6怎么来的](#1es6%E6%80%8E%E4%B9%88%E6%9D%A5%E7%9A%84)
    - [2.ES6兼容性](#2es6%E5%85%BC%E5%AE%B9%E6%80%A7)
    - [3.变量 let 和 常量 const](#3%E5%8F%98%E9%87%8F-let-%E5%92%8C-%E5%B8%B8%E9%87%8F-const)
    - [4.函数-箭头函数](#4%E5%87%BD%E6%95%B0-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0)
    - [5.函数-参数](#5%E5%87%BD%E6%95%B0-%E5%8F%82%E6%95%B0)
    - [6.解构赋值](#6%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC)
    - [7.数组](#7%E6%95%B0%E7%BB%84)
    - [8.字符串](#8%E5%AD%97%E7%AC%A6%E4%B8%B2)
    - [9.面向对象-基础](#9%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%9F%BA%E7%A1%80)
    - [10.面向对象应用](#10%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BA%94%E7%94%A8)
    - [11.json](#11json)
    - [12.Promise](#12promise)
    - [13.generator-认识生成器函数](#13generator-%E8%AE%A4%E8%AF%86%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0)
    - [14.generator-yield是啥](#14generator-yield%E6%98%AF%E5%95%A5)
    - [15.generator-实例](#15generator-%E5%AE%9E%E4%BE%8B)
    - [16.ES7 预览](#16es7-%E9%A2%84%E8%A7%88)

----
注释结束-->

<h2 id="1-ES6怎么来的"><a href="#1-ES6怎么来的" class="headerlink" title="1.ES6怎么来的"></a>1.ES6怎么来的</h2><ul>
<li><p>ECMAScript 和 JavaScript</p>
<ul>
<li>ECMA 是标准，JS 是实现</li>
<li>ECMAScript 简称 ECMA 或 ES</li>
<li><a id="more"></a>
</li>
</ul>
</li>
<li><p>历史版本</p>
<ul>
<li>1996, ES1.0 Netscape 将 JS 提交给 ECMA 组织，ES 正式出现</li>
<li>1999, ES3.0 被广泛支持</li>
<li>2011, ES5.1 成为 ISO 国际标准</li>
<li>2015, ES6.0 正式发布</li>
</ul>
</li>
</ul>
<h2 id="2-ES6兼容性"><a href="#2-ES6兼容性" class="headerlink" title="2.ES6兼容性"></a>2.ES6兼容性</h2><ul>
<li><p>ES6(ES2015) 支持的环境 IE10+, Chrome, FireFox, 移动端, NodeJS</p>
</li>
<li><p>解决不兼容办法，编译、转换</p>
<ul>
<li>在线转换</li>
<li>或者提前编译</li>
</ul>
</li>
<li><p><a href="https://www.babeljs.cn" target="_blank" rel="noopener">Babel 中文网</a></p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html" target="_blank" rel="noopener">Babel 入门教程 阮一峰</a></li>
<li>Babel 是一个 JavaScript 编译器</li>
<li>一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行</li>
<li>现在就用 ES6 编写程序，而不用担心现有环境是否支持</li>
</ul>
</li>
</ul>
<h2 id="3-变量-let-和-常量-const"><a href="#3-变量-let-和-常量-const" class="headerlink" title="3.变量 let 和 常量 const"></a>3.变量 let 和 常量 const</h2><ul>
<li><p>var 的问题</p>
<ul>
<li>可以重复声明，没有报错和警告</li>
<li>无法限制修改</li>
<li>没有块级作用域， <code>{ }</code></li>
</ul>
</li>
<li><p>let 和 const</p>
<ul>
<li>不能重复声明</li>
<li>都是块级作用域, <code>{ }</code> 块内声明的，块外无效</li>
<li>let 是变量，可以修改</li>
<li>const 是常量，不能修改</li>
</ul>
</li>
<li><p>块级作用域举例</p>
<ul>
<li>原来用 var 的方式，结果弹出的都是 3</li>
<li>或者将变量 封装到函数里，限制作用域，但比较麻烦</li>
<li>用 let 最简单，直接 var 改 let，解决作用域问题</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            /*</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; aBtn.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                aBtn[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">                    alert(i)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;*/</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aBtn.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                aBtn[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">                    alert(i)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            /*</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aBtn.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 封装到函数里，限制作用域</span></span></span><br><span class="line"><span class="actionscript">                (<span class="function"><span class="keyword">function</span> <span class="params">(i)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    aBtn[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">                        alert(i)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)(i)</span><br><span class="line">            &#125;*/</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-函数-箭头函数"><a href="#4-函数-箭头函数" class="headerlink" title="4.函数-箭头函数"></a>4.函数-箭头函数</h2><ul>
<li>箭头函数，就是函数的简写<ul>
<li>如果只有一个参数，<code>()</code> 可以省</li>
<li>如果只有一个<code>return</code>，<code>{}</code>可以省</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数，去掉 function， 加上 =&gt;</span></span><br><span class="line">() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> show1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show1() <span class="comment">// 调用函数</span></span><br><span class="line">show2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show4 = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show5 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>  <span class="comment">//简洁，类似python lambda 函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(show4(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">console</span>.log(show5(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<h2 id="5-函数-参数"><a href="#5-函数-参数" class="headerlink" title="5.函数-参数"></a>5.函数-参数</h2><ul>
<li>参数扩展／展开 <code>...args</code><ul>
<li>收集剩余的参数，必须当到最后一个参数位置</li>
<li>展开数组，简写，效果和直接把数组的内容写在这儿一样</li>
</ul>
</li>
<li>默认参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a, b, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(show(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2]</span><br><span class="line"><span class="built_in">console</span>.log(arr3)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show2</span>(<span class="params">a, b=<span class="number">5</span>, c=<span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line">show2(<span class="number">88</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure>

<h2 id="6-解构赋值"><a href="#6-解构赋值" class="headerlink" title="6.解构赋值"></a>6.解构赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;x, y, z&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x, y, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [json, arr, num, str] = [&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">8</span>, <span class="string">'str'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(json, arr, num, str)</span><br></pre></td></tr></table></figure>

<ul>
<li>解构赋值<ul>
<li>左右两个边结构必须一样</li>
<li>右边必须是个东西</li>
<li>声明和赋值赋值不能分开，必须在一句话里</li>
</ul>
</li>
</ul>
<h2 id="7-数组"><a href="#7-数组" class="headerlink" title="7.数组"></a>7.数组</h2><ul>
<li>新增4个方法</li>
<li>map 映射  一个对一个</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> result2 = arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>) <span class="comment">// 简写</span></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="built_in">console</span>.log(result2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> score = [<span class="number">18</span>, <span class="number">86</span>, <span class="number">88</span>, <span class="number">24</span>]</span><br><span class="line"><span class="keyword">let</span> result3 = score.map(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">60</span> ? <span class="string">'及格'</span> : <span class="string">'不及格'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">[ <span class="number">24</span>, <span class="number">10</span>, <span class="number">16</span> ]</span><br><span class="line">[ <span class="number">24</span>, <span class="number">10</span>, <span class="number">16</span> ]</span><br><span class="line">[ <span class="string">'不及格'</span>, <span class="string">'及格'</span>, <span class="string">'及格'</span>, <span class="string">'不及格'</span> ]</span><br></pre></td></tr></table></figure>

<ul>
<li>reduce 汇总  一堆出来一个<ul>
<li>用于比如，算个总数，算个平均</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">tmp, item, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//tmp 上次结果，item当前数，index次数1开始</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp, item, index)</span><br><span class="line">    <span class="keyword">return</span> tmp + item</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">tmp, item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index != arr.length - <span class="number">1</span>) &#123; <span class="comment">// 不是最后一次</span></span><br><span class="line">        <span class="keyword">return</span> tmp + item</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (tmp + item)/arr.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)  <span class="comment">// 平均值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>filter 过滤器 保留为true的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> (item % <span class="number">3</span> === <span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">3</span> === <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'苹果'</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'西瓜'</span>, <span class="attr">price</span>: <span class="number">20</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="params">json</span> =&gt;</span> json.price &gt;= <span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>

<ul>
<li>forEach 循环迭代</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item))</span><br><span class="line"><span class="keyword">var</span> result = arr.forEach(<span class="function">(<span class="params">item, index</span>)=&gt;</span><span class="built_in">console</span>.log(item, index))</span><br></pre></td></tr></table></figure>

<h2 id="8-字符串"><a href="#8-字符串" class="headerlink" title="8.字符串"></a>8.字符串</h2><ul>
<li>多了两个新方法<ul>
<li><code>startsWith</code></li>
<li><code>endsWith</code></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'http://qq.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(url.startsWith(<span class="string">'http'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(url.endsWith(<span class="string">'com'</span>))</span><br><span class="line"><span class="comment">// 都是 true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串模版<ul>
<li>使用反引号，<code>${变量}</code></li>
<li>可以折行</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">`asdf<span class="subst">$&#123;a&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(str1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> title = <span class="string">'标题'</span></span><br><span class="line"><span class="keyword">let</span> content = <span class="string">'内容'</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;<span class="subst">$&#123;title&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;<span class="subst">$&#123;content&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;标题&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;内容&lt;/</span>p&gt;</span><br></pre></td></tr></table></figure>

<h2 id="9-面向对象-基础"><a href="#9-面向对象-基础" class="headerlink" title="9.面向对象-基础"></a>9.面向对象-基础</h2><ul>
<li>原来写法<ul>
<li>类和构造函数一样</li>
<li>属性和方法分开写的</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 老版本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, pass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.pass = pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.prototype.showName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.showPass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u1 = <span class="keyword">new</span> User(<span class="string">'able'</span>, <span class="string">'1233'</span>)</span><br><span class="line">u1.showName()</span><br><span class="line">u1.showPass()</span><br><span class="line"><span class="comment">// 老版本继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VipUser</span>(<span class="params">name, pass, level</span>) </span>&#123;</span><br><span class="line">    User.call(<span class="keyword">this</span>, name, pass)</span><br><span class="line">    <span class="keyword">this</span>.level = level</span><br><span class="line">&#125;</span><br><span class="line">VipUser.prototype = <span class="keyword">new</span> User()</span><br><span class="line">VipUser.prototype.constructor = VipUser</span><br><span class="line">VipUser.prototype.showLevel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v1 = <span class="keyword">new</span> VipUser(<span class="string">'blue'</span>, <span class="string">'1234'</span>, <span class="number">3</span>)</span><br><span class="line">v1.showName()</span><br><span class="line">v1.showLevel()</span><br></pre></td></tr></table></figure>

<ul>
<li>新版面向对象<ul>
<li>有了 class 关键字、构造器</li>
<li>class 里面直接加方法</li>
<li>继承，super 超类==父类</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, pass) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.pass = pass</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    showName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    showPass() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.pass)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u1 = <span class="keyword">new</span> User(<span class="string">'able2'</span>, <span class="string">'111'</span>)</span><br><span class="line">u1.showName()</span><br><span class="line">u1.showPass()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新版本继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, pass, level) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name, pass)</span><br><span class="line">        <span class="keyword">this</span>.level = level</span><br><span class="line">    &#125;</span><br><span class="line">    showLevel()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.level)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v1 = <span class="keyword">new</span> VipUser(<span class="string">'blue'</span>, <span class="string">'123'</span>, <span class="number">3</span>)</span><br><span class="line">v1.showLevel()</span><br></pre></td></tr></table></figure>

<h2 id="10-面向对象应用"><a href="#10-面向对象应用" class="headerlink" title="10.面向对象应用"></a>10.面向对象应用</h2><ul>
<li><a href="https://www.reactjscn.com" target="_blank" rel="noopener">React</a><ul>
<li>用于构建用户界面的 JavaScript 库</li>
<li>组件化，一个组件就是一个 class</li>
<li>JSX == bable == browser.js</li>
</ul>
</li>
</ul>
<h2 id="11-json"><a href="#11-json" class="headerlink" title="11.json"></a>11.json</h2><ul>
<li><p>JSON 格式</p>
<ul>
<li>JavaScript Object Notation 的缩写，是一种用于数据交换的文本格式</li>
<li>JSON 是 JS对象 的严格子集</li>
<li>JSON 的标准写法</li>
<li>只能用双引号</li>
<li>所有的key都必须用双引号包起来</li>
</ul>
</li>
<li><p>JSON 对象</p>
<ul>
<li>JSON 对象是 JavaScript 的原生对象，用来处理 JSON 格式数据，有两个静态方法</li>
<li>JSON.parse(string) ：接受一个 <strong>JSON 字符串</strong>并将其转换成一个 JavaScript <strong>对象</strong>。</li>
<li>JSON.stringify(obj) ：接受一个 JavaScript <strong>对象</strong>并将其转换为一个 <strong>JSON 字符串</strong>。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;<span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hi,'</span> + <span class="built_in">JSON</span>.stringify(json)</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.xx.com/'</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(json))</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="built_in">console</span>.log(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&#123;"a": 12, "b": 4, "c": "abc"&#125;'</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(str)</span><br><span class="line"><span class="built_in">console</span>.log(json)</span><br><span class="line">hi,&#123;<span class="string">"a"</span>:<span class="number">12</span>,<span class="string">"b"</span>:<span class="number">5</span>&#125;</span><br><span class="line">http:<span class="comment">//www.xx.com/%7B%22a%22%3A12%2C%22b%22%3A5%7D</span></span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="string">'abc'</span> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对象（object）</p>
<ul>
<li>是 JavaScript 语言的核心概念，也是最重要的数据类型</li>
<li>对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合</li>
<li>对象的所有键名都是字符串, 所以加不加引号都可以</li>
<li>如果键名是数值，会被自动转为字符串</li>
<li>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型</li>
<li>如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用</li>
<li>in 运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值</li>
<li>for…in循环用来遍历一个对象的全部属性</li>
</ul>
</li>
<li><p>对象 简写</p>
<ul>
<li>key-value 一样时可以简写</li>
<li>里面函数可以简写, 去掉</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>, b = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">a</span>:a, <span class="attr">b</span>:b&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(&#123;a, b&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(&#123;a, b, <span class="attr">c</span>:<span class="string">"c"</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(&#123; a, b, show()&#123; <span class="built_in">console</span>.log(<span class="string">'a'</span>) &#125;&#125;)</span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;</span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;</span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="string">'c'</span> &#125;</span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">show</span>: [<span class="built_in">Function</span>: show] &#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-Promise"><a href="#12-Promise" class="headerlink" title="12.Promise"></a>12.Promise</h2><ul>
<li><p>异步和同步</p>
<ul>
<li>异步，操作之间没有关系，同时执行多个操作， 代码复杂</li>
<li>同步，同时只能做一件事，代码简单</li>
</ul>
</li>
<li><p>Promise 对象</p>
<ul>
<li>用同步的方式来书写异步代码</li>
<li>Promise 让异步操作写起来，像在写同步操作的流程，不必一层层地嵌套回调函数</li>
<li>改善了可读性，对于多层嵌套的回调函数很方便</li>
<li>充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口</li>
</ul>
</li>
<li><p>Promise 也是一个构造函数</p>
<ul>
<li>接受一个回调函数f1作为参数，f1里面是异步操作的代码</li>
<li>返回的p1就是一个 Promise 实例</li>
<li>所有异步任务都返回一个 Promise 实例</li>
<li>Promise 实例有一个then方法，用来指定下一步的回调函数</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 异步代码...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(f1);</span><br><span class="line">p1.then(f2); <span class="comment">// f1的异步操作执行完成，就会执行f2。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Promise 使得异步流程可以写成同步流程</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line">step1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  step2(value1, <span class="function"><span class="keyword">function</span>(<span class="params">value2</span>) </span>&#123;</span><br><span class="line">    step3(value2, <span class="function"><span class="keyword">function</span>(<span class="params">value3</span>) </span>&#123;</span><br><span class="line">      step4(value3, <span class="function"><span class="keyword">function</span>(<span class="params">value4</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 的写法</span></span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Promise</span>(step1))</span><br><span class="line">  .then(step2)</span><br><span class="line">  .then(step3)</span><br><span class="line">  .then(step4);</span><br></pre></td></tr></table></figure>

<ul>
<li>Promise.all(promiseArray)方法<ul>
<li>将多个Promise对象实例包装，生成并返回一个新的Promise实例</li>
<li>promise数组中所有的promise实例都变为resolve的时候，该方法才会返回</li>
<li>并将所有结果传递results数组中</li>
<li>promise数组中任何一个promise为reject的话，则整个Promise.all调用会立即终止，并返回一个reject的新的promise对象</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>),</span><br><span class="line">    p2 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>),</span><br><span class="line">    p3 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);  <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>Promise.race([p1, p2, p3])<ul>
<li>Promse.race就是赛跑的意思</li>
<li>哪个结果获得的快，就返回那个结果</li>
<li>不管结果本身是成功状态还是失败状态</li>
</ul>
</li>
</ul>
<h2 id="13-generator-认识生成器函数"><a href="#13-generator-认识生成器函数" class="headerlink" title="13.generator-认识生成器函数"></a>13.generator-认识生成器函数</h2><ul>
<li>generator 生成器函数<ul>
<li>普通函数，一路到底</li>
<li>generator函数，中间可以停，到哪停呢，用 yield 配合，交出执行权</li>
<li>yield 有 放弃、退让、退位的意思</li>
<li>需要调用next()方法启动执行，需要遇到 yield 停, 踹一脚走一步</li>
<li>generator函数前面加一个 <code>*</code> 两边可以有空格，或靠近函数或<code>function</code></li>
<li>背后实际生成多个小函数，实现走走停停</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line">&#125;</span><br><span class="line">show() <span class="comment">// 普通函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> genObj = show2()</span><br><span class="line">genObj.next() <span class="comment">// 1</span></span><br><span class="line">genObj.next() <span class="comment">// 2</span></span><br><span class="line">genObj.next() <span class="comment">// 最后了，没有结果</span></span><br></pre></td></tr></table></figure>

<h2 id="14-generator-yield是啥"><a href="#14-generator-yield是啥" class="headerlink" title="14.generator-yield是啥"></a>14.generator-yield是啥</h2><ul>
<li><p><code>yield</code></p>
<ul>
<li>既可传参，又可以返回</li>
<li>第一个<code>next()</code>传参无效，只用来启动</li>
</ul>
</li>
<li><p>如果函数前漏掉 <code>*</code></p>
<ul>
<li>就是普通函数</li>
<li>如果有<code>yield</code>会报错， <code>ReferenceError: yield is not defined</code></li>
<li>yield 只能在Generator函数内部使用</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// yield 传参</span></span><br><span class="line"><span class="keyword">var</span> gen = show()</span><br><span class="line">gen.next() <span class="comment">// 1</span></span><br><span class="line">gen.next() <span class="comment">// 2 和 undefined 因为没有传参，yield没有返回值</span></span><br><span class="line"><span class="keyword">var</span> gen = show()</span><br><span class="line">gen.next(<span class="number">10</span>) <span class="comment">// 1 第一次执行到yield，但没有执行赋值</span></span><br><span class="line">gen.next(<span class="number">20</span>) <span class="comment">// 2 和 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">show2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">10</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// yield 返回</span></span><br><span class="line"><span class="keyword">var</span> gen = show2()</span><br><span class="line"><span class="keyword">var</span> res1 = gen.next()</span><br><span class="line"><span class="built_in">console</span>.log(res1) <span class="comment">// &#123; value: 10, done: false &#125;</span></span><br><span class="line"><span class="keyword">var</span> res2 = gen.next()</span><br><span class="line"><span class="built_in">console</span>.log(res2)</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125; 最后的value需要return返回</span></span><br></pre></td></tr></table></figure>

<h2 id="15-generator-实例"><a href="#15-generator-实例" class="headerlink" title="15.generator-实例"></a>15.generator-实例</h2><ul>
<li>Promise 适合一次读一组</li>
<li>generator 适合逻辑性的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带逻辑-generator</span></span><br><span class="line">runner(<span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userData = <span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>: <span class="string">'getUserData'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userData.type == <span class="string">'VIP'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> items = <span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>: <span class="string">'getVIPItems'</span>&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> items = <span class="keyword">yield</span> $.ajax(&#123;<span class="attr">url</span>: <span class="string">'getItems'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// yield 实例，用同步方式写异步</span></span><br><span class="line">server.use(<span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">yield</span> db.query(<span class="string">`select * from user_table`</span>)</span><br><span class="line">    <span class="keyword">this</span>.body = data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="16-ES7-预览"><a href="#16-ES7-预览" class="headerlink" title="16.ES7 预览"></a>16.ES7 预览</h2><ul>
<li>数组<ul>
<li><code>arr.includes()</code> 数组是否包含某个东西</li>
<li>数组的 arr.keys(), arr,entries()</li>
<li>for … in 遍历数组 下标 key</li>
<li>for … of 遍历数组 值 value, 不能用于json</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">// 循环的时下标 key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">// 循环的是值 value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'&gt;'</span>+i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'&gt;'</span> + key + value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = &#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">7</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> json) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串<ul>
<li>padStart()/padEnd() 指定宽度，不够就补空格或指定字符</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'='</span> + <span class="string">'abcd'</span>.padStart(<span class="number">6</span>, <span class="string">'0'</span>) + <span class="string">'='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'='</span> + <span class="string">'abcd'</span>.padEnd(<span class="number">6</span>, <span class="string">'0'</span>) + <span class="string">'='</span>)</span><br><span class="line">=<span class="number">00</span>abcd=</span><br><span class="line">=abcd00=</span><br></pre></td></tr></table></figure>

<ul>
<li><p>容忍度</p>
<ul>
<li>[1, 2, 3,] 老版数组最后不能有逗号，新的可以有</li>
<li>函数参数最后多的逗号也可以</li>
</ul>
</li>
<li><p>async await</p>
<ul>
<li>和 generator yield 类似</li>
<li>generator 不可以写成箭头函数， async 可以</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>node学习笔记</title>
    <url>/2021/02/23/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-文件读写"><a href="#1-文件读写" class="headerlink" title="1.文件读写"></a>1.文件读写</h2><h3 id="1-1文件读取"><a href="#1-1文件读取" class="headerlink" title="1.1文件读取"></a>1.1文件读取</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载文件读写模块</span></span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">//文件不存在时报错</span></span><br><span class="line">fs.readFile(<span class="string">'hello1.txt'</span>, &#123;<span class="attr">encoding</span>:<span class="string">"utf-8"</span>,<span class="attr">flag</span>:<span class="string">"r"</span>&#125;,(err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"这是hello1.txt的文件内容:"</span>+data);  <span class="comment">//没有设置编码返回 buffer</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="1-2文件写入"><a href="#1-2文件写入" class="headerlink" title="1.2文件写入"></a>1.2文件写入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="comment">//异步写入</span></span><br><span class="line"><span class="comment">// a=append 追加写入  没有文件时自动创建  w=write 会覆盖掉原来内容</span></span><br><span class="line"><span class="comment">//文件不存在时会创建</span></span><br><span class="line">fs.writeFile(<span class="string">"write.txt"</span>,<span class="string">"今天吃饭了吗\n"</span>,&#123;<span class="attr">flag</span>:<span class="string">"w"</span>&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"写入成功！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="1-3文件删除"><a href="#1-3文件删除" class="headerlink" title="1.3文件删除"></a>1.3文件删除</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.unlink</span></span><br><span class="line"><span class="comment">//注意！！！删除文件后无法在回收站找回</span></span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="comment">//先自动创建3秒后删除</span></span><br><span class="line">fs.writeFile(<span class="string">"delete.txt"</span>,<span class="string">"测试删除\n"</span>,&#123;<span class="attr">flag</span>:<span class="string">"w"</span>&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"写入成功！"</span>)</span><br><span class="line">        <span class="comment">//删除文件 三秒后删除</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            fs.unlink(<span class="string">'delete.txt'</span>, (err) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'已成功地删除文件 delete.txt'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,<span class="number">3000</span>)     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2-Buffer"><a href="#2-Buffer" class="headerlink" title="2.Buffer"></a>2.Buffer</h2><blockquote>
<p>目前阶段基本不会用到</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 数据不能进行二进制操作</span></span><br><span class="line"><span class="comment">// 2 js数组不像其他语言 java Python 效率高</span></span><br><span class="line"><span class="comment">// 3 buffer内存空间开辟出固定大小的内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Buffer.from(array)</span></span><br><span class="line"><span class="comment">// 使用 0 – 255 范围内的字节数组 array 来分配一个新的 Buffer。 超出该范围的数组条目会被截断以适合它。</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"hello world"</span></span><br><span class="line"><span class="keyword">let</span> buf=Buffer.from(str)</span><br><span class="line"><span class="comment">//打印出buffer中的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString())</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟一个空的buffer(缓冲区)</span></span><br><span class="line"><span class="comment">// Buffer.alloc(size[, fill[, encoding]])</span></span><br><span class="line"><span class="comment">// size &lt;integer&gt; 新 Buffer 的期望长度。</span></span><br><span class="line"><span class="comment">// fill &lt;string&gt; | &lt;Buffer&gt; | &lt;Uint8Array&gt; | &lt;integer&gt; 用于预填充新 Buffer 的值。默认值: 0。</span></span><br><span class="line"><span class="comment">// encoding &lt;string&gt; 如果 fill 是一个字符串，则这是它的字符编码。默认值: 'utf8'。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟10字节的空间  连续空间</span></span><br><span class="line"><span class="keyword">let</span> buf2=Buffer.alloc(<span class="number">10</span>)</span><br><span class="line">buf2[<span class="number">0</span>]=<span class="number">255</span>   <span class="comment">//设置第一个字节的内容 最大255</span></span><br><span class="line"><span class="built_in">console</span>.log(buf2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//不安全的开辟  但是效率大于 上面的普通开辟方法</span></span><br><span class="line"><span class="comment">//不安全是因为它直接覆盖已有数据(可能会提取关键数据) 而上面的普通方法会全部清除</span></span><br><span class="line"><span class="keyword">let</span> buf3=Buffer.allocUnsafe(<span class="number">10</span>)</span><br><span class="line">buf2[<span class="number">0</span>]=<span class="number">255</span>   <span class="comment">//设置第一个字节的内容 最大255</span></span><br><span class="line"><span class="built_in">console</span>.log(buf3)</span><br><span class="line"></span><br><span class="line"><span class="comment">//buffer在学习过程中不会用到 js写神经网络会用到</span></span><br></pre></td></tr></table></figure>

<h2 id="3-文件夹操作"><a href="#3-文件夹操作" class="headerlink" title="3.文件夹操作"></a>3.文件夹操作</h2><h3 id="封装模块"><a href="#封装模块" class="headerlink" title="封装模块"></a>封装模块</h3><p><strong>myModule.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我的模块</span></span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件内容函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fsRead</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!fs.existsSync(path))&#123;   <span class="comment">//判断是否存在指定文件</span></span><br><span class="line">            fs.writeFileSync(path,<span class="string">""</span>)  <span class="comment">//写一个空文件</span></span><br><span class="line">        &#125;</span><br><span class="line">        fs.readFile(path, &#123;<span class="attr">encoding</span>:<span class="string">"utf-8"</span>,<span class="attr">flag</span>:<span class="string">"r"</span>&#125;,(err, data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件写入函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fsWrite</span>(<span class="params">path,content</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//此处注意 回调函数只有一个参数</span></span><br><span class="line">        fs.writeFile(path,content,&#123;<span class="attr">flag</span>:<span class="string">"a"</span>&#125;,err=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(err)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"写入成功！"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    fsRead,</span><br><span class="line">    fsWrite</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-1读取文件夹内容"><a href="#3-1读取文件夹内容" class="headerlink" title="3.1读取文件夹内容"></a>3.1读取文件夹内容</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.readdir(path[, options], callback)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入外部模块</span></span><br><span class="line"><span class="keyword">let</span> &#123;fsRead,fsWrite&#125;=<span class="built_in">require</span>(<span class="string">"./myModule"</span>) </span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装读取文件夹方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fsReadDir</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.readdir(path,(err,file)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;             </span><br><span class="line">                resolve(file)               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件夹中所有内容并写到一个新文件中</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myF</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> files=<span class="keyword">await</span> fsReadDir(<span class="string">"../node1"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(files)  <span class="comment">//打印文件夹内容数组</span></span><br><span class="line">    files.forEach(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> content=<span class="keyword">await</span> fsRead(<span class="string">"../node1/"</span>+item)</span><br><span class="line">        <span class="keyword">await</span> fsWrite(<span class="string">"allText.txt"</span>,content)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">myF()</span><br></pre></td></tr></table></figure>

<h3 id="3-2删除一个文件夹"><a href="#3-2删除一个文件夹" class="headerlink" title="3.2删除一个文件夹"></a>3.2删除一个文件夹</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.rmdir(path[, options], callback)</span></span><br><span class="line"><span class="comment">//删除文件夹    注意！！！回收站没有！</span></span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="comment">//判断文件夹是否存在</span></span><br><span class="line"><span class="keyword">if</span>(fs.existsSync(<span class="string">"./test"</span>))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"test文件夹已经存在！"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"test文件夹不存在！"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"正在创建test文件夹！"</span>)</span><br><span class="line">    fs.mkdirSync(<span class="string">"./test"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"创建成功!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3S后删除test文件夹"</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    fs.rmdir(<span class="string">"./test"</span>,err=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"删除错误！"</span>+err)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"删除成功！"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-Node控制台输入输出"><a href="#4-Node控制台输入输出" class="headerlink" title="4.Node控制台输入输出"></a>4.Node控制台输入输出</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在终端输入内容</span></span><br><span class="line"><span class="comment">//导入readline 模块</span></span><br><span class="line"><span class="keyword">let</span> readline = <span class="built_in">require</span>(<span class="string">"readline"</span>)</span><br><span class="line"><span class="comment">//导入自定义模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; fsWrite, fsRead &#125; = <span class="built_in">require</span>(<span class="string">"./myModule"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口</span></span><br><span class="line"><span class="keyword">const</span> rl1 = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setQuestions</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//设置自定义问题</span></span><br><span class="line">        rl1.question(question, answer =&gt; &#123;</span><br><span class="line">            resolve(answer)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断数据是否为json</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isJsonString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">JSON</span>.parse(str) == <span class="string">"object"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="keyword">await</span> setQuestions(<span class="string">"你的名字是？"</span>)</span><br><span class="line">    <span class="keyword">let</span> age = <span class="keyword">await</span> setQuestions(<span class="string">"你的年龄是？"</span>)</span><br><span class="line">    <span class="keyword">let</span> sex = <span class="keyword">await</span> setQuestions(<span class="string">"你的性别是？"</span>)</span><br><span class="line">    <span class="comment">//存放得到的数据</span></span><br><span class="line">    <span class="keyword">let</span> cont = &#123;name,age,sex&#125;</span><br><span class="line">    <span class="keyword">let</span> info = <span class="keyword">await</span> fsRead(<span class="string">"./info.json"</span>)</span><br><span class="line">    <span class="comment">//判断是否为json 空文件不为json</span></span><br><span class="line">    <span class="keyword">if</span> (isJsonString(info)) &#123;</span><br><span class="line">        info=<span class="built_in">JSON</span>.parse(info)</span><br><span class="line">        cont=[...info,cont]</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(info===<span class="string">""</span>)&#123;</span><br><span class="line">        <span class="comment">//把存放的数据放到数组里</span></span><br><span class="line">        cont=[cont]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"已存在的内容：\n"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(info)</span><br><span class="line">    <span class="comment">//序列化对象</span></span><br><span class="line">    content = <span class="built_in">JSON</span>.stringify(cont)</span><br><span class="line">    <span class="comment">//写入json文件</span></span><br><span class="line">    <span class="keyword">await</span> fsWrite(<span class="string">"./info.json"</span>, content)</span><br><span class="line">    <span class="comment">//关闭终端</span></span><br><span class="line">    rl1.close()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行函数</span></span><br><span class="line">myF()</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以监听close()事件</span></span><br><span class="line">rl1.on(<span class="string">"close"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"程序结束！"</span>)</span><br><span class="line">    <span class="comment">//结束程序</span></span><br><span class="line">    process.exit(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5-Stream流的简单操作"><a href="#5-Stream流的简单操作" class="headerlink" title="5.Stream流的简单操作"></a>5.Stream流的简单操作</h2><h3 id="5-1读取写入流"><a href="#5-1读取写入流" class="headerlink" title="5.1读取写入流"></a>5.1读取写入流</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件输入输出流</span></span><br><span class="line"><span class="comment">//适用于较大的文件操作</span></span><br><span class="line"><span class="comment">// fs.createReadStream(path[, options])</span></span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="comment">//绝对路径注意转义符\的使用</span></span><br><span class="line"><span class="keyword">const</span> rs=fs.createReadStream(<span class="string">"E:\\QQ音乐\\MV\\BLACKPINK - PLAYING WITH FIRE.avi.mp4"</span>)</span><br><span class="line"><span class="comment">//创建写入流 不存在时自动生成</span></span><br><span class="line"><span class="keyword">const</span> ws=fs.createWriteStream(<span class="string">"./b.mp4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听读取流读取的每部分数据</span></span><br><span class="line">rs.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(chunk)</span><br><span class="line">    <span class="comment">//把读取的数据写入指定文件中</span></span><br><span class="line">    ws.write(chunk,()=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"一批数据写入完成！"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取流监听函数</span></span><br><span class="line">rs.on(<span class="string">"open"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件读取流开启"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">rs.on(<span class="string">"ready"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件读取流准备"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">rs.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件读取流读取完毕"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">rs.on(<span class="string">"close"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件读取流关闭"</span>)</span><br><span class="line">    <span class="comment">//写入流结束</span></span><br><span class="line">    ws.end()  <span class="comment">//触发写入流的finish监听事件</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入流监听</span></span><br><span class="line">ws.on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'写入已完成'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">ws.on(<span class="string">"close"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件写入流关闭"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5-2使用pipe管道流简化上面的代码"><a href="#5-2使用pipe管道流简化上面的代码" class="headerlink" title="5.2使用pipe管道流简化上面的代码"></a>5.2使用pipe管道流简化上面的代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用管道流 简化流程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="comment">//绝对路径注意转义符\的使用</span></span><br><span class="line"><span class="keyword">const</span> rs=fs.createReadStream(<span class="string">"E:\\QQ音乐\\MV\\BLACKPINK - PLAYING WITH FIRE.avi.mp4"</span>)</span><br><span class="line"><span class="comment">//创建写入流</span></span><br><span class="line"><span class="keyword">const</span> ws=fs.createWriteStream(<span class="string">"./c.mp4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取流的管道加入 写入流</span></span><br><span class="line">rs.pipe(ws)   <span class="comment">//一行代码即可完成读取写入    注意调用位置！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取流监听函数</span></span><br><span class="line">rs.on(<span class="string">"close"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件读取流关闭"</span>)</span><br><span class="line">     <span class="comment">//写入流结束</span></span><br><span class="line">    ws.end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入流监听</span></span><br><span class="line">ws.on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'写入已完成'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">ws.on(<span class="string">"close"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件写入流关闭"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="6-Node中的events"><a href="#6-Node中的events" class="headerlink" title="6.Node中的events"></a>6.Node中的events</h2><h3 id="6-1设计模式-事件订阅的简单原理实现"><a href="#6-1设计模式-事件订阅的简单原理实现" class="headerlink" title="6.1设计模式  事件订阅的简单原理实现"></a>6.1设计模式  事件订阅的简单原理实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js 设计模式 事件订阅的原理</span></span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">"../info.json"</span>,&#123;<span class="attr">encoding</span>:<span class="string">"utf-8"</span>&#125;,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1. 做第一件事</span></span><br><span class="line">    <span class="comment">// 2. 做第二件事</span></span><br><span class="line">    <span class="comment">// 3. 做第三件事</span></span><br><span class="line">    <span class="comment">//这里触发事件  类似于vue中的子向父传值</span></span><br><span class="line">    myEvent.emit(<span class="string">"fileSuccess"</span>,data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myEvent=&#123;</span><br><span class="line">    <span class="comment">//创建事件队列,存放监听的事件</span></span><br><span class="line">    eventList:&#123;</span><br><span class="line">        <span class="comment">//fileSuccess:[fn,fn,fn]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    on:<span class="function"><span class="keyword">function</span>(<span class="params">eventName,fn</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//如果事件队列中有这个事件名</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.eventList[eventName])&#123;</span><br><span class="line">            <span class="comment">//把回调函数加入事件队列</span></span><br><span class="line">            <span class="keyword">this</span>.eventList[eventName].push(fn)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果没有就创建一个新的事件名key 并加入传过来的回调函数</span></span><br><span class="line">            <span class="keyword">this</span>.eventList[eventName]=[fn]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//触发函数</span></span><br><span class="line">    emit:<span class="function"><span class="keyword">function</span>(<span class="params">eventName,eventMsg</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//存在这个事件名就进行循环调用里面的方法</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.eventList[eventName])&#123;</span><br><span class="line">            <span class="keyword">this</span>.eventList[eventName].forEach(<span class="function"><span class="params">itemFn</span> =&gt;</span> &#123;</span><br><span class="line">                itemFn(eventMsg)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//监听事件</span></span><br><span class="line">myEvent.on(<span class="string">"fileSuccess"</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"做第一件事"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">myEvent.on(<span class="string">"fileSuccess"</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"做第二件事"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">myEvent.on(<span class="string">"fileSuccess"</span>,(msg)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"做第三件事,并显示内容如下：\n"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//最终上面3个监听事件中的内容按顺序打印</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2使用Node的自身模块简化上面代码"><a href="#6-2使用Node的自身模块简化上面代码" class="headerlink" title="6.2使用Node的自身模块简化上面代码"></a>6.2使用Node的自身模块简化上面代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用node 的 event 设计自定义事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入事件模块</span></span><br><span class="line"><span class="keyword">let</span> Events=<span class="built_in">require</span>(<span class="string">"events"</span>)</span><br><span class="line"><span class="comment">//引入文件系统模块</span></span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件对象</span></span><br><span class="line"><span class="keyword">const</span> emitEvent=<span class="keyword">new</span> Events.EventEmitter()</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里监听事件</span></span><br><span class="line">emitEvent.on(<span class="string">"fileSuccess"</span>,data=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">"../info.json"</span>,&#123;<span class="attr">encoding</span>:<span class="string">"utf-8"</span>&#125;,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1. 做第一件事</span></span><br><span class="line">    <span class="comment">// 2. 做第二件事</span></span><br><span class="line">    <span class="comment">// 3. 做第三件事</span></span><br><span class="line">    <span class="comment">//这里触发事件</span></span><br><span class="line">    emitEvent.emit(<span class="string">"fileSuccess"</span>,data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="7-Node服务器"><a href="#7-Node服务器" class="headerlink" title="7.Node服务器"></a>7.Node服务器</h2><h3 id="7-1自己封装服务器代码"><a href="#7-1自己封装服务器代码" class="headerlink" title="7.1自己封装服务器代码"></a>7.1自己封装服务器代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态资源路径</span></span><br><span class="line"><span class="keyword">const</span> staticUrl = <span class="string">"./static/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自己封装服务器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">//实例化服务器对象</span></span><br><span class="line">        <span class="keyword">this</span>.server = http.createServer()</span><br><span class="line">        <span class="comment">//放请求路径对应的执行方法</span></span><br><span class="line">        <span class="keyword">this</span>.reqEvent = &#123;</span><br><span class="line">            <span class="comment">// "/":function()&#123;&#125;,</span></span><br><span class="line">            <span class="comment">// "/news":function()&#123;&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//监听请求事件</span></span><br><span class="line">        <span class="keyword">this</span>.server.on(<span class="string">"request"</span>, (req, res) =&gt; &#123;</span><br><span class="line">            <span class="comment">//解析路径</span></span><br><span class="line">            <span class="built_in">console</span>.log(req.url)</span><br><span class="line">            <span class="keyword">let</span> mPath = path.parse(req.url)</span><br><span class="line">            <span class="built_in">console</span>.log(mPath)</span><br><span class="line">            <span class="comment">//遍历对象</span></span><br><span class="line">            <span class="keyword">if</span> (req.url <span class="keyword">in</span> <span class="keyword">this</span>.reqEvent) &#123;           </span><br><span class="line">                res.render=<span class="keyword">this</span>.render</span><br><span class="line">                res.replaceArr=<span class="keyword">this</span>.replaceArr</span><br><span class="line">                res.replaceVar=<span class="keyword">this</span>.replaceVar</span><br><span class="line">                req.path=path</span><br><span class="line">                <span class="comment">//如果存在key就执行value(为方法)</span></span><br><span class="line">                <span class="comment">// fn() 调用函数</span></span><br><span class="line">                <span class="keyword">this</span>.reqEvent[req.url](req, res)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mPath.dir <span class="keyword">in</span> <span class="keyword">this</span>.reqEvent)&#123;</span><br><span class="line">                res.render=<span class="keyword">this</span>.render</span><br><span class="line">                res.replaceArr=<span class="keyword">this</span>.replaceArr</span><br><span class="line">                res.replaceVar=<span class="keyword">this</span>.replaceVar</span><br><span class="line">                req.path=path</span><br><span class="line">                <span class="keyword">this</span>.reqEvent[mPath.dir](req, res)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPath.dir == <span class="string">"/abc"</span>) &#123;   <span class="comment">//静态文件访问专用路径</span></span><br><span class="line">                <span class="comment">//设置请求头</span></span><br><span class="line">                res.setHeader(<span class="string">"content-type"</span>, <span class="keyword">this</span>.getContentType(mPath.ext))</span><br><span class="line">                <span class="comment">//访问静态目录的内容</span></span><br><span class="line">                <span class="keyword">if</span>(fs.existsSync(staticUrl+mPath.base))&#123;</span><br><span class="line">                    <span class="keyword">let</span> rs = fs.createReadStream(staticUrl + mPath.base)</span><br><span class="line">                    <span class="comment">//返回数据流</span></span><br><span class="line">                    rs.pipe(res)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line">                    res.end(<span class="string">"&lt;h1&gt;404 not found&lt;/h1&gt;"</span>)</span><br><span class="line">                &#125;          </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//没有匹配到的路由</span></span><br><span class="line">                <span class="comment">//设置响应头</span></span><br><span class="line">                res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line">                res.end(<span class="string">"&lt;h1&gt;404 not found&lt;/h1&gt;"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义on事件</span></span><br><span class="line">    on(url, fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.reqEvent[url] = fn</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义运行函数</span></span><br><span class="line">    run(port, callback) &#123;</span><br><span class="line">        <span class="keyword">this</span>.server.listen(port, callback)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据请求的内容设置响应类型</span></span><br><span class="line">    getContentType(ext) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (ext) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">".html"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"text/html;charset=utf-8"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">".jpg"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"image/jpeg"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">".png"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"image/png"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">".gif"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"image/gif"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">".js"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"text/javascript;charset=utf-8"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">".css"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"text/css"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">".json"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"text/json;charset=utf-8"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">".mp4"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"video/mp4"</span> </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"text/html;charset=utf-8"</span>   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义渲染函数</span></span><br><span class="line">    render(option,path) &#123;</span><br><span class="line">        <span class="comment">//读取需要请求的静态网页文件</span></span><br><span class="line">        fs.readFile(path,&#123;<span class="attr">encoding</span>:<span class="string">"utf-8"</span>,<span class="attr">flag</span>:<span class="string">"r"</span>&#125;,(error,data)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//替换循环项      </span></span><br><span class="line">                data=<span class="keyword">this</span>.replaceArr(data,option)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//进行普通变量替换</span></span><br><span class="line">                data=<span class="keyword">this</span>.replaceVar(data,option)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//替换完成返回数据</span></span><br><span class="line">                <span class="comment">//箭头函数this指向外面的作用域 this==res</span></span><br><span class="line">                <span class="keyword">this</span>.end(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//替换循环项 模板替换方法     </span></span><br><span class="line">    replaceArr(data,option)&#123;</span><br><span class="line">        <span class="keyword">let</span> reg=<span class="regexp">/\&#123;\%for\&#123;(.*?)\&#125;\%\&#125;(.*?)\&#123;\%endfor\%\&#125;/ig</span>s</span><br><span class="line">        <span class="keyword">let</span> result</span><br><span class="line">        <span class="keyword">while</span>(result=reg.exec(data))&#123;</span><br><span class="line">            <span class="comment">//console.log(result2[1])</span></span><br><span class="line">            <span class="keyword">let</span> arrKey=result[<span class="number">1</span>].trim()</span><br><span class="line">            <span class="comment">//获取被循环的内容</span></span><br><span class="line">            <span class="keyword">let</span> reg2=<span class="regexp">/\&#123;\%(.*)\%\&#125;/ig</span>s</span><br><span class="line">            <span class="comment">//获取类型数组</span></span><br><span class="line">            <span class="keyword">let</span> arrValue=option[arrKey]</span><br><span class="line">            <span class="keyword">let</span> item=result[<span class="number">2</span>]   <span class="comment">//&lt;li&gt;&#123;%item%&#125;&lt;/li&gt;</span></span><br><span class="line">            <span class="keyword">let</span> item2=item</span><br><span class="line">            <span class="comment">//console.log(item)</span></span><br><span class="line">            <span class="keyword">let</span> total=<span class="string">""</span>  <span class="comment">//把替换的内容合并</span></span><br><span class="line">            <span class="keyword">let</span> result2=reg2.exec(item)</span><br><span class="line">            <span class="comment">//result3[0]          //&#123;%item%&#125;</span></span><br><span class="line">            arrValue.forEach(<span class="function">(<span class="params">element,index</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//循环 type中的内容 进行替换 存放到临时变量中</span></span><br><span class="line">                total+=item2.replace(result2[<span class="number">0</span>],element)</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//type中的内容循环完成  整体替换</span></span><br><span class="line">            data=data.replace(result[<span class="number">0</span>],total)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//替换普通变量 模板替换方法</span></span><br><span class="line">    replaceVar(data,option)&#123;</span><br><span class="line">        <span class="keyword">let</span> reg=<span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/ig</span>s</span><br><span class="line">        <span class="keyword">let</span> result</span><br><span class="line">        <span class="keyword">while</span>(result=reg.exec(data))&#123;</span><br><span class="line">            <span class="comment">//result[0]==&#123;&#123;title&#125;&#125; result[1]==title</span></span><br><span class="line">            <span class="comment">//读取&#123;&#123;&#125;&#125;中的内容并去除两边的空白</span></span><br><span class="line">            <span class="keyword">let</span> strKey=result[<span class="number">1</span>].trim()</span><br><span class="line">            <span class="comment">//获取json中的value</span></span><br><span class="line">            <span class="keyword">let</span> strValue=option[strKey]</span><br><span class="line">            <span class="comment">//替换掉 &#123;&#123;&#125;&#125; 和里面包裹的内容</span></span><br><span class="line">            data=data.replace(result[<span class="number">0</span>],strValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抛出类</span></span><br><span class="line"><span class="built_in">module</span>.exports = myServer</span><br></pre></td></tr></table></figure>

<h3 id="7-2服务器入口文件"><a href="#7-2服务器入口文件" class="headerlink" title="7.2服务器入口文件"></a>7.2服务器入口文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myServer=<span class="built_in">require</span>(<span class="string">"./myServer"</span>) <span class="comment">//导入自己封装的代码</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">const</span> ms=<span class="keyword">new</span> myServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态资源路径</span></span><br><span class="line"><span class="keyword">const</span> staticUrl=<span class="string">"./static"</span></span><br><span class="line"></span><br><span class="line">ms.on(<span class="string">"/"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.setHeader(<span class="string">"content-type"</span>,<span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line">    res.end(<span class="string">"&lt;h1&gt;这是首页&lt;/h1&gt;"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ms.on(<span class="string">"/news"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.setHeader(<span class="string">"content-type"</span>,<span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line">    res.end(<span class="string">"&lt;h1&gt;这是新闻页面&lt;/h1&gt;"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//不在这写</span></span><br><span class="line"><span class="comment">// //测试读取静态页面</span></span><br><span class="line"><span class="comment">// ms.on("/abc/index.html",(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     //res.setHeader("content-type","text/html;charset=utf-8")</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">ms.on(<span class="string">"/movies"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.path.parse(req.url))</span><br><span class="line">    <span class="comment">//读取请求路径后的id</span></span><br><span class="line">    <span class="keyword">let</span> index=req.path.parse(req.url).base</span><br><span class="line">    <span class="comment">//读取Json数据</span></span><br><span class="line">    <span class="keyword">let</span> moviesJson=fs.readFileSync(<span class="string">"./static/movie.json"</span>)</span><br><span class="line">    <span class="comment">//转成js对象</span></span><br><span class="line">    moviesJson=<span class="built_in">JSON</span>.parse(moviesJson)</span><br><span class="line">    <span class="comment">//调用渲染函数</span></span><br><span class="line">    res.render(moviesJson[index],<span class="string">"./static/template.html"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ms.run(<span class="number">80</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"服务器启动成功！"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="7-3自定义模板代码"><a href="#7-3自定义模板代码" class="headerlink" title="7.3自定义模板代码"></a>7.3自定义模板代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>动态渲染数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用正则进行替换操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>电影名:&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>英文名:&#123;&#123;enName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>评分:&#123;&#123;score&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>类型:</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;%for&#123;type&#125;%&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;%item%&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;%endfor%&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>电影片长:&#123;&#123;movieLength&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>上映时间:&#123;&#123;timeAndAdress&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>剧情简介:&#123;&#123;synopsis&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;bigImg_Url&#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">"大图"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-4目录截图"><a href="#7-4目录截图" class="headerlink" title="7.4目录截图"></a>7.4目录截图</h3><div align=left><img  src="https://img.imgdb.cn/item/601e99fa3ffa7d37b389e323.jpg"/></div>



<h2 id="8-自己上传npm包"><a href="#8-自己上传npm包" class="headerlink" title="8.自己上传npm包"></a>8.自己上传npm包</h2><h3 id="8-1自己封装的代码"><a href="#8-1自己封装的代码" class="headerlink" title="8.1自己封装的代码"></a>8.1自己封装的代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我的模块</span></span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件内容函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fsRead</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!fs.existsSync(path))&#123;   <span class="comment">//判断是否存在指定文件</span></span><br><span class="line">            fs.writeFileSync(path,<span class="string">""</span>)  <span class="comment">//写一个空文件</span></span><br><span class="line">        &#125;</span><br><span class="line">        fs.readFile(path, &#123;<span class="attr">encoding</span>:<span class="string">"utf-8"</span>,<span class="attr">flag</span>:<span class="string">"r"</span>&#125;,(err, data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件写入函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fsWrite</span>(<span class="params">path,content</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//此处注意 回调函数只有一个参数</span></span><br><span class="line">        fs.writeFile(path,content,&#123;<span class="attr">flag</span>:<span class="string">"w"</span>&#125;,err=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(err)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"写入成功！"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mkDir</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.mkdir(path,&#123;<span class="attr">recursive</span>:<span class="literal">true</span>&#125;,err=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"创建文件夹成功！路径为："</span>+path)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readDir</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.readdir(path,(err,files)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(files)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"读取文件夹成功！"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    fsRead,</span><br><span class="line">    fsWrite,</span><br><span class="line">    mkDir,</span><br><span class="line">    readDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-2打包"><a href="#8-2打包" class="headerlink" title="8.2打包"></a>8.2打包</h3><p><strong>运行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p><strong>然后弹出 包信息填写</strong></p>
<h3 id="8-3包的相关信息填写"><a href="#8-3包的相关信息填写" class="headerlink" title="8.3包的相关信息填写"></a>8.3包的相关信息填写</h3><p><strong>填写完成后，会自动生成package.json文件</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"fxc-promise-fs"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"fsRead,fsWrite,mkDir,readDir"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"node"</span>,</span><br><span class="line">    <span class="string">"promise"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"iTaylorfan"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>本地打包完成</strong></p>
<h3 id="8-4上传包到npm官网"><a href="#8-4上传包到npm官网" class="headerlink" title="8.4上传包到npm官网"></a>8.4上传包到npm官网</h3><p><strong>先本机登录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure>

<p><strong>登录完成开始上传</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<p><strong>上传完成去官网查看</strong></p>
<p><img src="https://img.imgdb.cn/item/601f5ee13ffa7d37b3dc36ad.jpg" alt="npm官网"></p>
<p><strong>完成！可以下载使用了</strong></p>
<h2 id="9-Node连接数据库"><a href="#9-Node连接数据库" class="headerlink" title="9.Node连接数据库"></a>9.Node连接数据库</h2><h3 id="9-1安装mysql包"><a href="#9-1安装mysql包" class="headerlink" title="9.1安装mysql包"></a>9.1安装mysql包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure>

<h3 id="9-2代码"><a href="#9-2代码" class="headerlink" title="9.2代码"></a>9.2代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义配置项</span></span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    user: <span class="string">"root"</span>,</span><br><span class="line">    password: <span class="string">"123456"</span>,</span><br><span class="line">    database: <span class="string">"test"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line"><span class="keyword">const</span> con = mysql.createConnection(options)</span><br><span class="line"><span class="comment">//进行连接</span></span><br><span class="line">con.connect(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"数据库连接成功！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mainF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//查询的sql语句</span></span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">"select * from user"</span></span><br><span class="line">    <span class="keyword">let</span> result = query(sql)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">    <span class="comment">//使用 ?占位符进行插入操作</span></span><br><span class="line">    <span class="comment">//  let insertSql = "insert into user(id,username,password)values(?,?,?)"</span></span><br><span class="line">    <span class="keyword">let</span> data = []</span><br><span class="line">    <span class="comment">//读取json</span></span><br><span class="line">    data = fs.readFileSync(<span class="string">"./movie.json"</span>)</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环插入数据</span></span><br><span class="line">    data.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> type = <span class="string">""</span></span><br><span class="line">        item.type.forEach(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">            type += element</span><br><span class="line">            <span class="keyword">if</span> (index != item.type.length - <span class="number">1</span>) &#123;</span><br><span class="line">                type += <span class="string">","</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//需要插入的数据</span></span><br><span class="line">        <span class="keyword">let</span> insertData=[]</span><br><span class="line">        insertData = [index+<span class="number">1</span>, item.title, item.score, item.img_Url, item.enName, type, item.movieLength, item.timeAndAdress, item.synopsis, item.bigImg_Url]</span><br><span class="line">        <span class="comment">//插入数据的sql语句</span></span><br><span class="line">        <span class="keyword">let</span> insertSql = <span class="string">"insert into movies(id,title,score,img_Url,enName,type,movieLength,timeAndAdress,synopsis,bigImg_Url)values(?,?,?,?,?,?,?,?,?,?)"</span></span><br><span class="line">        insert(insertSql, insertData)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">sql</span>) </span>&#123;</span><br><span class="line">    con.query(sql, (err, result, feilds) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//打印每个字段的详细信息</span></span><br><span class="line">            <span class="comment">// console.log(feilds)</span></span><br><span class="line">            <span class="comment">//返回结果集</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据方法</span></span><br><span class="line"><span class="comment">//data为需要插入数据的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">insertSql, data</span>) </span>&#123;</span><br><span class="line">    con.query(insertSql, data, (err, result) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入口函数</span></span><br><span class="line">mainF()</span><br></pre></td></tr></table></figure>

<h2 id="10-express服务器"><a href="#10-express服务器" class="headerlink" title="10.express服务器"></a>10.express服务器</h2><h3 id="10-1简单使用"><a href="#10-1简单使用" class="headerlink" title="10.1简单使用"></a>10.1简单使用</h3><p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure>

<p><strong>代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="keyword">const</span> port=<span class="number">4000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启静态资源访问  会自动打开该目录下的index.html文件</span></span><br><span class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'public'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通字符串路由匹配</span></span><br><span class="line">app.get(<span class="string">"/"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">//返回静态文件</span></span><br><span class="line">    <span class="keyword">let</span> rs=fs.createReadStream(<span class="string">"./public/index.html"</span>)</span><br><span class="line">    rs.pipe(res)</span><br><span class="line">    <span class="comment">// res.send("你好世界！")</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串模式路由匹配</span></span><br><span class="line">app.get(<span class="string">"/abc?d"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(<span class="string">"这个c可有可无"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/aw+zc"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(<span class="string">"w后可以添加n个w"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">"/zx*cv"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(<span class="string">"zx和cv之间可以添加任何字符"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//正则匹配模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// n位的数字：^\d&#123;n&#125;$</span></span><br><span class="line"><span class="comment">// 至少n位的数字：^\d&#123;n,&#125;$</span></span><br><span class="line"><span class="comment">// m-n位的数字：^\d&#123;m,n&#125;$</span></span><br><span class="line">app.get(<span class="regexp">/\/a\d&#123;10,&#125;/</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(<span class="string">"以/a开头并且后面有10个以上的数字"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态路由  可以获取参数</span></span><br><span class="line">app.get(<span class="string">"/news/:id/image:img_id"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(req.params.id+req.params.img_id)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置监听端口</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"启动服务器成功！"</span>,<span class="string">"http://localhost:"</span>+port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="10-2中间件"><a href="#10-2中间件" class="headerlink" title="10.2中间件"></a>10.2中间件</h3><blockquote>
<p>在客户端叫做拦截器，在服务端叫做中间件。可以进行路由拦截操作</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//测试中间件 客户端叫拦截器 服务端叫中间件</span></span><br><span class="line">app.get(<span class="string">"/my"</span>,(req,res,next)=&gt;&#123;</span><br><span class="line">    res.send(<span class="string">"这是my的页面"</span>)</span><br><span class="line">    <span class="comment">//调用中间件</span></span><br><span class="line">    next()</span><br><span class="line">&#125;,(req,res,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"调用了中间件"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建中间件 </span></span><br><span class="line"><span class="comment">//全局中间件 下面的请求都会触发</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"调用了监听下面所有路径的中间件"</span>)</span><br><span class="line">    <span class="comment">//如果不调用next 无法向下执行</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这个中间件只监听/zjj路径  无法监听写在此方法前面的路径</span></span><br><span class="line">app.use(<span class="string">"/zjj"</span>,(req,res,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"调用了监听/zjj路径的中间件"</span>)</span><br><span class="line">    <span class="comment">//如果不调用next 无法向下执行</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的中间件可以监听 这个请求  如果这个请求写在中间件前 将无法触发</span></span><br><span class="line">app.get(<span class="string">"/zjj"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(<span class="string">"这是中间件测试方法"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<h3 id="10-3获取表单提交参数-amp-获取URL地址栏中的参数"><a href="#10-3获取表单提交参数-amp-获取URL地址栏中的参数" class="headerlink" title="10.3获取表单提交参数&amp;获取URL地址栏中的参数"></a>10.3获取表单提交参数&amp;获取URL地址栏中的参数</h3><p><strong>前端页面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/search"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name必须 --&gt;</span></span><br><span class="line">   输入内容： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">name</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试post提交表单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/search"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name必须 --&gt;</span></span><br><span class="line">    输入内容： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">name</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>服务端代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//重要 获取post表单数据需要   不使用扩展</span></span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试获取url中的参数 ?后面的内容</span></span><br><span class="line">app.get(<span class="string">"/search"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">// req.query可以获取?后面的参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.query.query)</span><br><span class="line">    res.send(<span class="string">"你的查询内容为："</span>+req.query.query)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 测试post提交表单</span></span><br><span class="line">app.post(<span class="string">"/search"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">// post提交的数据不在query里，在body中  获取body内容需要使用urlencode模块</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body)</span><br><span class="line">    res.send(<span class="string">"你的查询内容为："</span>+req.body.query)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<h3 id="10-4跨域问题"><a href="#10-4跨域问题" class="headerlink" title="10.4跨域问题"></a>10.4跨域问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">"/zjj"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">//解决跨域问题</span></span><br><span class="line">    res.append(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"*"</span>)</span><br><span class="line">    res.send(<span class="string">"这是中间件测试方法"</span>) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="10-5使用cookie"><a href="#10-5使用cookie" class="headerlink" title="10.5使用cookie"></a>10.5使用cookie</h3><p><strong>引入cookie模块 需要安装</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i cookie-parser</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">const</span> cookieParser=<span class="built_in">require</span>(<span class="string">"cookie-parser"</span>)</span><br><span class="line"><span class="comment">//cookie解析 可以用 req.cookies的方式读取cookie</span></span><br><span class="line"><span class="comment">//secret 启用加密模式</span></span><br><span class="line">app.use(cookieParser(<span class="string">"secret"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置cookie  此处未加密</span></span><br><span class="line">app.get(<span class="string">"/setCookie"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">//设置cookie key value option   30s过期  httpOnly 设置js脚本无法读取cookie 防止xss攻击</span></span><br><span class="line">    res.cookie(<span class="string">"isLogin"</span>,<span class="literal">true</span>,&#123;<span class="attr">maxAge</span>:<span class="number">30000</span>,<span class="attr">httpOnly</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">    res.send(<span class="string">"设置cookie成功！"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取cookie</span></span><br><span class="line">app.get(<span class="string">"/getCookie"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">//测试cookie读取</span></span><br><span class="line">    <span class="comment">//1 直接读取headers里面的内容获取cookie</span></span><br><span class="line">    <span class="comment">//let cookies=req.headers.cookie</span></span><br><span class="line">    <span class="comment">//2 通过cookieParser模块读取解析好的cookie</span></span><br><span class="line">    <span class="keyword">let</span> cookies=req.cookies</span><br><span class="line">    <span class="built_in">console</span>.log(cookies)</span><br><span class="line">    <span class="keyword">let</span> isLogin=req.cookies.isLogin</span><br><span class="line">    res.send(<span class="string">"读取到的cookie为:"</span>+<span class="string">"\n是否登录:"</span>+isLogin)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置cookie 开启加密</span></span><br><span class="line">app.get(<span class="string">"/setSecretCookie"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">//设置cookie key value option  加密cookie  使用signed前需要 导入cookieparser 时设置参数</span></span><br><span class="line">    res.cookie(<span class="string">"username"</span>,<span class="string">"fanxuchao"</span>,&#123;<span class="attr">signed</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">    res.send(<span class="string">"设置加密cookie成功！"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取加密后的cookie</span></span><br><span class="line">app.get(<span class="string">"/getSecretCookie"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> cookies=req.signedCookies</span><br><span class="line">    <span class="built_in">console</span>.log(cookies)</span><br><span class="line">    <span class="keyword">let</span> username=cookies.username</span><br><span class="line">    res.send(<span class="string">"读取到的cookie为:"</span>+<span class="string">"\n用户名:"</span>+username)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.expressjs.com.cn/resources/middleware/cookie-parser.html" target="_blank" rel="noopener">express-cookie中间件教程文档</a></p>
<h3 id="10-6使用node加密模块自定义加密"><a href="#10-6使用node加密模块自定义加密" class="headerlink" title="10.6使用node加密模块自定义加密"></a>10.6使用node加密模块自定义加密</h3><blockquote>
<p>进行密码比较时直接使用加密后的内容进行比较，注意盐</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入node crypto 加密模块  无需安装</span></span><br><span class="line"><span class="keyword">const</span> crypto=<span class="built_in">require</span>(<span class="string">"crypto"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试node加密模块crypto  简单加密方法</span></span><br><span class="line">app.get(<span class="string">"/setEasyCrypto"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">//加盐</span></span><br><span class="line">    <span class="keyword">let</span> salt=<span class="string">"fxc123123"</span></span><br><span class="line">    <span class="comment">//需要加密的字符串</span></span><br><span class="line">    <span class="keyword">let</span> password=<span class="string">"fxc123456"</span></span><br><span class="line">    <span class="comment">//加盐处理</span></span><br><span class="line">    password+=salt</span><br><span class="line">    <span class="comment">//设置加密类型 算法</span></span><br><span class="line">    <span class="keyword">let</span> md5 =crypto.createHash(<span class="string">"md5"</span>)</span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    md5.update(password)</span><br><span class="line">    <span class="comment">//digest方法 计算传入要被哈希（使用 hash.update() 方法）的所有数据的摘要。 如果提供了 encoding，则返回字符串，否则返回 Buffer。</span></span><br><span class="line">    <span class="comment">//输出16进制字符串</span></span><br><span class="line">    <span class="keyword">let</span> secret = md5.digest(<span class="string">"hex"</span>)</span><br><span class="line">    <span class="comment">//输出加密后的字符串</span></span><br><span class="line">    <span class="built_in">console</span>.log(secret)</span><br><span class="line">    <span class="comment">//加入cookie</span></span><br><span class="line">    res.cookie(<span class="string">"usernameMD5"</span>,secret)</span><br><span class="line">    res.send(<span class="string">"设置加密成功！"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="10-7使用session"><a href="#10-7使用session" class="headerlink" title="10.7使用session"></a>10.7使用session</h3><p><strong>需要安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i express-session</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入session模块</span></span><br><span class="line"><span class="keyword">const</span> session=<span class="built_in">require</span>(<span class="string">"express-session"</span>)</span><br><span class="line"><span class="comment">//启用session模块并进行配置</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret:<span class="string">"fxc"</span>,   <span class="comment">//盐</span></span><br><span class="line">    saveUninitialized:<span class="literal">true</span>,  <span class="comment">//保存初始化内容</span></span><br><span class="line">    resave:<span class="literal">true</span>, <span class="comment">//强制保存</span></span><br><span class="line">    maxAge:<span class="number">7</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>   <span class="comment">//设置一个星期过期</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试session的使用</span></span><br><span class="line">app.get(<span class="string">"/setSession"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    req.session.username=<span class="string">"fxc123"</span></span><br><span class="line">    <span class="comment">//设置session过期时间</span></span><br><span class="line">    <span class="comment">// req.session.cookie.maxAge=1000</span></span><br><span class="line">    res.send(<span class="string">"设置session成功！"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取session</span></span><br><span class="line">app.get(<span class="string">"/getSession"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> username= req.session.username</span><br><span class="line">    res.send(<span class="string">"读取到的session内容为："</span>+username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁session</span></span><br><span class="line">app.get(<span class="string">"/DestorySession"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    req.session.destroy(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            res.send(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"销毁完成！"</span>)</span><br><span class="line">        res.send(<span class="string">"销毁完成"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.expressjs.com.cn/resources/middleware/session.html" target="_blank" rel="noopener">express-session中间件教程文档</a></p>
<h3 id="10-8文件上传"><a href="#10-8文件上传" class="headerlink" title="10.8文件上传"></a>10.8文件上传</h3><p><strong>服务器端</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试文件上传 上传单个文件  upload.single("uploadImg") 里面的参数必须和表单的name保持一致</span></span><br><span class="line">app.post(<span class="string">"/upload"</span>,upload.single(<span class="string">"uploadImg"</span>),(req,res,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.file)</span><br><span class="line">    <span class="comment">//重命名文件</span></span><br><span class="line">    <span class="keyword">let</span> oldName=req.file.path</span><br><span class="line">    <span class="keyword">let</span> newName=req.file.path+req.file.originalname</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//node fs模块重命名</span></span><br><span class="line">        fs.rename(oldName,newName,err=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)<span class="keyword">throw</span> err</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"文件上传成功！文件大小为:"</span>+(req.file.size/<span class="number">1024</span>/<span class="number">1024</span>).toFixed(<span class="number">2</span>)+<span class="string">"MB"</span>)</span><br><span class="line">            <span class="keyword">let</span> obj=&#123;</span><br><span class="line">                state:<span class="string">"OK"</span>,</span><br><span class="line">                img_url:<span class="string">"./static/uploads/"</span>+req.file.filename+req.file.originalname,</span><br><span class="line">                time:<span class="built_in">Date</span>.now()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//返回json</span></span><br><span class="line">            res.json(obj)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        res.send(err)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>使用HTML表单上传</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试上传图片<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 重要设置enctype="multipart/form-data" 如果使用默认的可能会 报请求过大的错误--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 限定只能为图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadImg"</span> <span class="attr">id</span>=<span class="string">"uploadImg"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用JQuery的Ajax上传</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试用Ajax上传图片<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"uploadForm"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用label关联 input 以实现自定义上传框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"uploadImgAjax"</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadImg"</span> <span class="attr">id</span>=<span class="string">"uploadImgAjax"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid blue; width: 150px; height: 30px; text-align: center; line-height: 30px; cursor: pointer;"</span>&gt;</span>点击提交<span class="tag">&lt;/<span class="name">div</span>&gt;</span>		<span class="comment">&lt;!--不会触发表单默认的提交--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>图片预览<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"prevImg"</span> <span class="attr">style</span>=<span class="string">"height: 100%;width: 100%;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JQuery代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//实例化表单序列化对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> formDataObj=<span class="keyword">new</span> FormData()</span></span><br><span class="line"><span class="actionscript"><span class="comment">//监听input变化 以预览图片</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">"#uploadImgAjax"</span>).change(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log($("#uploadForm"))</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> files=$(<span class="string">"#uploadImgAjax"</span>)[<span class="number">0</span>].files</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(files)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//解决多次点击上传 重复key值报错问题</span></span></span><br><span class="line"><span class="actionscript">    formDataObj=<span class="keyword">new</span> FormData()</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//把图片文件加入序列化对象中</span></span></span><br><span class="line"><span class="actionscript">    formDataObj.append(<span class="string">"uploadImg"</span>,files[<span class="number">0</span>])</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 生成临时url  参数为file</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> imgUrl=<span class="built_in">window</span>.webkitURL.createObjectURL(files[<span class="number">0</span>])</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//预览图片</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#prevImg"</span>).attr(<span class="string">"src"</span>,imgUrl)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 点击提交</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">"#submit"</span>).click(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//ajax上传文件</span></span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">        url:<span class="string">"/upload"</span>,</span></span><br><span class="line"><span class="actionscript">        method:<span class="string">"post"</span>,</span></span><br><span class="line"><span class="actionscript">        processData:<span class="literal">false</span>,    <span class="comment">//重要属性 默认为true 为true时不会对表单进行序列化</span></span></span><br><span class="line"><span class="actionscript">        data:formDataObj,     <span class="comment">//data 需要上传的数据 为序列化表单</span></span></span><br><span class="line"><span class="actionscript">        contentType:<span class="literal">false</span>,    <span class="comment">//重要属性 默认为application/x-www-form-urlencoded 如果按此类型上传 服务器会报错 request entity too large</span></span></span><br><span class="line"><span class="actionscript">        success:<span class="function"><span class="keyword">function</span><span class="params">(result)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(result)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10-9文件下载"><a href="#10-9文件下载" class="headerlink" title="10.9文件下载"></a>10.9文件下载</h3><p><strong>服务器端</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试文件下载</span></span><br><span class="line">app.get(<span class="string">"/download"</span>,(req,res,next)=&gt;&#123;</span><br><span class="line">    <span class="comment">//参数为 文件的相对路径</span></span><br><span class="line">    res.download(<span class="string">"./public/1.jpg"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>客户端</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试下载文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/download"</span>&gt;</span>点击下载一张图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="10-10使用express脚手架"><a href="#10-10使用express脚手架" class="headerlink" title="10.10使用express脚手架"></a>10.10使用express脚手架</h3><p><strong>教程文档</strong>：<a href="https://www.expressjs.com.cn/starter/generator.html" target="_blank" rel="noopener">express程序生成器</a></p>
<p><strong>可以快速生成服务器项目目录结构</strong></p>
<div align=left><img  src="https://img.imgdb.cn/item/602a76dc3ffa7d37b3685c27.jpg"/></div>



<h3 id="10-11-ejs模板的简单使用"><a href="#10-11-ejs模板的简单使用" class="headerlink" title="10.11 ejs模板的简单使用"></a>10.11 ejs模板的简单使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">       &lt;!-- 字符串插入 --&gt;</span><br><span class="line">       &lt;h1&gt;等号插入数据：&lt;&#x2F;h1&gt;</span><br><span class="line">       &lt;%&#x3D;mytitle%&gt;</span><br><span class="line">       &lt;!-- 可以解析html标签 --&gt;</span><br><span class="line">       &lt;h1&gt;横杠插入数据：&lt;&#x2F;h1&gt;</span><br><span class="line">       &lt;%-mytitle%&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!-- 条件判断 --&gt;</span><br><span class="line">       &lt;h1&gt;这是判断的内容&lt;&#x2F;h1&gt;</span><br><span class="line">       &lt;% if(sex&#x3D;&#x3D;&quot;男&quot;)&#123;%&gt;</span><br><span class="line">           &lt;h1&gt;蔡徐坤&lt;&#x2F;h1&gt;</span><br><span class="line">       &lt;%&#125;else&#123;%&gt;</span><br><span class="line">           &lt;h1&gt;Lisa&lt;&#x2F;h1&gt;</span><br><span class="line">       &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!-- 循环 --&gt;</span><br><span class="line">       &lt;h1&gt;这是循环的内容&lt;&#x2F;h1&gt;</span><br><span class="line">       &lt;% for(let i&#x3D;0;i&lt;BLACKPINK.length;i++)&#123;%&gt;</span><br><span class="line">           &lt;h2&gt;&lt;%&#x3D;BLACKPINK[i]%&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">       &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!-- ejs注释 --&gt;</span><br><span class="line">       &lt;%# </span><br><span class="line">           这是ejs的注释</span><br><span class="line">       %&gt; </span><br><span class="line">   &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="11-node工具nodemon"><a href="#11-node工具nodemon" class="headerlink" title="11.node工具nodemon"></a>11.node工具nodemon</h2><blockquote>
<p>每次修改服务器代码时都需要<strong>手动</strong>重启服务器，使用此工具可以<strong>自动</strong>重启服务器</p>
</blockquote>
<h3 id="11-1安装"><a href="#11-1安装" class="headerlink" title="11.1安装"></a>11.1安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nodemon</span><br><span class="line">//或</span><br><span class="line">npm install --save-dev nodemon</span><br></pre></td></tr></table></figure>

<p><strong>修改代码后自动重启</strong></p>
<div align=left><img  src="https://img.imgdb.cn/item/602a79163ffa7d37b3691295.jpg"/></div>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>puppeteer爬取ins图片路径</title>
    <url>/2022/04/05/puppeteer%E7%88%AC%E5%8F%96ins%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="使用puppeteer爬取Ins图片"><a href="#使用puppeteer爬取Ins图片" class="headerlink" title="使用puppeteer爬取Ins图片"></a>使用puppeteer爬取Ins图片</h1><p><strong>注意点：</strong></p>
<blockquote>
<ol>
<li>ins没有游客模式，所以需要登录后获取一次cookie，下次带上cookie就可以免登录</li>
<li>访问ins需要加速器，axios需要设置proxy</li>
<li>ins网站的class是动态的</li>
</ol>
</blockquote>
<h2 id="第一步：使用puppeteer爬取图片链接并保存JSON数据"><a href="#第一步：使用puppeteer爬取图片链接并保存JSON数据" class="headerlink" title="第一步：使用puppeteer爬取图片链接并保存JSON数据"></a>第一步：使用puppeteer爬取图片链接并保存JSON数据</h2><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 作者: iTaylorfan</span></span><br><span class="line"><span class="comment"> * 创建时间: 2022-03-27 10:35:37</span></span><br><span class="line"><span class="comment"> * 修改时间: 2022-04-05 10:33:16</span></span><br><span class="line"><span class="comment"> * 版本: [1.0]</span></span><br><span class="line"><span class="comment"> * 描述: 爬取INS图片链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"><span class="comment">//导入puppeteer库</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">"puppeteer"</span>);</span><br><span class="line"><span class="comment">//自定义工具方法</span></span><br><span class="line"><span class="keyword">const</span> writeJson=<span class="built_in">require</span>(<span class="string">"./writeJson"</span>);</span><br><span class="line"><span class="comment">//此处放置需要爬取的ins分享链接</span></span><br><span class="line"><span class="keyword">let</span> baseUrl = <span class="string">"https://www.instagram.com/p/CbXJsmQvR0p/?utm_source=ig_web_copy_link"</span>;</span><br><span class="line"><span class="comment">//没有游客模式 所以必须登录 登录后获取cookie</span></span><br><span class="line"><span class="comment">//账号密码</span></span><br><span class="line"><span class="keyword">let</span> username = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">let</span> password = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"这是node环境"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(os.platform());</span><br><span class="line">    <span class="built_in">console</span>.log(os.hostname());</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`%c 正在获取地址数据 : %c <span class="subst">$&#123;date.toLocaleString()&#125;</span> `</span>, <span class="string">'background: #606060; color: #fff; border-radius: 3px 0 0 3px;'</span>, <span class="string">'background: #1475B2; color: #fff; border-radius: 0 3px 3px 0;'</span>);</span><br><span class="line">    <span class="keyword">await</span> getData();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无头浏览器</span></span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">        <span class="comment">//是否开启无头浏览器模式</span></span><br><span class="line">        headless: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//设置可视区域大小</span></span><br><span class="line">        defaultViewport: &#123;</span><br><span class="line">            width: <span class="number">1200</span>,</span><br><span class="line">            height: <span class="number">900</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//配置本地chrome开发版路径  使用npm install puppeteer --ignore-scripts 跳过安装chrome</span></span><br><span class="line">        executablePath:<span class="string">"D:\\Program Files\\.local-chromium\\win64-970485\\chrome-win\\chrome.exe"</span></span><br><span class="line">        <span class="comment">//放慢速度</span></span><br><span class="line">        <span class="comment">//slowMo:100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> bowser = <span class="keyword">await</span> puppeteer.launch(option);</span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> bowser.newPage();</span><br><span class="line">    <span class="comment">//用户id  在浏览器的cookie中查看</span></span><br><span class="line">    <span class="keyword">var</span> cookie1 = &#123;</span><br><span class="line">        name: <span class="string">"ds_user_id"</span>,</span><br><span class="line">        value: <span class="string">""</span>,  <span class="comment">//填入自己获取到的值</span></span><br><span class="line">        domain: <span class="string">".instagram.com"</span>,</span><br><span class="line">        path: <span class="string">"/"</span>,</span><br><span class="line">        expires: <span class="built_in">Date</span>.now() + <span class="number">3600</span> * <span class="number">1000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//会话id</span></span><br><span class="line">    <span class="keyword">var</span> cookie2 = &#123;</span><br><span class="line">        name: <span class="string">"sessionid"</span>,</span><br><span class="line">        value: <span class="string">""</span>,  <span class="comment">//填入自己获取到的值</span></span><br><span class="line">        domain: <span class="string">".instagram.com"</span>,</span><br><span class="line">        path: <span class="string">"/"</span>,</span><br><span class="line">        expires: <span class="built_in">Date</span>.now() + <span class="number">3600</span> * <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> page.goto(baseUrl);</span><br><span class="line">    <span class="comment">//先打开页面再设置cookie</span></span><br><span class="line">    <span class="keyword">await</span> page.setCookie(cookie1, cookie2);</span><br><span class="line">    <span class="comment">//设置好cookie后需要刷新一下页面</span></span><br><span class="line">    <span class="keyword">await</span> page.reload();</span><br><span class="line">    <span class="comment">//等待刷新完成</span></span><br><span class="line">    <span class="comment">// await page.waitForNavigation();</span></span><br><span class="line">    <span class="comment">//判断还有没有账号密码输入框</span></span><br><span class="line">    <span class="keyword">let</span> isNeedInputPassword = <span class="keyword">await</span> page.$(<span class="string">"._2hvTZ.pexuQ.zyHYP"</span>);</span><br><span class="line">    <span class="keyword">if</span> (isNeedInputPassword) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"需要输入密码"</span>);</span><br><span class="line">        <span class="comment">//等待输入框加载</span></span><br><span class="line">        <span class="keyword">await</span> page.waitForSelector(<span class="string">"._2hvTZ.pexuQ.zyHYP"</span>);</span><br><span class="line">        <span class="comment">//输入账号</span></span><br><span class="line">        <span class="keyword">await</span> page.type(<span class="string">'.f0n8F&gt;[name="username"]'</span>, username);</span><br><span class="line">        <span class="comment">//输入密码</span></span><br><span class="line">        <span class="keyword">await</span> page.type(<span class="string">'.f0n8F&gt;[name="password"]'</span>, password);</span><br><span class="line">        <span class="comment">//点击登录</span></span><br><span class="line">        <span class="comment">// await page.click('button[type="submit"]');</span></span><br><span class="line">        <span class="comment">//然后跳转需要爬取的页面  登录后会自动打开详情页面</span></span><br><span class="line">        <span class="comment">//等待路由跳转完成</span></span><br><span class="line">        <span class="keyword">await</span> page.waitForNavigation();</span><br><span class="line">        <span class="comment">//点击以后再说</span></span><br><span class="line">        <span class="keyword">await</span> page.click(<span class="string">'.sqdOP.yWX7d.y3zKF[type="button"]'</span>);</span><br><span class="line">        <span class="comment">//等待路由跳转完成</span></span><br><span class="line">        <span class="keyword">await</span> page.waitForNavigation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------------------------------以上步骤都是打开分享详情页面所需-------------------------------</span></span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"开始爬取："</span> + date.toLocaleString());</span><br><span class="line">    <span class="comment">//轮播图是动态加载的 </span></span><br><span class="line">    <span class="keyword">let</span> totalImg1 = []</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">"._9zrw"</span>);</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">"li._9-ji"</span>);</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">"._9_91&gt;img"</span>);</span><br><span class="line">    <span class="keyword">await</span> page.waitForTimeout(<span class="number">500</span>); <span class="comment">//等待图片加载</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//不管有没有下一页都需要获取第一张</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">await</span> page.$$<span class="built_in">eval</span>(<span class="string">"li._9-ji"</span>, (el) =&gt; &#123;  <span class="comment">//改函数内部无法使用外部变量</span></span><br><span class="line">        <span class="comment">//此处无法使用外侧变量</span></span><br><span class="line">        <span class="keyword">let</span> totalImg2 = [];</span><br><span class="line">        el.forEach(<span class="function">(<span class="params">dom, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">            <span class="comment">//只需要获取第一张</span></span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> img = dom.querySelector(<span class="string">"._9_91&gt;img"</span>);</span><br><span class="line">                <span class="keyword">let</span> imgTitle = img.getAttribute(<span class="string">"alt"</span>);</span><br><span class="line">                <span class="keyword">let</span> imgSrc = img.getAttribute(<span class="string">"src"</span>);</span><br><span class="line">                obj.imgTitle = imgTitle;</span><br><span class="line">                obj.imgSrc = imgSrc;</span><br><span class="line">                totalImg2.push(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> totalImg2;</span><br><span class="line">    &#125;);</span><br><span class="line">    totalImg1 = [...totalImg1, ...arr];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">await</span> page.$(<span class="string">"._9zrw"</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> page.waitForTimeout(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">await</span> page.waitForSelector(<span class="string">"._9_91&gt;img"</span>);</span><br><span class="line">        <span class="keyword">let</span> arr = <span class="keyword">await</span> page.$$<span class="built_in">eval</span>(<span class="string">"li._9-ji"</span>, (el) =&gt; &#123;  <span class="comment">//改函数内部无法使用外部变量</span></span><br><span class="line">            <span class="comment">//此处无法使用外侧变量</span></span><br><span class="line">            <span class="keyword">let</span> totalImg2 = [];</span><br><span class="line">            el.forEach(<span class="function">(<span class="params">dom, index</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">                <span class="comment">//只需要获取最后一张</span></span><br><span class="line">                <span class="keyword">if</span> (index == el.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> img = dom.querySelector(<span class="string">"._9_91&gt;img"</span>);</span><br><span class="line">                    <span class="keyword">let</span> imgTitle = img.getAttribute(<span class="string">"alt"</span>);</span><br><span class="line">                    <span class="keyword">let</span> imgSrc = img.getAttribute(<span class="string">"src"</span>);</span><br><span class="line">                    obj.imgTitle = imgTitle;</span><br><span class="line">                    obj.imgSrc = imgSrc;</span><br><span class="line">                    totalImg2.push(obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> totalImg2;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        totalImg1 = [...totalImg1, ...arr];</span><br><span class="line">        <span class="comment">//点击下一页</span></span><br><span class="line">        <span class="keyword">await</span> page.click(<span class="string">"._9zrw"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取ins 博主名</span></span><br><span class="line">    <span class="keyword">let</span> name=<span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">"span._9-9m&gt;a"</span>,el=&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> el.innerText;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(totalImg1);</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    totalImg1=<span class="built_in">JSON</span>.stringify(totalImg1);</span><br><span class="line">    <span class="comment">//加上时间戳确保文件名唯一</span></span><br><span class="line">    writeJson(<span class="string">`<span class="subst">$&#123;name&#125;</span>-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>,totalImg1);</span><br><span class="line">    bowser.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

<p><strong>自定义方法writeJson：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 作者: iTaylorfan</span></span><br><span class="line"><span class="comment"> * 创建时间: 2022-04-04 10:24:16</span></span><br><span class="line"><span class="comment"> * 修改时间: 2022-04-04 11:16:49</span></span><br><span class="line"><span class="comment"> * 版本: [1.0]</span></span><br><span class="line"><span class="comment"> * 版权: iTaylorfan</span></span><br><span class="line"><span class="comment"> * 描述: 写入json文件的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>fileName 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;JSON&#125;</span> </span>data json字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> writeJson=<span class="function">(<span class="params">fileName,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(<span class="string">`./json`</span>)) &#123;</span><br><span class="line">        fs.mkdirSync(<span class="string">`./json`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.writeFileSync(<span class="string">`./json/<span class="subst">$&#123;fileName&#125;</span>.json`</span>, data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"写入json成功!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports=writeJson</span><br></pre></td></tr></table></figure>

<h2 id="第二步：读取JSON文件并下载图片"><a href="#第二步：读取JSON文件并下载图片" class="headerlink" title="第二步：读取JSON文件并下载图片"></a>第二步：读取JSON文件并下载图片</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 作者: iTaylorfan</span></span><br><span class="line"><span class="comment"> * 创建时间: 2022-04-04 11:15:41</span></span><br><span class="line"><span class="comment"> * 修改时间: 2022-04-04 17:19:02</span></span><br><span class="line"><span class="comment"> * 版本: [1.0]</span></span><br><span class="line"><span class="comment"> * 版权: iTaylorfan</span></span><br><span class="line"><span class="comment"> * 描述: 下载图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"><span class="keyword">const</span> jsonDir = <span class="string">"./json"</span>;   <span class="comment">//json文件夹路径</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(<span class="string">"./images"</span>)) &#123;</span><br><span class="line">        fs.mkdirSync(<span class="string">"./images"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> jsonArr = fs.readdirSync(jsonDir);</span><br><span class="line">    <span class="built_in">console</span>.log(jsonArr);</span><br><span class="line">    <span class="keyword">let</span> totalCount = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> errindex=jsonArr.indexOf(<span class="string">"已经下载"</span>);</span><br><span class="line">    jsonArr.splice(errindex,<span class="number">1</span>);</span><br><span class="line">    jsonArr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;  <span class="comment">//遍历json文件</span></span><br><span class="line">        <span class="keyword">let</span> jsonString = fs.readFileSync(jsonDir + <span class="string">"/"</span> + item);</span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(jsonString);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"读取文件："</span> + item);</span><br><span class="line">        data.forEach(<span class="function">(<span class="params">item2</span>) =&gt;</span> &#123;   <span class="comment">//遍历每一个图片链接</span></span><br><span class="line">            <span class="comment">//获取图片</span></span><br><span class="line">            <span class="comment">// console.log(item2.imgSrc);</span></span><br><span class="line">            setTimeout(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">                <span class="comment">//加速器代理 关键否则无法get到数据</span></span><br><span class="line">                <span class="keyword">let</span> proxy = &#123;</span><br><span class="line">                    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">                    port: <span class="number">7890</span>,</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//随便设置一下请求头</span></span><br><span class="line">                <span class="keyword">let</span> headers = &#123;</span><br><span class="line">                    <span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36"</span>,</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(item2.imgSrc);</span><br><span class="line">                <span class="keyword">let</span> res = <span class="keyword">await</span> axios.get(item2.imgSrc, &#123; <span class="attr">responseType</span>: <span class="string">"stream"</span>, headers,proxy &#125;);</span><br><span class="line">                <span class="comment">//图片后缀为jpg</span></span><br><span class="line">                <span class="keyword">let</span> extname = <span class="string">".jpg"</span>;</span><br><span class="line">                <span class="keyword">if</span>(!fs.existsSync(<span class="string">`./images/<span class="subst">$&#123;item2.user&#125;</span>`</span>))&#123;</span><br><span class="line">                    fs.mkdirSync(<span class="string">`./images/<span class="subst">$&#123;item2.user&#125;</span>`</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">`./images/<span class="subst">$&#123;item2.user&#125;</span>/`</span> + <span class="string">"图片"</span> + <span class="built_in">Date</span>.now() + extname);</span><br><span class="line">                res.data.pipe(ws);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`成功写入第<span class="subst">$&#123;totalCount&#125;</span>张图片`</span>);</span><br><span class="line">                totalCount++;</span><br><span class="line">                res.data.on(<span class="string">"close"</span>, () =&gt; &#123;</span><br><span class="line">                    ws.close();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, <span class="number">200</span> * totalCount);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Node</tag>
        <tag>Puppeteer</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp练手项目黑马超市的一些笔记</title>
    <url>/2021/01/22/uniapp%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%E9%BB%91%E9%A9%AC%E8%B6%85%E5%B8%82%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><!--uni-app  练手项目(黑马超市)的一些笔记--></h1><h2 id="1-Vue过滤器"><a href="#1-Vue过滤器" class="headerlink" title="1.Vue过滤器"></a>1.Vue过滤器</h2><h3 id="1-1使用局部过滤器"><a href="#1-1使用局部过滤器" class="headerlink" title="1.1使用局部过滤器"></a>1.1使用局部过滤器</h3><p><strong>HTML代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"bottom-text"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在此处使用过滤器 默认把 | 左边的数据作为参数传给过滤器--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span>发表时间：&#123;&#123;item.add_time | timeFilter&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"num"</span>&gt;</span>浏览次数：&#123;&#123;item.click&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>js代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义过滤器</span></span><br><span class="line">	filters:&#123;</span><br><span class="line">           <span class="comment">//过滤器名 传过来的参数</span></span><br><span class="line">		timeFilter(myDate)&#123;</span><br><span class="line">			<span class="keyword">const</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>(myDate)</span><br><span class="line">			<span class="keyword">let</span> year=date.getFullYear()</span><br><span class="line">			<span class="keyword">let</span> month=(date.getMonth()+<span class="number">1</span>).toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">			<span class="comment">//padStart() ES2017新增方法 对字符串进行填充</span></span><br><span class="line">			<span class="keyword">let</span> Day=date.getDate().toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">let</span> Hour=date.getHours().toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">let</span> Min=date.getMinutes().toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">let</span> Second=date.getSeconds().toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> year+<span class="string">"-"</span>+month+<span class="string">"-"</span>+Day+<span class="string">" "</span>+Hour+<span class="string">":"</span>+Min+<span class="string">":"</span>+Second</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2使用全局过滤器"><a href="#1-2使用全局过滤器" class="headerlink" title="1.2使用全局过滤器"></a>1.2使用全局过滤器</h3><p><strong>在main.js文件中配置</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.filter(<span class="string">"timeFilter"</span>,myDate=&gt;&#123;</span><br><span class="line">	<span class="keyword">const</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>(myDate)</span><br><span class="line">	<span class="keyword">let</span> year=date.getFullYear()</span><br><span class="line">	<span class="keyword">let</span> month=(date.getMonth()+<span class="number">1</span>).toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">	<span class="comment">//padStart() ES2017新增方法 对字符串进行填充</span></span><br><span class="line">	<span class="keyword">let</span> Day=date.getDate().toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">let</span> Hour=date.getHours().toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">let</span> Min=date.getMinutes().toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">let</span> Second=date.getSeconds().toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">return</span> year+<span class="string">"-"</span>+month+<span class="string">"-"</span>+Day+<span class="string">" "</span>+Hour+<span class="string">":"</span>+Min+<span class="string">":"</span>+Second</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="2-字符串填充方法-padStart"><a href="#2-字符串填充方法-padStart" class="headerlink" title="2.字符串填充方法 padStart()"></a>2.字符串填充方法 padStart()</h2><blockquote>
<p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p>
</blockquote>
<p><strong>此处对日期格式进行格式化，获取天数 只有一位数时前面补0</strong></p>
<p><strong>注意：这是字符串方法，不要漏掉toString()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Day=date.getDate().toString().padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>



<h2 id="附件："><a href="#附件：" class="headerlink" title="附件："></a>附件：</h2><h3 id="1-项目接口文档"><a href="#1-项目接口文档" class="headerlink" title="1.项目接口文档"></a>1.<a href="https://www.yuque.com/suanmeitang-lsuno/interface/eagkm0" target="_blank" rel="noopener">项目接口文档</a></h3><h3 id="2-项目材料-含项目服务器"><a href="#2-项目材料-含项目服务器" class="headerlink" title="2.项目材料(含项目服务器)"></a>2.<a href="https://github.com/ITaylorfan/uniapp-HeiMaShop-materials" target="_blank" rel="noopener">项目材料(含项目服务器)</a></h3><h3 id="3-部分截图"><a href="#3-部分截图" class="headerlink" title="3.部分截图"></a>3.部分截图</h3><img src="/2021/01/22/uniapp%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%E9%BB%91%E9%A9%AC%E8%B6%85%E5%B8%82%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/uniapp%E6%88%AA%E5%9B%BE1.png" class="" title="uniapp截图1">

<img src="/2021/01/22/uniapp%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%E9%BB%91%E9%A9%AC%E8%B6%85%E5%B8%82%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/uniapp%E6%88%AA%E5%9B%BE2.png" class="" title="uniapp截图2">

<img src="/2021/01/22/uniapp%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%E9%BB%91%E9%A9%AC%E8%B6%85%E5%B8%82%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/uniapp%E6%88%AA%E5%9B%BE3.png" class="" title="uniapp截图3">

<img src="/2021/01/22/uniapp%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%E9%BB%91%E9%A9%AC%E8%B6%85%E5%B8%82%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/uniapp%E6%88%AA%E5%9B%BE4.png" class="" title="uniapp截图4">

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Node爬虫笔记</title>
    <url>/2021/02/19/node%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-简单爬取电影数据"><a href="#1-简单爬取电影数据" class="headerlink" title="1.简单爬取电影数据"></a>1.简单爬取电影数据</h2><blockquote>
<p>选择的网站是1905.com</p>
</blockquote>
<p><img src="https://img.imgdb.cn/item/601030f23ffa7d37b3b3d683.png" alt="1905电影网"></p>
<a id="more"></a>

<h3 id="重要：正则表达式"><a href="#重要：正则表达式" class="headerlink" title="重要：正则表达式"></a><strong>重要：正则表达式</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匹配符合条件的a标签</span></span><br><span class="line"><span class="comment">//注意特殊字符的转义  . : () /</span></span><br><span class="line"><span class="comment">//igs 表示忽略大小写 全局匹配 不略过空格 换行符</span></span><br><span class="line">/<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript\:void\(0\);"</span> <span class="attr">onclick</span>=<span class="string">"location\.href='(.*?)';return false;"</span><span class="attr">.</span>*?&gt;</span>(.*?)<span class="tag">&lt;<span class="name">\</span>/<span class="attr">a</span>&gt;</span>/igs</span></span><br></pre></td></tr></table></figure>

<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入第三方库axios</span></span><br><span class="line"><span class="keyword">let</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>)</span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">let</span> requestUrl = <span class="string">"https://www.1905.com/vod/list/n_1/o4p1.html"</span></span><br><span class="line"><span class="comment">//分类数据</span></span><br><span class="line"><span class="keyword">let</span> category = []</span><br><span class="line"><span class="comment">//所有电影</span></span><br><span class="line"><span class="keyword">let</span> allMovie=[]</span><br><span class="line">axios.get(requestUrl).then(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置正则 </span></span><br><span class="line">    <span class="comment">// 爬取分类信息</span></span><br><span class="line">    <span class="comment">// &lt;a href="javascript:void(0);" onclick="location.href='https://www.1905.com/vod/list/n_1_t_1/o4p1.html';return false;" &gt;</span></span><br><span class="line">    <span class="keyword">let</span> re = <span class="regexp">/&lt;a href="javascript\:void\(0\);" onclick="location\.href='(.*?)';return false;".*?&gt;(.*?)&lt;\/a&gt;/ig</span>s   <span class="comment">//i 表示忽略大小写 g 表示全局搜索 s 匹配换行符表示不忽略空格？</span></span><br><span class="line">    category=getCategoryData(re,success.data)</span><br><span class="line">    <span class="built_in">console</span>.log(category)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提取当前页面的所有电影</span></span><br><span class="line">    <span class="comment">// &lt;div class="grid-2x grid-3x-md grid-6x-sm"&gt;</span></span><br><span class="line">    <span class="comment">// &lt;a class="pic-pack-outer" target="_blank" href="https://www.1905.com/vod/play/682663.shtml" title="霸王别姬"&gt;&lt;img alt="霸王别姬" src="https://image11.m1905.cn/uploadfile/2013/0816/thumb_1_150_203_20130816013533696.jpg"&gt;&lt;h3&gt;霸王别姬&lt;/h3&gt;&lt;i class="score"&gt;&lt;b&gt;9&lt;/b&gt;.6&lt;/i&gt;&lt;p&gt;张国荣主演经典作&lt;/p&gt;&lt;/a&gt;</span></span><br><span class="line">    <span class="comment">// &lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//&lt;a class="pic-pack-outer" target="_blank" href="https://www.1905.com/vod/play/85676.shtml" title="举起手来"&gt;&lt;img alt="举起手来" src="https://image11.m1905.cn/uploadfile/2009/1106/thumb_1_150_203_20091106112357202.jpg"&gt;&lt;h3&gt;举起手来&lt;/h3&gt;&lt;i class="score"&gt;&lt;b&gt;9&lt;/b&gt;.4&lt;/i&gt;&lt;p&gt;潘长江爆笑歼鬼子&lt;/p&gt;&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> re2=<span class="regexp">/&lt;a class="pic-pack-outer" target="\_blank" href="(.*?)" title="(.*?)"&gt;&lt;img alt=".*?" src="(.*?)"&gt;&lt;h3&gt;.*?&lt;\/h3&gt;&lt;i class="score"&gt;(.*?)&lt;\/i&gt;&lt;p&gt;(.*?)&lt;\/p&gt;&lt;\/a&gt;/ig</span>s</span><br><span class="line">    allMovie=getAllMovieData(re2,success.data)</span><br><span class="line">    <span class="built_in">console</span>.log(allMovie)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据创建的内容生成目录</span></span><br><span class="line">    <span class="keyword">if</span>(!fs.existsSync(<span class="string">"./movies"</span>))&#123;</span><br><span class="line">        fs.mkdirSync(<span class="string">"./movies"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    allMovie.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.writeFileSync(<span class="string">"./movies/"</span>+item.title+<span class="string">".json"</span>,<span class="built_in">JSON</span>.stringify(item))</span><br><span class="line">    &#125;)   </span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装方法 获取分类数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCategoryData</span>(<span class="params">RE,data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//临时存放数据</span></span><br><span class="line">    <span class="keyword">let</span> myData=[]</span><br><span class="line">    <span class="comment">//执行正则</span></span><br><span class="line">    <span class="comment">//需要进行循环获取数据</span></span><br><span class="line">    <span class="keyword">while</span> (RE.exec(data)) &#123;</span><br><span class="line">        <span class="keyword">let</span> Data = RE.exec(data)</span><br><span class="line">        <span class="comment">//console.log(data)</span></span><br><span class="line">        <span class="comment">//console.log(data[1],data[2])     //每个(*.?)的内容都可以提取</span></span><br><span class="line">        <span class="keyword">let</span> obj = &#123;</span><br><span class="line">            categoryName: Data[<span class="number">2</span>],</span><br><span class="line">            url: Data[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        myData.push(obj)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回数据</span></span><br><span class="line">    <span class="keyword">return</span> myData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装方法获取当前页面所有电影</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllMovieData</span>(<span class="params">RE,data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//临时存放数据</span></span><br><span class="line">    <span class="keyword">let</span> myData=[]</span><br><span class="line">    <span class="comment">//执行正则</span></span><br><span class="line">    <span class="comment">//需要进行循环获取数据</span></span><br><span class="line">    <span class="keyword">while</span> (RE.exec(data)) &#123;</span><br><span class="line">        <span class="keyword">let</span> Data = RE.exec(data)</span><br><span class="line">        <span class="comment">//console.log(data)</span></span><br><span class="line">        <span class="comment">//console.log(data[1],data[2])     //每个(*.?)的内容都可以提取</span></span><br><span class="line">        <span class="keyword">let</span> obj = &#123;</span><br><span class="line">            title: Data[<span class="number">2</span>],</span><br><span class="line">            url: Data[<span class="number">1</span>],</span><br><span class="line">            img_url:Data[<span class="number">3</span>],</span><br><span class="line">            score:Data[<span class="number">4</span>].replace(<span class="regexp">/[^0-9]/ig</span>,<span class="string">""</span>),</span><br><span class="line">            info:Data[<span class="number">5</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        myData.push(obj)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回数据</span></span><br><span class="line">    <span class="keyword">return</span> myData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>爬取到的内容会自动生成json文件保存到movies文件夹中</strong></p>
<p><img src="https://img.imgdb.cn/item/601030ee3ffa7d37b3b3d445.png" alt="爬取数据截图"></p>
<h2 id="2-爬取表情包图片"><a href="#2-爬取表情包图片" class="headerlink" title="2.爬取表情包图片"></a>2.爬取表情包图片</h2><blockquote>
<p>选择的网站是 <a href="https://www.doutula.com/" target="_blank" rel="noopener">https://www.doutula.com/</a></p>
</blockquote>
<p><img src="https://img.imgdb.cn/item/601031b43ffa7d37b3b433e4.jpg" alt="斗图啦"></p>
<p><strong>这里使用cheerio 包代替复杂的正则表达式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install cheerio</span><br></pre></td></tr></table></figure>

<h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a><strong>代码：</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入第三方 cheerio包 代替正则表达式简化爬取步骤</span></span><br><span class="line"><span class="comment">//cheerio 可以使用JQuery方法来提取爬取到的网页</span></span><br><span class="line"><span class="keyword">let</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>)</span><br><span class="line"><span class="keyword">let</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>)</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//首页链接</span></span><br><span class="line"><span class="keyword">let</span> RequestUrl = <span class="string">"https://www.doutula.com/article/list/?page=1"</span></span><br><span class="line"><span class="comment">//存放所有详情链接</span></span><br><span class="line"><span class="keyword">let</span> DetailUrl = []</span><br><span class="line"><span class="comment">//存放所有图片链接</span></span><br><span class="line"><span class="keyword">let</span> ImgUrl = []</span><br><span class="line"></span><br><span class="line"><span class="comment">//页码</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">1</span></span><br><span class="line"><span class="comment">//最大页数</span></span><br><span class="line"><span class="keyword">let</span> maxPage = <span class="number">20</span></span><br><span class="line"><span class="comment">//主要函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mainF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//爬取20页数据</span></span><br><span class="line">    <span class="comment">//使用延迟函数 减少压力</span></span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        axios.get(<span class="string">"https://www.doutula.com/article/list/?page="</span> + index).then(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//console.log(success.data)</span></span><br><span class="line">            <span class="comment">//存放得到的页面详情数据</span></span><br><span class="line">            DetailUrl = [...DetailUrl, ...getPageDetailUrl(success.data)]</span><br><span class="line">            <span class="built_in">console</span>.log(DetailUrl)</span><br><span class="line">            <span class="comment">//调用创建文件夹方法</span></span><br><span class="line">            mkDir(DetailUrl)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据得到详情链接获取详情页面中的数据</span></span><br><span class="line">            <span class="comment">//得到所有图片链接</span></span><br><span class="line">            <span class="comment">//ImgUrl=[...ImgUrl,...getDetailPageIamge(DetailUrl)]</span></span><br><span class="line">            <span class="comment">//console.log(ImgUrl)</span></span><br><span class="line">            getDetailPageIamge(DetailUrl)</span><br><span class="line">            <span class="keyword">if</span> (index &lt;= maxPage) index++</span><br><span class="line">        &#125;, error =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取页面中的详情链接</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageDetailUrl</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> DetailUrl = []</span><br><span class="line">    <span class="comment">//加载页面内容</span></span><br><span class="line">    <span class="keyword">let</span> $ = cheerio.load(data)</span><br><span class="line">    <span class="comment">//获取页面中需要的 a标签 </span></span><br><span class="line">    $(<span class="string">"#home .row .col-sm-9&gt;a"</span>).each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//item 需要转换成JQuery对象才能使用 attr()方法</span></span><br><span class="line">        <span class="keyword">let</span> obj = &#123;</span><br><span class="line">            title: $(item).find(<span class="string">".random_title"</span>).text(),</span><br><span class="line">            detailUrl: $(item).attr(<span class="string">"href"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        DetailUrl.push(obj)</span><br><span class="line">        <span class="comment">//console.log($(item).attr("href"))</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> DetailUrl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取页面详情图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDetailPageIamge</span>(<span class="params">Url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> imgUrl = []</span><br><span class="line">    <span class="comment">//对每个链接进行循环 获取详情页面的所有图片</span></span><br><span class="line">    Url.forEach(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//封装每个详情页面</span></span><br><span class="line">        <span class="keyword">let</span> OBJ = &#123;&#125;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> axios.get(item.detailUrl)</span><br><span class="line">        <span class="keyword">let</span> $ = cheerio.load(res.data)</span><br><span class="line">        <span class="comment">//设置选择器</span></span><br><span class="line">        <span class="keyword">let</span> Dom3 = $(<span class="string">".container_ .container .row .col-sm-9 .list-group-item .pic-title&gt;div&gt;.glyphicon"</span>)</span><br><span class="line">        <span class="keyword">let</span> Dom1 = $(<span class="string">".container_ .container .row .col-sm-9 .list-group-item .pic-title&gt;h1&gt;a"</span>)</span><br><span class="line">        <span class="keyword">let</span> Dom2 = $(<span class="string">".container_ .container .row .col-sm-9 .list-group-item .pic-content&gt;.artile_des&gt;table&gt;tbody&gt;tr&gt;td&gt;a&gt;img"</span>)</span><br><span class="line">        OBJ.title = $(Dom1).text() + $(Dom3).text()</span><br><span class="line">        OBJ.img = []</span><br><span class="line">        Dom2.each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;</span><br><span class="line">                img_Url: $(item).attr(<span class="string">"src"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            OBJ.img.push(obj)</span><br><span class="line">            <span class="comment">//console.log($(item).attr("src"))</span></span><br><span class="line">            <span class="comment">//console.log(obj)</span></span><br><span class="line">        &#125;)</span><br><span class="line">        downloadImage(OBJ)</span><br><span class="line">        imgUrl.push(OBJ)</span><br><span class="line">        <span class="comment">//console.log(imgUrl)       </span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mkDir</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"正在创建文件夹..."</span>)</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(<span class="string">"./img"</span>)) &#123;</span><br><span class="line">        fs.mkdirSync(<span class="string">"./img"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    data.forEach(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!fs.existsSync(<span class="string">"./img/"</span> + item.title)) &#123;</span><br><span class="line">            <span class="keyword">let</span> error=<span class="keyword">await</span> fs.mkdir(<span class="string">"./img/"</span> + item.title)</span><br><span class="line">            <span class="keyword">if</span> (error) <span class="keyword">throw</span> err</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"创建所有文件夹成功,创建了"</span> + i + <span class="string">"个文件夹"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadImage</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log(data.title)</span></span><br><span class="line">    <span class="comment">//遍历每张图片</span></span><br><span class="line">    data.img.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求图片需要设置响应类型为 流</span></span><br><span class="line">        axios.get(item.img_Url, &#123; <span class="attr">responseType</span>: <span class="string">"stream"</span> &#125;).then(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> extN = path.extname(item.img_Url)</span><br><span class="line">            <span class="comment">//创建写入流</span></span><br><span class="line">            <span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">"./img/"</span> + data.title + <span class="string">"/"</span> + data.title + <span class="string">"-"</span> + index + extN)</span><br><span class="line">            <span class="comment">//创建读取管道</span></span><br><span class="line">            success.data.pipe(ws)</span><br><span class="line">            <span class="comment">//console.log(success.data)</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"成功写入一张图片: "</span> + <span class="string">"./img/"</span> + data.title + <span class="string">"/"</span> + data.title + <span class="string">"-"</span> + index + extN)</span><br><span class="line">            <span class="comment">//关闭写入流</span></span><br><span class="line">            success.data.on(<span class="string">"close"</span>, () =&gt; &#123;</span><br><span class="line">                ws.close()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, error =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用主函数</span></span><br><span class="line">mainF()</span><br></pre></td></tr></table></figure>

<p><img src="https://img.imgdb.cn/item/601032f33ffa7d37b3b4b723.jpg" alt="爬取到的表情包数据"></p>
<h3 id="Bug："><a href="#Bug：" class="headerlink" title="Bug："></a>Bug：</h3><p><strong>当创建文件夹路径出错时会终止程序</strong></p>
<p><img src="https://img.imgdb.cn/item/6010341a3ffa7d37b3b53be6.jpg" alt="报错"></p>
<h2 id="3-爬取歌曲"><a href="#3-爬取歌曲" class="headerlink" title="3.爬取歌曲"></a>3.爬取歌曲</h2><blockquote>
<p>爬取网易云音乐</p>
</blockquote>
<h3 id="3-1右键选择查看框架源代码"><a href="#3-1右键选择查看框架源代码" class="headerlink" title="3.1右键选择查看框架源代码"></a>3.1右键选择查看框架源代码</h3><p><img src="https://img.imgdb.cn/item/60117a9b3ffa7d37b342b152.png" alt="右键查看框架源代码"></p>
<h3 id="3-2需要的数据都在这"><a href="#3-2需要的数据都在这" class="headerlink" title="3.2需要的数据都在这"></a>3.2<strong>需要的数据都在这</strong></h3><p><img src="https://img.imgdb.cn/item/60117b5a3ffa7d37b34302f6.png" alt="需要的数据"></p>
<h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>)</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">let</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>)</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="comment">//存放获取到的歌曲信息</span></span><br><span class="line"><span class="keyword">let</span> songs = []</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬取网易云音乐热歌榜单内容  https://music.163.com/#/discover/toplist?id=3778678</span></span><br><span class="line"><span class="comment">//下面榜单数据id可能会更换、以官网为准</span></span><br><span class="line"><span class="keyword">let</span> discover =[</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">'飙升榜'</span>, <span class="attr">id</span>: <span class="number">19723756</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">'新歌榜'</span>, <span class="attr">id</span>: <span class="number">3779629</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">'原创榜'</span>, <span class="attr">id</span>: <span class="number">2884035</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">'热歌榜'</span>, <span class="attr">id</span>: <span class="number">3778678</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mainF</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//爬取热歌榜</span></span><br><span class="line">    <span class="comment">//需要使用查看网页框架中的链接  去掉#符号</span></span><br><span class="line">    <span class="keyword">let</span> baseUrl = <span class="string">"https://music.163.com/discover/toplist?id="</span> + query[<span class="number">3</span>].id</span><br><span class="line">    <span class="comment">//设置请求头</span></span><br><span class="line">    <span class="comment">//let Header=&#123;"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3741.400 QQBrowser/10.5.3863.400"&#125;</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> axios.get(baseUrl)</span><br><span class="line">    <span class="keyword">let</span> $ = cheerio.load(res.data)</span><br><span class="line">    <span class="comment">// console.log(res.data)</span></span><br><span class="line">    <span class="comment">//获取a标签</span></span><br><span class="line">    <span class="keyword">let</span> dom = $(<span class="string">".f-hide&gt;li&gt;a"</span>)</span><br><span class="line">    dom.each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> obj = &#123;</span><br><span class="line">            title: $(item).text(),</span><br><span class="line">            url: $(item).attr(<span class="string">"href"</span>),</span><br><span class="line">            id: $(item).attr(<span class="string">"href"</span>).replace(<span class="regexp">/[^\d]/g</span>, <span class="string">""</span>)   <span class="comment">//使用正则去掉非数字</span></span><br><span class="line">        &#125;</span><br><span class="line">        songs.push(obj)</span><br><span class="line">        <span class="comment">// console.log(obj)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    getSongs(songs)</span><br><span class="line">    <span class="comment">//console.log(res.data)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据获取到的歌曲id去请求歌曲资源  然后下载到本地</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSongs</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num=<span class="number">0</span></span><br><span class="line">    <span class="comment">// http://music.163.com/song/media/outer/url?id=   在线播放音乐的链接</span></span><br><span class="line">    <span class="keyword">let</span> getSongsUrl = <span class="string">"http://music.163.com/song/media/outer/url?id="</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"一共有："</span>+data.length+<span class="string">"首歌曲"</span>)</span><br><span class="line">    <span class="comment">//方便调试 只爬10首</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        axios.get(getSongsUrl + data[i].id,&#123;<span class="attr">responseType</span>:<span class="string">"stream"</span>&#125;).then(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 创建文件夹 如果没有的话</span></span><br><span class="line">            <span class="keyword">if</span> (!fs.existsSync(<span class="string">"./songs"</span>)) &#123;</span><br><span class="line">                fs.mkdirSync(<span class="string">"./songs"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建写入流</span></span><br><span class="line">            <span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">"./songs/"</span> + data[i].title + <span class="string">".mp3"</span>)</span><br><span class="line">            <span class="comment">//使用管道流生成文件</span></span><br><span class="line">            success.data.pipe(ws)</span><br><span class="line">            <span class="comment">//读取流关闭时执行下面操作</span></span><br><span class="line">            success.data.on(<span class="string">"close"</span>, () =&gt; &#123;</span><br><span class="line">                num++</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"写入成功"</span>+num+<span class="string">"首,歌曲名为："</span>+data[i].title+<span class="string">".mp3"</span>)</span><br><span class="line">                ws.close()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, error =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"错误,歌曲名为："</span>+data[i].title+<span class="string">".mp3"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用主函数</span></span><br><span class="line">mainF(discover)</span><br></pre></td></tr></table></figure>

<p><strong>目录结构：</strong></p>
 <div align=left><img  src="https://img.imgdb.cn/item/60117c7b3ffa7d37b3438b67.png"/></div>

<p><strong>终端：</strong></p>
 <div align=left><img  src="https://img.imgdb.cn/item/60117cce3ffa7d37b343aae8.png"/></div>



<h2 id="4-使用前端神器puppeteer做爬虫"><a href="#4-使用前端神器puppeteer做爬虫" class="headerlink" title="4.使用前端神器puppeteer做爬虫"></a>4.使用前端神器puppeteer做爬虫</h2><blockquote>
<p>Puppeteer 是一个控制 headless Chrome 的 Node.js API 。它是一个 Node.js 库，通过 <a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noopener">DevTools 协议</a>提供了一个高级的 API 来控制 <a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="noopener">headless</a> Chrome。它还可以配置为使用完整的（非 headless）Chrome。</p>
<p>在浏览器中手动完成的大多数事情都可以通过使用 Puppeteer 完成。</p>
</blockquote>
<p><strong>安装puppeteer库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm instal puppeteer</span><br></pre></td></tr></table></figure>

<h3 id="4-1爬取猫眼电影热映电影的数据"><a href="#4-1爬取猫眼电影热映电影的数据" class="headerlink" title="4.1爬取猫眼电影热映电影的数据"></a>4.1爬取猫眼电影热映电影的数据</h3><p><img src="https://img.imgdb.cn/item/6017eda93ffa7d37b3f46005.png" alt="正在热映"></p>
<blockquote>
<p>直接使用axios来爬取比较困难，此网站有滑块验证</p>
<p>使用puppeteer中的鼠标事件 可以模拟拖动以破解验证码(此网站验证码缺口出现位置不是随机的比较简单)</p>
</blockquote>
<p><img src="https://img.imgdb.cn/item/6017ee1d3ffa7d37b3f4932d.png" alt="滑块验证"></p>
<blockquote>
<p>滑块的内容在iframe框架中，无法直接获取dom</p>
</blockquote>
<p><img src="https://img.imgdb.cn/item/6017ee973ffa7d37b3f4be9d.png" alt="iframe"></p>
<h3 id="4-2代码"><a href="#4-2代码" class="headerlink" title="4.2代码"></a>4.2代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入puppeteer库</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">"puppeteer"</span>)</span><br><span class="line"><span class="comment">//导入自定义写入模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; writeJson &#125; = <span class="built_in">require</span>(<span class="string">"./write"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬取猫眼电影 正在热映的电影数据</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">"https://maoyan.com"</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mainF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">        <span class="comment">//是否开启无头浏览器模式</span></span><br><span class="line">        headless: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//设置可视区域大小</span></span><br><span class="line">        defaultViewport: &#123;</span><br><span class="line">            width: <span class="number">1200</span>,</span><br><span class="line">            height: <span class="number">900</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 获取跨域iframe中的内容  关键</span></span><br><span class="line">        args: [</span><br><span class="line">            <span class="string">'--disable-web-security'</span>,</span><br><span class="line">            <span class="string">'--disable-features=IsolateOrigins,site-per-process'</span>, <span class="comment">// 很关键...</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">//放慢速度</span></span><br><span class="line">        <span class="comment">//   slowMo:100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> bowser = <span class="keyword">await</span> puppeteer.launch(option)</span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> bowser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(baseUrl)</span><br><span class="line">    <span class="comment">//等待全部按钮加载完成</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">".panel-header&gt;.panel-more&gt;a"</span>)</span><br><span class="line">    <span class="comment">//获取 全部 按钮 的dom</span></span><br><span class="line">    <span class="comment">//注意这里 的这个类被用到多次</span></span><br><span class="line">    <span class="keyword">let</span> btn = <span class="keyword">await</span> page.$$(<span class="string">".panel-header&gt;.panel-more"</span>)</span><br><span class="line">    <span class="comment">//跳转到正在热映的全部电影 2正在热映 3即将上映</span></span><br><span class="line">    <span class="keyword">await</span> btn[<span class="number">2</span>].click()</span><br><span class="line">    <span class="comment">//等待路由跳转完成</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForNavigation()</span><br><span class="line">    <span class="comment">//等待电影区块加载完成</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">".movie-list&gt;dd"</span>)</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">".movie-list&gt;dd&gt;.movie-item.film-channel&gt;a&gt;.movie-poster&gt;img:last-child"</span>)  </span><br><span class="line">    <span class="comment">//存放所有数据</span></span><br><span class="line">    <span class="keyword">let</span> totalData = <span class="keyword">await</span> page.$$<span class="built_in">eval</span>(<span class="string">".movie-list&gt;dd"</span>, el =&gt; &#123;</span><br><span class="line">        <span class="comment">//回调函数中无法直接使用外部变量</span></span><br><span class="line">        <span class="keyword">let</span> totalData = []</span><br><span class="line">        el.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//标题 </span></span><br><span class="line">            <span class="keyword">let</span> titleDom = item.querySelector(<span class="string">".channel-detail.movie-item-title"</span>)</span><br><span class="line">            <span class="comment">//评分</span></span><br><span class="line">            <span class="keyword">let</span> scoreDom = item.querySelector(<span class="string">".channel-detail.channel-detail-orange"</span>)</span><br><span class="line">            <span class="comment">//详情</span></span><br><span class="line">            <span class="keyword">let</span> detailDom = item.querySelector(<span class="string">".movie-item.film-channel&gt;a"</span>)</span><br><span class="line">            <span class="comment">//图片链接</span></span><br><span class="line">            <span class="keyword">let</span> imgDom = item.querySelector(<span class="string">".movie-item.film-channel&gt;a&gt;.movie-poster&gt;img:last-child"</span>)</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;</span><br><span class="line">                title: titleDom.getAttribute(<span class="string">"title"</span>),</span><br><span class="line">                score: scoreDom.innerHTML === <span class="string">"暂无评分"</span> ? <span class="string">'暂无评分'</span> : scoreDom.innerHTML.replace(<span class="regexp">/\D/g</span>, <span class="string">""</span>),</span><br><span class="line">                <span class="comment">//图片属性 因为懒加载 所以链接属性会不同 src</span></span><br><span class="line">                img_Url: imgDom.getAttribute(<span class="string">"data-src"</span>),</span><br><span class="line">                detail_Url: detailDom.getAttribute(<span class="string">"href"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obj.score !== <span class="string">"暂无评分"</span>) &#123;</span><br><span class="line">                obj.score = obj.score[<span class="number">0</span>] + <span class="string">"."</span> + obj.score[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            totalData.push(obj)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> totalData</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(totalData.length)</span><br><span class="line">    <span class="comment">//关闭首页的浏览器</span></span><br><span class="line">    bowser.close()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历获取到的所有内容 然后点击</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; totalData.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> bowser = <span class="keyword">await</span> puppeteer.launch(option)</span><br><span class="line">        <span class="keyword">let</span> page = <span class="keyword">await</span> bowser.newPage()</span><br><span class="line">        <span class="comment">//打开 详情页面 可能需要人机验证</span></span><br><span class="line">        <span class="keyword">await</span> page.goto(baseUrl + totalData[i].detail_Url)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理滑块验证  验证区域加载的是iframe框架</span></span><br><span class="line">        <span class="keyword">let</span> url = page.url()</span><br><span class="line">        <span class="comment">//console.log(url)</span></span><br><span class="line">        <span class="comment">//表示跳转到了验证页面 破解滑块验证 只能破解有规律的 缺口出现位置差不多的 随机缺口未实现</span></span><br><span class="line">        <span class="keyword">if</span> (url.includes(<span class="string">"https://verify.maoyan.com/"</span>)) &#123;</span><br><span class="line">            <span class="comment">//等待框架</span></span><br><span class="line">            <span class="keyword">await</span> page.waitForSelector(<span class="string">"#tcaptcha_transform iframe"</span>)</span><br><span class="line">            <span class="comment">//获取框架</span></span><br><span class="line">            <span class="keyword">const</span> elementHandle = <span class="keyword">await</span> page.$(<span class="string">'#tcaptcha_transform iframe'</span>);</span><br><span class="line">            <span class="comment">//获取框架内容</span></span><br><span class="line">            <span class="keyword">const</span> frame = <span class="keyword">await</span> elementHandle.contentFrame();</span><br><span class="line">            <span class="comment">//等待框架跳转</span></span><br><span class="line">            <span class="keyword">await</span> frame.waitForNavigation()</span><br><span class="line">            <span class="comment">//获取滑块dom</span></span><br><span class="line">            <span class="keyword">let</span> thumb = <span class="keyword">await</span> frame.$(<span class="string">"#tcaptcha_drag_thumb"</span>)</span><br><span class="line">            <span class="comment">//获取滑块的位置信息</span></span><br><span class="line">            <span class="keyword">let</span> thumbPosInfo = <span class="keyword">await</span> thumb.boundingBox()</span><br><span class="line">            <span class="built_in">console</span>.log(thumbPosInfo.x, thumbPosInfo.y, thumbPosInfo.width, thumbPosInfo.height)</span><br><span class="line">            <span class="comment">//鼠标移动到此位置</span></span><br><span class="line">            <span class="keyword">await</span> page.mouse.move(thumbPosInfo.x + <span class="number">30</span>, thumbPosInfo.y);</span><br><span class="line">            <span class="comment">// 按下鼠标</span></span><br><span class="line">            <span class="keyword">await</span> page.mouse.down();</span><br><span class="line">            <span class="comment">//获取进度条宽度</span></span><br><span class="line">            <span class="keyword">let</span> track = <span class="keyword">await</span> frame.$(<span class="string">".tc-drag-track"</span>)</span><br><span class="line">            <span class="keyword">let</span> trackPosInfo = <span class="keyword">await</span> track.boundingBox()</span><br><span class="line">            <span class="built_in">console</span>.log(trackPosInfo.x, trackPosInfo.y, trackPosInfo.width, trackPosInfo.height)</span><br><span class="line">            <span class="comment">// 一点点移动鼠标</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; trackPosInfo.width - <span class="number">54</span> - thumbPosInfo.width; i++) &#123;</span><br><span class="line">                <span class="keyword">await</span> page.mouse.move(thumbPosInfo.x + <span class="number">30</span> + i, thumbPosInfo.y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//松开鼠标</span></span><br><span class="line">            <span class="keyword">await</span> page.mouse.up();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待需要的内容加载</span></span><br><span class="line">        <span class="keyword">await</span> page.waitForSelector(<span class="string">".movie-brief-container&gt;.ename.ellipsis"</span>)</span><br><span class="line">        <span class="comment">//获取我们需要的内容</span></span><br><span class="line">        <span class="keyword">let</span> enName = <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">".movie-brief-container&gt;.ename.ellipsis"</span>, el =&gt; el.innerHTML)</span><br><span class="line">        <span class="keyword">let</span> type = <span class="keyword">await</span> page.$$<span class="built_in">eval</span>(<span class="string">".movie-brief-container&gt;ul&gt;li&gt;a"</span>, el =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> type = []</span><br><span class="line">            el.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">                type.push(item.innerHTML)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> type</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> movieLength = <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">".movie-brief-container&gt;ul&gt;li:nth-child(2)"</span>, el =&gt; el.innerText)</span><br><span class="line">        <span class="keyword">let</span> timeAndAdress = <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">".movie-brief-container&gt;ul&gt;li:last-child"</span>, el =&gt; el.innerHTML)</span><br><span class="line">        <span class="keyword">let</span> synopsis = <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">".mod-content&gt;.dra"</span>, el =&gt; el.innerHTML)</span><br><span class="line">        <span class="keyword">let</span> bigImg_Url = <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">".celeInfo-left&gt;.avatar-shadow&gt;img"</span>, el =&gt; el.getAttribute(<span class="string">"src"</span>))</span><br><span class="line">        <span class="comment">//封装</span></span><br><span class="line">        <span class="keyword">let</span> obj = &#123;</span><br><span class="line">            enName,</span><br><span class="line">            type: type,</span><br><span class="line">            movieLength,</span><br><span class="line">            timeAndAdress,</span><br><span class="line">            synopsis,</span><br><span class="line">            bigImg_Url</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//合并对象</span></span><br><span class="line">        totalData[i] = &#123; ...totalData[i], ...obj &#125;</span><br><span class="line">        <span class="comment">//调用自定义写入模块 写入json</span></span><br><span class="line">        writeJson(totalData[i])</span><br><span class="line">        <span class="comment">//完成一个页面就关闭浏览器</span></span><br><span class="line">        bowser.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用主函数</span></span><br><span class="line">mainF()</span><br></pre></td></tr></table></figure>

<p><strong>自定义json写入模块 write.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义 写入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeJson</span>(<span class="params">myJsonData</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果存在就读取</span></span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(<span class="string">"./movie.json"</span>)) &#123;</span><br><span class="line">        jsonData = fs.readFileSync(<span class="string">"./movie.json"</span>)</span><br><span class="line">        <span class="comment">// console.log(jsonData)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">JSON</span>.parse(jsonData) === <span class="string">"object"</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"是json"</span>)</span><br><span class="line">            jsonData = <span class="built_in">JSON</span>.parse(jsonData)   <span class="comment">//转成对象</span></span><br><span class="line">            jsonData = [...jsonData,myJsonData]  <span class="comment">//合并数据</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">//为其他数据 或者空 直接覆盖</span></span><br><span class="line">            jsonData =[myJsonData]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//不存在 就直接写入</span></span><br><span class="line">        jsonData =[myJsonData]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i=jsonData.length</span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    jsonData = <span class="built_in">JSON</span>.stringify(jsonData)</span><br><span class="line">    <span class="comment">//获取一个完成</span></span><br><span class="line">    fs.writeFileSync(<span class="string">"./movie.json"</span>, jsonData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"写入json数据成功！"</span> + i + <span class="string">"个"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抛出方法</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    writeJson</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3完成截图"><a href="#4-3完成截图" class="headerlink" title="4.3完成截图"></a>4.3完成截图</h3><p><img src="https://img.imgdb.cn/item/6017f05c3ffa7d37b3f572b2.jpg" alt="json截图"></p>
<h3 id="4-4存在问题"><a href="#4-4存在问题" class="headerlink" title="4.4存在问题"></a>4.4存在问题</h3><p><strong>1.只能获取全部数据中的一页数据，如果有多页获取后面的数据未能获取</strong></p>
<p><strong>2.json会写入重复数据，完成后需要去重</strong></p>
<p><strong>去重代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="comment">//直接使用 node 命令运行 进行去重</span></span><br><span class="line"><span class="comment">//对获取到的数据去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mainF</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fs.existsSync(<span class="string">"./movie.json"</span>))&#123;</span><br><span class="line">        <span class="keyword">let</span> jsonData=fs.readFileSync(<span class="string">"./movie.json"</span>)</span><br><span class="line">        jsonData=<span class="built_in">JSON</span>.parse(jsonData)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"去重前有"</span>+jsonData.length+<span class="string">"条数据"</span>)</span><br><span class="line">        jsonData=quchong(jsonData)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"去重后有"</span>+jsonData.length+<span class="string">"条数据"</span>)</span><br><span class="line">        jsonData=<span class="built_in">JSON</span>.stringify(jsonData)</span><br><span class="line">        fs.writeFileSync(<span class="string">"./movie.json"</span>,jsonData)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"去重完成！"</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"未找到源数据！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quchong</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> array = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> isChage = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> z = <span class="number">0</span>; z &lt; array.length; z++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i][<span class="string">'title'</span>] == array[z][<span class="string">'title'</span>]) &#123;</span><br><span class="line">                isChage = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isChage) &#123;</span><br><span class="line">            array.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用主函数</span></span><br><span class="line">mainF()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli书城项目的一些笔记</title>
    <url>/2020/09/03/vue-cli%E4%B9%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Vue书城项目的一些笔记"><a href="#Vue书城项目的一些笔记" class="headerlink" title="Vue书城项目的一些笔记"></a>Vue书城项目的一些笔记</h1><h2 id="1-Vuecli项目创建"><a href="#1-Vuecli项目创建" class="headerlink" title="1.Vuecli项目创建"></a>1.Vuecli项目创建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create vue-imooc-ebook --通过vue-cli创建项目</span><br><span class="line">npm run serve --本地运行服务</span><br><span class="line">cnpm run build  --打包</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-开发环境和生产环境的配置"><a href="#2-开发环境和生产环境的配置" class="headerlink" title="2.开发环境和生产环境的配置"></a>2.开发环境和生产环境的配置</h2><p>打包后 直接打开index.html 会报错–找不到路径<br>在根目录添加配置文件  <strong>vue.config.js</strong></p>
<p>配置文件代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">//禁用ESlint</span></span><br><span class="line">    lintOnSave: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 根据环境更改路径名</span></span><br><span class="line">    publicPath:process.env.NODE_ENV ===<span class="string">"production"</span> ? <span class="string">"./"</span>:<span class="string">"/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-导入epubjs包"><a href="#3-导入epubjs包" class="headerlink" title="3.导入epubjs包"></a>3.导入epubjs包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i --save epubjs</span><br></pre></td></tr></table></figure>

<h2 id="4-在-eslintrc-js-中的rules-加入-指令’indent’-‘off’-以关闭缩进判断"><a href="#4-在-eslintrc-js-中的rules-加入-指令’indent’-‘off’-以关闭缩进判断" class="headerlink" title="4. 在 .eslintrc.js 中的rules 加入 指令’indent’: ‘off’  以关闭缩进判断"></a>4. 在 .eslintrc.js 中的rules 加入 指令’indent’: ‘off’  以关闭缩进判断</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">    <span class="string">'no-console'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'warn'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'warn'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'indent'</span>: <span class="string">'off'</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-安装sass"><a href="#5-安装sass" class="headerlink" title="5.安装sass"></a>5.安装sass</h2><p>-dev 可以把sass放在”devDependencies”中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i --save-dev node-sass sass-loader</span><br></pre></td></tr></table></figure>

<h2 id="6-rem适配"><a href="#6-rem适配" class="headerlink" title="6.rem适配"></a>6.rem适配</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基准值 html 的 fontSize 最大设置为50px</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>,()=&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> html=<span class="built_in">document</span>.querySelector(<span class="string">"html"</span>);</span><br><span class="line">  <span class="keyword">let</span> fontSize=<span class="built_in">window</span>.innerWidth/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置fontSize上限为50px</span></span><br><span class="line">  fontSize=fontSize &gt; <span class="number">50</span>? <span class="number">50</span>:fontSize; </span><br><span class="line">  html.style.fontSize=fontSize+<span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//子项目字体设置rem单位</span></span><br><span class="line">$ratio: <span class="number">375</span>/<span class="number">10</span>;</span><br><span class="line">@<span class="function"><span class="keyword">function</span> <span class="title">px2rem</span>(<span class="params">$px</span>)</span>&#123;</span><br><span class="line">    @<span class="keyword">return</span> $px / $ratio+rem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$px 为px单位的字体大小 转换为rem</span></span><br></pre></td></tr></table></figure>

<h2 id="7-安装vue远程调试工具"><a href="#7-安装vue远程调试工具" class="headerlink" title="7.安装vue远程调试工具"></a>7.安装vue远程调试工具</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i -g @vue&#x2F;devtools</span><br></pre></td></tr></table></figure>

<p>启动工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue-devtools</span><br></pre></td></tr></table></figure>

<p>然后根据提示在index.html中引入script文件</p>
<h2 id="8-配置NGINX服务器"><a href="#8-配置NGINX服务器" class="headerlink" title="8.配置NGINX服务器"></a>8.配置NGINX服务器</h2><blockquote>
<p>nginx指令<br>需要在cmd下执行<br>nginx   运行<br>nginx -t 验证配置文件是否正确<br>nginx -s stop 停止</p>
</blockquote>
<p><strong>在根目录下的 conf文件夹中的nginx.conf 中配置</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置自己的服务</span></span><br><span class="line"> server&#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">8081</span>;    <span class="comment">#端口号</span></span><br><span class="line">	<span class="attribute">server_name</span> resource;   <span class="comment">#服务器名</span></span><br><span class="line">	<span class="attribute">root</span> ../resource;    <span class="comment">#放置静态文件</span></span><br><span class="line">	<span class="attribute">autoindex</span> <span class="literal">on</span>;     <span class="comment">#获取文件下标</span></span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">add_header</span> Access-Control-Allow-Origin *;  <span class="comment">#支持跨域</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="attribute">add_header</span> Cache-Control <span class="string">"no-cache, must-revalidate"</span>;   <span class="comment">#禁用缓存</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="9-环境变量配置"><a href="#9-环境变量配置" class="headerlink" title="9.环境变量配置"></a>9.环境变量配置</h2><blockquote>
<p>在根目录下创建 .env.development 文件<br>VUE_APP_RES_URL=<a href="http://192.168.X.X:8081" target="_blank" rel="noopener">http://192.168.X.X:8081</a><br>需要以VUE_APP_开头</p>
<p>使用时: process.env.VUE_APP_RES_URL</p>
</blockquote>
<p><strong>配置完成后 需要重启项目</strong></p>
<h2 id="10-使用localStorage库缓存信息"><a href="#10-使用localStorage库缓存信息" class="headerlink" title="10.使用localStorage库缓存信息"></a>10.使用localStorage库缓存信息</h2><p><strong>安装localstorage库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i --save web-storage-cache</span><br></pre></td></tr></table></figure>

<p><strong>使用：</strong></p>
<blockquote>
<p>在utils文件夹中创建 localstorage.js<br>//导入<br>import Storage from “web-storage-cache”</p>
<p>//实例化<br>const localStorage=new Storage()</p>
</blockquote>
<h2 id="11-安装i18n多国语言插件"><a href="#11-安装i18n多国语言插件" class="headerlink" title="11.安装i18n多国语言插件"></a>11.安装i18n多国语言插件</h2><p><strong>安装插件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i --save vue-i18n</span><br></pre></td></tr></table></figure>

<p><strong>使用</strong></p>
<blockquote>
<p>在html中插值</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;$t(&quot;book.selectFont&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取i18n的 当前设定语言</p>
</blockquote>
<p><code>this.$i18n.locale</code></p>
<h2 id="12-CSS小技巧"><a href="#12-CSS小技巧" class="headerlink" title="12.CSS小技巧"></a>12.CSS小技巧</h2><p><strong>文字上方有一片空白</strong><br><strong>可以给最大的父容器设置 font-size:0</strong><br><strong>就可以清除空白</strong></p>
<h2 id="13-对文本超出的处理"><a href="#13-对文本超出的处理" class="headerlink" title="13.对文本超出的处理"></a>13.对文本超出的处理</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;  <span class="comment">/*弹性盒子布局的老式写法*/</span></span><br><span class="line"><span class="selector-tag">box-orient</span><span class="selector-pseudo">:vertical</span> ;  <span class="comment">/*子元素垂直排列*/</span></span><br><span class="line"><span class="selector-tag">line-clamp</span>: 2;   <span class="comment">/*设置显示文本行数 需要结合 其他属性 display: -webkit-box; box-orient；*/</span> <span class="selector-tag">text-overflow</span>；</span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">white-space</span>: <span class="selector-tag">normal</span>;  <span class="comment">/*空白处理 默认自动换行*/</span></span><br><span class="line"><span class="selector-tag">word-break</span>: <span class="selector-tag">keep-all</span>;  <span class="comment">/*设置文本换行处  保留完整单词*/</span></span><br></pre></td></tr></table></figure>

<h2 id="14-树形结构拆成一维数组"><a href="#14-树形结构拆成一维数组" class="headerlink" title="14.树形结构拆成一维数组"></a>14.树形结构拆成一维数组</h2><p><strong>运用 扩展运算符…  合并运算函数 concat</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].concat(...array.map(<span class="function"><span class="params">item</span>=&gt;</span>[].concat(item,...flatten(item.subitems))))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="15-二维数组降维"><a href="#15-二维数组降维" class="headerlink" title="15.二维数组降维"></a>15.二维数组降维</h2><p><strong>二维数组降维方法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两个数组合并</span></span><br><span class="line"><span class="keyword">const</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log([].concat(a,b))  <span class="comment">//成功合并两个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]  <span class="comment">//将二维数组拆分为一维数组</span></span><br><span class="line"><span class="built_in">console</span>.log([].concat.apply([],c))  <span class="comment">//  完成</span></span><br></pre></td></tr></table></figure>

<h2 id="16-Vue事件修饰符"><a href="#16-Vue事件修饰符" class="headerlink" title="16.Vue事件修饰符"></a>16.Vue事件修饰符</h2><blockquote>
<p>vue修饰符<br>.exact  严格限定<br><strong>@keyup.enter.exact=”函数名” 只有按下enter键触发 组合键不触发</strong></p>
</blockquote>
<p><strong>不允许点击  @click.prevent</strong></p>
<h2 id="17-Vue的触摸事件"><a href="#17-Vue的触摸事件" class="headerlink" title="17.Vue的触摸事件"></a>17.Vue的触摸事件</h2><p><strong>触摸事件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@touchmove&#x3D;&quot;move&quot; @touchend&#x3D;&quot;moveEnd&quot;</span><br></pre></td></tr></table></figure>

<h2 id="18-Vue监听事件"><a href="#18-Vue监听事件" class="headerlink" title="18.Vue监听事件"></a>18.Vue监听事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;vue 监听 需要监听的变量名为函数名</span><br><span class="line">watch:&#123;   </span><br><span class="line">      变量名(val)&#123;</span><br><span class="line"></span><br><span class="line">       &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="19-用css画一个三角形"><a href="#19-用css画一个三角形" class="headerlink" title="19.用css画一个三角形"></a>19.用css画一个三角形</h2><p><strong>把宽高设为0 边框宽度放大</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 0;</span><br><span class="line">   <span class="selector-tag">height</span>: 0;</span><br><span class="line">   <span class="selector-tag">border-width</span>: <span class="selector-tag">px2rem</span>(50) <span class="selector-tag">px2rem</span>(10) <span class="selector-tag">px2rem</span>(10) <span class="selector-tag">px2rem</span>(10);</span><br><span class="line">   <span class="selector-tag">border-style</span>: <span class="selector-tag">solid</span>;</span><br><span class="line">   <span class="selector-tag">border-color</span>: <span class="selector-tag">rgb</span>(0, 0, 0) <span class="selector-tag">rgb</span>(0, 0, 0) <span class="selector-tag">transparent</span> <span class="selector-tag">rgb</span>(0, 0, 0);</span><br></pre></td></tr></table></figure>

<h2 id="20-正则表达式"><a href="#20-正则表达式" class="headerlink" title="20.正则表达式"></a>20.正则表达式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;!.*&#x2F;   表示匹配!后面的所有内容</span><br><span class="line">&#x2F;.*!&#x2F;   表示匹配!前面的所有内容</span><br><span class="line">&#x2F;\)$&#x2F;  以)号结尾</span><br><span class="line">^ 限定开始位置</span><br></pre></td></tr></table></figure>

<h2 id="21-用于JS计算真实像素-自适应"><a href="#21-用于JS计算真实像素-自适应" class="headerlink" title="21.用于JS计算真实像素  自适应"></a>21.用于JS计算真实像素  自适应</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">realPx</span>(<span class="params">px</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> maxWidth = <span class="built_in">window</span>.innerWidth &gt; <span class="number">500</span> ? <span class="number">500</span> : <span class="built_in">window</span>.innerWidth  <span class="comment">//最大值为500 是因为app.vue中 缩放为最大50px</span></span><br><span class="line">   <span class="keyword">return</span> px * (maxWidth / <span class="number">375</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="22-鼠标适配"><a href="#22-鼠标适配" class="headerlink" title="22.鼠标适配"></a>22.鼠标适配</h2><blockquote>
<p>适配移动端<br>用鼠标事件</p>
<p>鼠标按下事件<br>@mousedown.left=”onMouseEnter”    .left 限定只能按鼠标左键<br>鼠标移动事件<br>@mousemove.left=”onMouseMove”<br>鼠标松开事件<br>@mouseup.left=”onMouseEnd”</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.-鼠标进入</span></span><br><span class="line"><span class="comment">//2.-鼠标进入后的移动</span></span><br><span class="line"><span class="comment">//3.-鼠标从移动状态松手</span></span><br><span class="line"><span class="comment">//4.-鼠标还原</span></span><br><span class="line">onMouseEnter(e)&#123;</span><br><span class="line">    <span class="comment">//console.log("enter",e)</span></span><br><span class="line">    <span class="keyword">this</span>.mouseState=<span class="number">1</span>   <span class="comment">//标记状态</span></span><br><span class="line">    <span class="keyword">this</span>.mouseStartTime=e.timeStamp   <span class="comment">//记录点击时间</span></span><br><span class="line">    e.preventDefault()  <span class="comment">//组织默认事件</span></span><br><span class="line">    e.stopPropagation()	<span class="comment">//组织冒泡</span></span><br><span class="line">&#125;,</span><br><span class="line">onMouseMove(e)&#123;</span><br><span class="line">    <span class="comment">//鼠标一进入内容区就会触发move事件           </span></span><br><span class="line">    <span class="comment">//处理不同状态 只对2状态进行操作</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.mouseState===<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.mouseState=<span class="number">2</span></span><br><span class="line">        <span class="comment">//console.log("move",e)</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.mouseState===<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> offsetY=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.firstOffsetY)&#123;</span><br><span class="line">            offsetY=e.clientY-<span class="keyword">this</span>.firstOffsetY</span><br><span class="line">            <span class="keyword">this</span>.setOffsetY(offsetY)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.firstOffsetY=e.clientY</span><br><span class="line">        &#125;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        e.stopPropagation()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">onMouseEnd(e)&#123;</span><br><span class="line">    <span class="comment">//console.log("end",e)</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.mouseState===<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setOffsetY(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">this</span>.firstOffsetY=<span class="literal">null</span></span><br><span class="line">        <span class="keyword">this</span>.mouseState=<span class="number">3</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  <span class="comment">//表示按下去 没有滑动直接松开了</span></span><br><span class="line">        <span class="keyword">this</span>.mouseState=<span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> time=e.timeStamp-<span class="keyword">this</span>.mouseStartTime  <span class="comment">//计算点击开始和结束的时间间隔</span></span><br><span class="line">    <span class="keyword">if</span>(time&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="comment">//忽略掉小移动</span></span><br><span class="line">        <span class="keyword">this</span>.mouseState=<span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    e.stopPropagation()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="23-Vue-template注意点"><a href="#23-Vue-template注意点" class="headerlink" title="23.Vue template注意点"></a>23.Vue template注意点</h2><p><strong>在模板 template中引入 别的组件时，组件外层必须有个div</strong></p>
<h2 id="24-异步更新DOM-this-nextTick-方法"><a href="#24-异步更新DOM-this-nextTick-方法" class="headerlink" title="24.异步更新DOM  this.$nextTick( )方法"></a>24.异步更新DOM  this.$nextTick( )方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在DOM渲染完成后 执行回调</span></span><br><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//调用子组件 HotSeachList.vue的reset()方法</span></span><br><span class="line">      <span class="keyword">this</span>.$refs.hotSearch.reset()</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>



<h2 id="25-CSS小技巧：绝对定位居中"><a href="#25-CSS小技巧：绝对定位居中" class="headerlink" title="25.CSS小技巧：绝对定位居中"></a>25.CSS小技巧：绝对定位居中</h2><blockquote>
<p>position:absolute 也可以使用 margin:auto来设置居中</p>
</blockquote>
<p><strong>只需设置:</strong>  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">top</span>: 0;</span><br><span class="line"><span class="selector-tag">left</span>: 0;</span><br><span class="line"><span class="selector-tag">right</span>: 0;</span><br><span class="line"><span class="selector-tag">bottom</span>: 0;</span><br><span class="line"><span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure>

<h2 id="26-CSS翻转动画特效"><a href="#26-CSS翻转动画特效" class="headerlink" title="26.CSS翻转动画特效"></a>26.CSS翻转动画特效</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">transform-orgin:left    //设置元素基点 即设置旋转轴在左边</span><br><span class="line">backface-visibility: hidden;  //背面隐藏 360度旋转时到背面会隐藏</span><br></pre></td></tr></table></figure>

<h2 id="27-在Sass中使用for循环"><a href="#27-在Sass中使用for循环" class="headerlink" title="27.在Sass中使用for循环"></a>27.在Sass中使用for循环</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> to length(<span class="variable">$moves</span>)&#123;</span><br><span class="line">     &amp;<span class="selector-pseudo">:nth-child</span>(#&#123;<span class="variable">$i</span>&#125;)&#123;</span><br><span class="line">     <span class="keyword">@include</span> move(<span class="variable">$i</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="28-Mock-js代替原生XMLRequest"><a href="#28-Mock-js代替原生XMLRequest" class="headerlink" title="28.Mock.js代替原生XMLRequest"></a>28.Mock.js代替原生XMLRequest</h2><p>安装 <code>cnpm i mockjs  --save-dev</code>   </p>
<p>简写 <code>cnpm i mockjs --D</code></p>
<p><strong>在main.js中引入mockjs</strong></p>
<p><strong>注意点：mock 不支持blob对象  支持txt文本</strong></p>
<h2 id="29-安装axios"><a href="#29-安装axios" class="headerlink" title="29.安装axios"></a>29.安装axios</h2><p><code>cnpm i axios --save</code></p>
<h2 id="30-Vue路由跳转"><a href="#30-Vue路由跳转" class="headerlink" title="30.Vue路由跳转"></a>30.Vue路由跳转</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">    path:&quot;&#x2F;store&#x2F;deatil&quot;,        &#x2F;&#x2F;路径</span><br><span class="line">    query:&#123;  		       &#x2F;&#x2F;参数</span><br><span class="line">    fileName:book.fileName,</span><br><span class="line">    category:book.category</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;back()方法  router返回上一级</span><br><span class="line">this.$router.go(-1)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;指定跳转</span><br><span class="line">this.$router.push(&quot;&#x2F;store&#x2F;shelf&quot;)</span><br></pre></td></tr></table></figure>



<h2 id="31-对原本有的方法进行扩展"><a href="#31-对原本有的方法进行扩展" class="headerlink" title="31.对原本有的方法进行扩展"></a>31.对原本有的方法进行扩展</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.pushWithoutDuplicate =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> arg=<span class="built_in">arguments</span>[i]</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.indexOf(arg)===<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.push(arg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</span></span><br><span class="line"><span class="comment">//不匹配返回-1</span></span><br></pre></td></tr></table></figure>



<h2 id="32-安装create-api"><a href="#32-安装create-api" class="headerlink" title="32.安装create-api"></a>32.安装create-api</h2><p><strong>安装</strong></p>
<p><code>cnpm i -S vue-create-api</code></p>
<p><strong>配置</strong></p>
<p><strong>1.在utils文件夹中创建相应js文件</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import CreateAPI from &quot;vue-create-api&quot;</span><br><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line">import Toast from &quot;..&#x2F;components&#x2F;common&#x2F;Toast&quot;</span><br><span class="line"></span><br><span class="line">Vue.use(CreateAPI)</span><br><span class="line"></span><br><span class="line">Vue.createAPI(Toast,true)</span><br></pre></td></tr></table></figure>

<p><strong>2.在main.js中导入创建的js文件</strong></p>
<p><strong>3.使用</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$createToast(&#123;</span><br><span class="line">     $props:&#123;</span><br><span class="line">     text:<span class="string">"hello imooc"</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;).show()</span><br></pre></td></tr></table></figure>

<p><strong>tip：如果报错 需要添加name属性  可以在组件中添加name属性</strong><br><strong>或者 Vue.createAPI(Vue,Toast)</strong></p>
<h2 id="33-安装-localforage-库"><a href="#33-安装-localforage-库" class="headerlink" title="33.安装 localforage 库"></a>33.安装 localforage 库</h2><p><strong>开源的 对indexDB操作的一个库</strong></p>
<p><code>cnpm i -S localforage</code></p>
<h2 id="34-分页算法"><a href="#34-分页算法" class="headerlink" title="34.分页算法"></a>34.分页算法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//钩子函数  异步调用</span></span><br><span class="line"><span class="keyword">this</span>.book.ready.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//分页算法 750字一页根据页面宽度 和字体大小 加字减字                         </span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.book.locations.generate(<span class="number">750</span>*(<span class="built_in">window</span>.innerWidth/<span class="number">375</span>*(getFontSize(<span class="keyword">this</span>.fileName)/<span class="number">16</span>))</span><br><span class="line">&#125;).then(<span class="function"><span class="params">locations</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(locations)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli书城项目准备</title>
    <url>/2020/08/27/vue-cli%E4%B9%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h1><h2 id="1-安装Node-js、npm和Vue-CLI-3-0"><a href="#1-安装Node-js、npm和Vue-CLI-3-0" class="headerlink" title="1. 安装Node.js、npm和Vue CLI 3.0"></a>1. 安装Node.js、npm和Vue CLI 3.0</h2><h3 id="1-1-nvm安装"><a href="#1-1-nvm安装" class="headerlink" title="1.1 nvm安装"></a>1.1 nvm安装</h3><p>nvm是Node.js版本管理工具，可以非常方便的下载和切换Node.js版本，分为两个版本：</p>
<ul>
<li>macOS和Linux版本点击<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">这里</a></li>
<li>Windows版本点击<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">这里</a></li>
</ul>
<p>macOS和Linux版本指令方法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>安装时必须在当前用户根路径下存在<code>.bash_profile</code>文件（该文件的用途是在当用户登录后，加载相应的环境变量），如果不存在该文件，可以手动创建一个，再重新执行上述安装脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>安装成功后会在<code>.bash_profile</code>文件中写入以下内容，以便我们可以直接使用nvm指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export NVM_DIR="$HOME/.nvm"</span><br><span class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh"  # This loads nvm</span><br><span class="line">[ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion"  # This l    oads nvm bash_completion</span><br></pre></td></tr></table></figure>

<p>我们可以重新打开终端令环境变量生效，或使用如下指令令环境变量立即生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>nvm卸载方法很简单，只需要执行如下指令就可以了。我们在<code>.bash_profile</code>中定义了环境变量<code>$NVM_DIR</code>为<code>$HOME/.nvm</code>，<code>$HOME</code>指向用户根目录，<code>$HOME/.nvm</code>表示nvm的安装路径，所以直接删除即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf <span class="string">"<span class="variable">$NVM_DIR</span>"</span></span></span><br></pre></td></tr></table></figure>

<p>执行上述指令后，还要将<code>.bash_profile</code>文件中安装nvm时写入的内容删除即可</p>
<h3 id="1-2-Node-js和npm安装"><a href="#1-2-Node-js和npm安装" class="headerlink" title="1.2 Node.js和npm安装"></a>1.2 Node.js和npm安装</h3><p>安装nvm后我们就可以很方便的管理Node.js版本，安装最新的Node.js版本（安装Node.js的同时会自动安装npm）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure>

<p>安装指定版本Node.js（如安装10.10.0版本）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install 10.10.0</span><br></pre></td></tr></table></figure>

<p>查看本地已经安装的Node.js版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure>

<p>查看所有可用的Node.js版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure>

<p>切换到最新的Node.js版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm use node</span><br></pre></td></tr></table></figure>

<p>切换到指定版本的Node.js（如切换到10.10.0版本）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm use 10.10.0</span><br></pre></td></tr></table></figure>

<p>验证Node.js安装是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line"></span><br><span class="line">v10.10.0</span><br></pre></td></tr></table></figure>

<p>验证npm安装是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm -v</span></span><br><span class="line"></span><br><span class="line">6.4.1</span><br></pre></td></tr></table></figure>

<h3 id="1-3-安装Vue-CLI-3-0环境"><a href="#1-3-安装Vue-CLI-3-0环境" class="headerlink" title="1.3 安装Vue CLI 3.0环境"></a>1.3 安装Vue CLI 3.0环境</h3><p>Vue CLI 3.0官网地址点击<a href="https://cli.vuejs.org" target="_blank" rel="noopener">这里</a>，注意安装Vue CLI 3.0必须安装Node.js 8.9.或更高版本，通过以下指令安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>检查Vue CLI 3.0是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue --version</span></span><br><span class="line"></span><br><span class="line">3.0.5</span><br></pre></td></tr></table></figure>

<h2 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2. 下载源码"></a>2. 下载源码</h2><p>通过git下载完整源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://git.imooc.com/coding-285/vue-imooc-ebook.git</span><br></pre></td></tr></table></figure>

<p>下载后进入源码目录，安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd vue-imooc-ebook</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="3-搭建静态资源服务器"><a href="#3-搭建静态资源服务器" class="headerlink" title="3. 搭建静态资源服务器"></a>3. 搭建静态资源服务器</h2><h3 id="3-1-安装Nginx"><a href="#3-1-安装Nginx" class="headerlink" title="3.1 安装Nginx"></a>3.1 安装Nginx</h3><ul>
<li>Windows版Nginx下载地址点击<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">这里</a></li>
<li>macOS版Nginx需要通过brew进行安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure>

<h3 id="3-2-Nginx配置（以macOS为例）"><a href="#3-2-Nginx配置（以macOS为例）" class="headerlink" title="3.2 Nginx配置（以macOS为例）"></a>3.2 Nginx配置（以macOS为例）</h3><p>查看nginx配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>修改user，将user修改为当前登录用户名，如：当前登录用户为sam，则修改如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  sam owner;</span><br></pre></td></tr></table></figure>

<ul>
<li>在http对象下再增加一个server</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root  &#x2F;Users&#x2F;sam&#x2F;upload;</span><br><span class="line">    autoindex  on;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">      add_header  Access-Control-Allow-Origin *;</span><br><span class="line">      index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里配置项的具体含义如下：</p>
<ul>
<li>listen：监听端口号，最新的macOS系统不允许设置80端口，可以选择8000以上的端口号</li>
<li>server_name：指定虚拟主机的名称</li>
<li>root：资源文件的根路径，必须指向一个文件夹，该路径为资源文件存放的位置，例如用户访问：<code>localhost/book/a.epub</code>，实际访问的资源路径为：<code>/Users/sam/upload/book/a.epub</code></li>
<li>autoindex：是否打开目录浏览功能，如果打开，当我们访问<code>localhost/</code>时，就可以在网页上查看<code>/Users/sam/upload</code>目录下的所有文件</li>
<li>location：路由规则匹配，<code>location /</code>表示匹配所有路由<ul>
<li>add_header：表示在响应头中添加指定内容，这里添加<code>Access-Control-Allow-Origin</code>为<code>*</code>是为了解决前端跨域问题，如果不配置这个选项，前端请求资源时会出现跨域错误，希望详细了解跨域原理的同学可以点击<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">这里</a>学习</li>
<li>index：指定访问根路径时默认访问的资源文件，比如我们访问<code>localhost/</code>，实际Nginx会找到<code>/Users/sam/upload/index.html</code>或<code>/Users/sam/upload/index.htm</code>进行返回</li>
</ul>
</li>
</ul>
<h3 id="3-3-下载资源包"><a href="#3-3-下载资源包" class="headerlink" title="3.3 下载资源包"></a>3.3 下载资源包</h3><ul>
<li>通过百度网盘下载资源包，点击<a href="https://pan.baidu.com/s/1x2N7vl8nd2x6x7FnlQH3Cg" target="_blank" rel="noopener">这里</a>进行下载，提取码: ksjv，下载”慕课网-实战微信读书-资源文件.zip”</li>
<li>下载成功后进行解压</li>
<li>解压后打开文件夹，将其中的epub和book 2个文件夹拷贝到<code>/Users/sam/upload</code>（即Nginx配置文件中root指定的文件夹）路径下<ul>
<li>epub中包含了电子书文件</li>
<li>book中包含了资源文件，如封面、字体、主题样式等</li>
</ul>
</li>
</ul>
<h2 id="4-运行源码"><a href="#4-运行源码" class="headerlink" title="4. 运行源码"></a>4. 运行源码</h2><h3 id="4-1-配置环境变量"><a href="#4-1-配置环境变量" class="headerlink" title="4.1 配置环境变量"></a>4.1 配置环境变量</h3><p>进入源码目录，打开<code>.env.development</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd vue-imooc-ebook</span><br><span class="line">vim .env.development</span><br></pre></td></tr></table></figure>

<p><code>.env.development</code>配置文件内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">VUE_APP_EPUB_URL=http://47.99.166.157/epub</span><br><span class="line">VUE_APP_EPUB_OPF_URL=http://47.99.166.157/epub2</span><br><span class="line">VUE_APP_RES_URL=http://47.99.166.157/book/res</span><br><span class="line">VUE_APP_BASE_URL=http://47.99.166.157:3000</span><br><span class="line">VUE_APP_VOICE_URL=http://47.99.166.157:3000</span><br><span class="line">VUE_APP_BOOK_URL=http://47.99.166.157:3000</span><br></pre></td></tr></table></figure>

<p>我们将静态资源文件路径替换为本地Nginx路径，注意要使用IP地址，不要使用localhost，否则只能在本机访问，而无法通过手机扫码无法访问，如：Nginx服务器的地址为：<a href="http://192.168.31.243，则需要将`.env.development`配置文件改为：">http://192.168.31.243，则需要将`.env.development`配置文件改为：</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">VUE_APP_EPUB_URL=http://192.168.31.243/epub</span><br><span class="line">VUE_APP_EPUB_OPF_URL=http://192.168.31.243/epub2</span><br><span class="line">VUE_APP_RES_URL=http://192.168.31.243/book/res</span><br><span class="line">VUE_APP_BASE_URL=http://47.99.166.157:3000</span><br><span class="line">VUE_APP_VOICE_URL=http://47.99.166.157:3000</span><br><span class="line">VUE_APP_BOOK_URL=http://47.99.166.157:3000</span><br></pre></td></tr></table></figure>

<p>这里另外三个地址<code>VUE_APP_BASE_URL</code>、<code>VUE_APP_VOICE_URL</code>、<code>VUE_APP_BOOK_URL</code>指向演示系统的API，这里可以暂时不做修改，我们会在项目发布一章中为大家详细讲解如何开发一个简单的电子书后台，为前端提供API，实现前后端分离</p>
<h3 id="4-2-运行项目"><a href="#4-2-运行项目" class="headerlink" title="4.2 运行项目"></a>4.2 运行项目</h3><p>通过如下指令运行项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm run dev</span><br></pre></td></tr></table></figure>

<p>运行成功后提示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DONE  Compiled successfully in 3950ms                                      22:25:51</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http:&#x2F;&#x2F;localhost:8080&#x2F; </span><br><span class="line"> - Network: http:&#x2F;&#x2F;192.168.31.243:8080&#x2F;</span><br><span class="line"></span><br><span class="line"> Note that the development build is not optimized.</span><br><span class="line"> To create a production build, run npm run build.</span><br></pre></td></tr></table></figure>

<p>此时我们就可以通过<code>http://192.168.31.243:8080</code>访问站点了</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB API笔记</title>
    <url>/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h1><blockquote>
<p>学习目标：</p>
<p>能够通过ID来获取元素<br>能够通过标签名来获取元素<br>能够通过class来获取元素<br>能够通过选择器来获取元素<br>能够获取body和html元素<br>能够给元素注册事件<br>能够修改元素的内容<br>能够区分innerText和innerHTML的区别<br>能够修改像div这类普通元素的属性<br>能够修改表单元素的属性<br>能够修改元素的样式属性</p>
</blockquote>
<a id="more"></a>
<h2 id="1-1-Web-API介绍"><a href="#1-1-Web-API介绍" class="headerlink" title="1.1. Web API介绍"></a>1.1. Web API介绍</h2><h3 id="1-1-1-API的概念"><a href="#1-1-1-API的概念" class="headerlink" title="1.1.1 API的概念"></a>1.1.1 API的概念</h3><p>API（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，无需理解其内部工作机制细节，只需直接调用使用即可。</p>
<blockquote>
<p>举例解释什么是API。</p>
<p>例如，</p>
<p>​    C语言中有一个函数 fopen()可以打开硬盘上的文件，这个函数对于我们来说，就是一个C语言提供的打开文件的工具。</p>
<p>​    javascript中有一个函数alert()可以在页面弹一个提示框，这个函数就是js提供的一个弹框工具。</p>
<p>这些工具（函数）由编程语言提供，内部的实现已经封装好了，我们只要学会灵活的使用这些工具即可。</p>
</blockquote>
<h3 id="1-1-2-Web-API的概念"><a href="#1-1-2-Web-API的概念" class="headerlink" title="1.1.2 Web  API的概念"></a>1.1.2 Web  API的概念</h3><p>​    Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )。</p>
<p>​    现阶段我们主要针对于浏览器讲解常用的 API , 主要针对浏览器做交互效果。比如我们想要浏览器弹出一个警示框， 直接使用 alert(‘弹出’)</p>
<p>​    MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p>
<p>​    此处的 Web API 特指浏览器提供的一系列API(很多函数或对象方法)，即操作网页的一系列工具。例如：操作html标签、操作页面地址的方法。</p>
<h3 id="1-1-3-API-和-Web-API-总结"><a href="#1-1-3-API-和-Web-API-总结" class="headerlink" title="1.1.3 API 和 Web  API 总结"></a>1.1.3 API 和 Web  API 总结</h3><ol>
<li><p>API 是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了，不必纠结内部如何实现</p>
</li>
<li><p>Web API 主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。</p>
</li>
<li><p>Web API 一般都有输入和输出（函数的传参和返回值），Web API 很多都是方法（函数）</p>
</li>
<li><p>学习 Web API 可以结合前面学习内置对象方法的思路学习</p>
</li>
</ol>
<h2 id="1-2-DOM-介绍"><a href="#1-2-DOM-介绍" class="headerlink" title="1.2. DOM 介绍"></a>1.2. DOM 介绍</h2><h3 id="1-2-1-什么是DOM"><a href="#1-2-1-什么是DOM" class="headerlink" title="1.2.1 什么是DOM"></a>1.2.1 什么是DOM</h3><p>​    文档对象模型（Document Object Model，简称DOM），是 <a href="https://baike.baidu.com/item/W3C" target="_blank" rel="noopener">W3C</a> 组织推荐的处理<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E7%BD%AE%E6%A0%87%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">可扩展标记语言</a>（html或者xhtml）的标准<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">编程接口</a>。</p>
<p>​    W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p>
<blockquote>
<p>DOM是W3C组织制定的一套处理 html和xml文档的规范，所有的浏览器都遵循了这套标准。</p>
</blockquote>
<h3 id="1-2-2-DOM树"><a href="#1-2-2-DOM树" class="headerlink" title="1.2.2. DOM树"></a>1.2.2. DOM树</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550731974575.png" class="" width="1550731974575">

<p>DOM树 又称为文档树模型，把文档映射成树形结构，通过节点对象对其处理，处理的结果可以加入到当前的页面。</p>
<ul>
<li>文档：一个页面就是一个文档，DOM中使用document表示</li>
<li>节点：网页中的所有内容，在文档树中都是节点（标签、属性、文本、注释等），使用node表示</li>
<li>标签节点：网页中的所有标签，通常称为元素节点，又简称为“元素”，使用element表示</li>
</ul>
<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550732362134.png" class="" width="1550732362134">

<h2 id="1-3-获取元素"><a href="#1-3-获取元素" class="headerlink" title="1.3. 获取元素"></a>1.3. 获取元素</h2><p>为什么要获取页面元素？</p>
<p>例如：我们想要操作页面上的某部分(显示/隐藏，动画)，需要先获取到该部分对应的元素，再对其进行操作。</p>
<h3 id="1-3-1-根据ID获取"><a href="#1-3-1-根据ID获取" class="headerlink" title="1.3.1. 根据ID获取"></a>1.3.1. 根据ID获取</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">语法：<span class="built_in">document</span>.getElementById(id)</span><br><span class="line">作用：根据ID获取元素对象</span><br><span class="line">参数：id值，区分大小写的字符串</span><br><span class="line">返回值：元素对象 或 <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"time"</span>&gt;<span class="number">2019</span><span class="number">-9</span><span class="number">-9</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 因为我们文档页面从上往下加载，所以先得有标签 所以我们script写到标签的下面</span></span><br><span class="line"><span class="regexp">        var timer = document.getElementById('time');</span></span><br><span class="line"><span class="regexp">        console.log(timer);</span></span><br><span class="line"><span class="regexp">        console.log(typeof timer);</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法</span></span><br><span class="line"><span class="regexp">        console.dir(timer);</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-根据标签名获取元素"><a href="#1-3-2-根据标签名获取元素" class="headerlink" title="1.3.2. 根据标签名获取元素"></a>1.3.2. 根据标签名获取元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：document.getElementsByTagName(&#39;标签名&#39;) 或者 element.getElementsByTagName(&#39;标签名&#39;) </span><br><span class="line">作用：根据标签名获取元素对象</span><br><span class="line">参数：标签名</span><br><span class="line">返回值：元素对象集合（伪数组，数组元素是元素对象）</span><br></pre></td></tr></table></figure>

<p><strong>案例代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="number">11</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;知否知否，应是等你好久22&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="number">33</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;知否知否，应是等你好久44&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="number">55</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;ul id=<span class="string">"nav"</span>&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;生僻字&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;生僻字&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储的</span></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(lis);</span><br><span class="line">        <span class="built_in">console</span>.log(lis[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 2. 我们想要依次打印里面的元素对象我们可以采取遍历的方式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(lis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. element.getElementsByTagName()  可以得到这个元素里面的某些标签</span></span><br><span class="line">        <span class="keyword">var</span> nav = <span class="built_in">document</span>.getElementById(<span class="string">'nav'</span>); <span class="comment">// 这个获得nav 元素</span></span><br><span class="line">        <span class="keyword">var</span> navLis = nav.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(navLis);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>

<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550733441663.png" class="" width="1550733441663">


<p>注意：getElementsByTagName()获取到是动态集合，即：当页面增加了标签，这个集合中也就增加了元素。</p>
<h3 id="1-3-3-H5新增获取元素方式"><a href="#1-3-3-H5新增获取元素方式" class="headerlink" title="1.3.3. H5新增获取元素方式"></a>1.3.3. H5新增获取元素方式</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550733518278.png" class="" width="1550733518278">

<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550733734425.png" class="" width="1550733734425">

<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;盒子<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="box"&gt;盒子2&lt;/</span>div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"nav"</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;首页&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;产品&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span></span><br><span class="line">        <span class="keyword">var</span> boxs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(boxs);</span><br><span class="line">        <span class="comment">// 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav</span></span><br><span class="line">        <span class="keyword">var</span> firstBox = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(firstBox);</span><br><span class="line">        <span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">'#nav'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(nav);</span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.querySelector(<span class="string">'li'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(li);</span><br><span class="line">        <span class="comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span><br><span class="line">        <span class="keyword">var</span> allBox = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(allBox);</span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(lis);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-4-获取特殊元素（body，html）"><a href="#1-3-4-获取特殊元素（body，html）" class="headerlink" title="1.3.4 获取特殊元素（body，html）"></a>1.3.4 获取特殊元素（body，html）</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550733794816.png" class="" width="1550733794816">

<h2 id="1-4-事件基础"><a href="#1-4-事件基础" class="headerlink" title="1.4. 事件基础"></a>1.4. 事件基础</h2><h3 id="1-4-1-事件概述"><a href="#1-4-1-事件概述" class="headerlink" title="1.4.1. 事件概述"></a>1.4.1. 事件概述</h3><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p>
<p>简单理解： <strong>触发— 响应机制</strong>。</p>
<p>​    网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个 事件，然后去执行某些操作。</p>
<h3 id="1-4-2-事件三要素"><a href="#1-4-2-事件三要素" class="headerlink" title="1.4.2. 事件三要素"></a>1.4.2. 事件三要素</h3><ul>
<li>事件源（谁）：触发事件的元素</li>
<li>事件类型（什么事件）： 例如 click 点击事件</li>
<li>事件处理程序（做啥）：事件触发后要执行的代码(函数形式)，事件处理函数</li>
</ul>
<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">"btn"</span>&gt;唐伯虎&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 点击一个按钮，弹出对话框</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/(1) 事件源 事件被触发的对象   谁  按钮</span></span><br><span class="line"><span class="regexp">        var btn = document.getElementById('btn');</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/(3) 事件处理程序  通过一个函数赋值的方式 完成</span></span><br><span class="line"><span class="regexp">        btn.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">            alert('点秋香');</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-执行事件的步骤"><a href="#1-4-3-执行事件的步骤" class="headerlink" title="1.4.3. 执行事件的步骤"></a>1.4.3. 执行事件的步骤</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550734387056.png" class="" title="1550734387056.png">

<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 执行事件步骤</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 点击div 控制台输出 我被选中了</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1. 获取事件源</span></span><br><span class="line"><span class="regexp">        var div = document.querySelector('div');</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 2.绑定事件 注册事件</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ div.onclick </span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 3.添加事件处理程序 </span></span><br><span class="line"><span class="regexp">        div.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">            console.log('我被选中了');</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-4-常见的鼠标事件"><a href="#1-4-4-常见的鼠标事件" class="headerlink" title="1.4.4. 常见的鼠标事件"></a>1.4.4. 常见的鼠标事件</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550734506084.png" class="" width="1550734506084">

<h3 id="1-4-5-分析事件三要素"><a href="#1-4-5-分析事件三要素" class="headerlink" title="1.4.5. 分析事件三要素"></a>1.4.5. 分析事件三要素</h3><ul>
<li><p>下拉菜单三要素</p>
</li>
<li><p>关闭广告三要素</p>
</li>
</ul>
<h2 id="1-5-操作元素"><a href="#1-5-操作元素" class="headerlink" title="1.5. 操作元素"></a>1.5. 操作元素</h2><p>​    JavaScript的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容、属性等。（注意：这些操作都是通过元素对象的属性实现的）</p>
<h3 id="1-5-1-改变元素内容（获取或设置）"><a href="#1-5-1-改变元素内容（获取或设置）" class="headerlink" title="1.5.1. 改变元素内容（获取或设置）"></a>1.5.1. 改变元素内容（获取或设置）</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550735016756.png" class="" width="1550735016756">

<p><strong>innerText改变元素内容</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;显示当前系统时间&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;某个时间&lt;/</span>div&gt;</span><br><span class="line">    &lt;p&gt;<span class="number">1123</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 当我们点击了按钮，  div里面的文字会发生变化</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1. 获取元素 </span></span><br><span class="line"><span class="regexp">        var btn = document.querySelector('button');</span></span><br><span class="line"><span class="regexp">        var div = document.querySelector('div');</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 2.注册事件</span></span><br><span class="line"><span class="regexp">        btn.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ div.innerText = '2019-6-6';</span></span><br><span class="line"><span class="regexp">            div.innerHTML = getDate();</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        function getDate() &#123;</span></span><br><span class="line"><span class="regexp">            var date = new Date();</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 我们写一个 2019年 5月 1日 星期三</span></span><br><span class="line"><span class="regexp">            var year = date.getFullYear();</span></span><br><span class="line"><span class="regexp">            var month = date.getMonth() + 1;</span></span><br><span class="line"><span class="regexp">            var dates = date.getDate();</span></span><br><span class="line"><span class="regexp">            var arr = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];</span></span><br><span class="line"><span class="regexp">            var day = date.getDay();</span></span><br><span class="line"><span class="regexp">            return '今天是：' + year + '年' + month + '月' + dates + '日 ' + arr[day];</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>innerText和innerHTML的区别</strong></p>
<ul>
<li>获取内容时的区别：</li>
</ul>
<p>​    innerText会去除空格和换行，而innerHTML会保留空格和换行    </p>
<ul>
<li>设置内容时的区别：</li>
</ul>
<p>​    innerText不会识别html，而innerHTML会识别</p>
<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;</span></span><br><span class="line"><span class="regexp">        我是文字</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;123&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ innerText 和 innerHTML的区别 </span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1. innerText 不识别html标签 非标准  去除空格和换行</span></span><br><span class="line"><span class="regexp">        var div = document.querySelector('div');</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ div.innerText = '&lt;strong&gt;今天是：&lt;/</span>strong&gt; <span class="number">2019</span><span class="string">';</span></span><br><span class="line"><span class="string">        // 2. innerHTML 识别html标签 W3C标准 保留空格和换行的</span></span><br><span class="line"><span class="string">        div.innerHTML = '</span>&lt;strong&gt;今天是：&lt;<span class="regexp">/strong&gt; 2019';</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 这两个属性是可读写的  可以获取元素里面的内容</span></span><br><span class="line"><span class="regexp">        var p = document.querySelector('p');</span></span><br><span class="line"><span class="regexp">        console.log(p.innerText);</span></span><br><span class="line"><span class="regexp">        console.log(p.innerHTML);</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-2-常用元素的属性操作"><a href="#1-5-2-常用元素的属性操作" class="headerlink" title="1.5.2. 常用元素的属性操作"></a>1.5.2. 常用元素的属性操作</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550735556297.png" class="" width="1550735556297">

<p><strong>获取属性的值</strong></p>
<blockquote>
<p>元素对象.属性名</p>
</blockquote>
<p><strong>设置属性的值</strong></p>
<blockquote>
<p>元素对象.属性名 = 值</p>
</blockquote>
<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">"ldh"</span>&gt;刘德华&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button id="zxy"&gt;张学友&lt;/</span>button&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">    &lt;img src="images/ldh.jpg" alt="" title="刘德华"&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 修改元素属性  src</span><br><span class="line">        // 1. 获取元素</span><br><span class="line">        var ldh = document.getElementById('ldh');</span><br><span class="line">        var zxy = document.getElementById('zxy');</span><br><span class="line">        var img = document.querySelector('img');</span><br><span class="line">        // 2. 注册事件  处理程序</span><br><span class="line">        zxy.onclick = function() &#123;</span><br><span class="line">            img.src = 'images/zxy.jpg';</span><br><span class="line">            img.title = '张学友思密达';</span><br><span class="line">        &#125;</span><br><span class="line">        ldh.onclick = function() &#123;</span><br><span class="line">            img.src = 'images/ldh.jpg';</span><br><span class="line">            img.title = '刘德华';</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="1-5-3-案例：分时问候"><a href="#1-5-3-案例：分时问候" class="headerlink" title="1.5.3. 案例：分时问候"></a>1.5.3. 案例：分时问候</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550735858049.png" class="" width="1550735858049">

<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550735877145.png" class="" width="1550735877145">

<h3 id="1-5-4-表单元素的属性操作"><a href="#1-5-4-表单元素的属性操作" class="headerlink" title="1.5.4. 表单元素的属性操作"></a>1.5.4. 表单元素的属性操作</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550736039005.png" class="" width="1550736039005">

<p><strong>获取属性的值</strong></p>
<blockquote>
<p>元素对象.属性名</p>
</blockquote>
<p><strong>设置属性的值</strong></p>
<blockquote>
<p>元素对象.属性名 = 值</p>
<p>表单元素中有一些属性如：disabled、checked、selected，元素对象的这些属性的值是布尔型。</p>
</blockquote>
<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" value="输入内容"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1. 获取元素</span></span><br><span class="line"><span class="regexp">        var btn = document.querySelector('button');</span></span><br><span class="line"><span class="regexp">        var input = document.querySelector('input');</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 2. 注册事件 处理程序</span></span><br><span class="line"><span class="regexp">        btn.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 表单里面的值 文字内容是通过 value 来修改的</span></span><br><span class="line"><span class="regexp">            input.value = '被点击了';</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ btn.disabled = true;</span></span><br><span class="line"><span class="regexp">            this.disabled = true;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ this 指向的是事件函数的调用者 btn</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-5-案例：仿京东显示密码"><a href="#1-5-5-案例：仿京东显示密码" class="headerlink" title="1.5.5. 案例：仿京东显示密码"></a>1.5.5. 案例：仿京东显示密码</h3><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550736330331.png" class="" width="1550736330331">

<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550736346822.png" class="" width="1550736346822">

<h3 id="1-5-6-样式属性操作"><a href="#1-5-6-样式属性操作" class="headerlink" title="1.5.6. 样式属性操作"></a>1.5.6. 样式属性操作</h3><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<p><strong>常用方式</strong></p>
<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550736488634.png" class="" width="1550736488634">



<h4 id="方式1：通过操作style属性"><a href="#方式1：通过操作style属性" class="headerlink" title="方式1：通过操作style属性"></a>方式1：通过操作style属性</h4><blockquote>
<p>元素对象的style属性也是一个对象！</p>
<p>元素对象.style.样式属性 = 值;</p>
</blockquote>
<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550736620181.png" class="" width="1550736620181">

<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1. 获取元素</span></span><br><span class="line"><span class="regexp">        var div = document.querySelector('div');</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 2. 注册事件 处理程序</span></span><br><span class="line"><span class="regexp">        div.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ div.style里面的属性 采取驼峰命名法 </span></span><br><span class="line"><span class="regexp">            this.style.backgroundColor = 'purple';</span></span><br><span class="line"><span class="regexp">            this.style.width = '250px';</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="案例：淘宝点击关闭二维码"><a href="#案例：淘宝点击关闭二维码" class="headerlink" title="案例：淘宝点击关闭二维码"></a>案例：淘宝点击关闭二维码</h4><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550736843659.png" class="" width="1550736843659">
<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550736881832.png" class="" width="1550736881832">

<h4 id="案例：循环精灵图背景"><a href="#案例：循环精灵图背景" class="headerlink" title="案例：循环精灵图背景"></a>案例：循环精灵图背景</h4><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550736940082.png" class="" width="1550736940082">

<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550736956754.png" class="" width="1550736956754">

<h4 id="案例：显示隐藏文本框内容"><a href="#案例：显示隐藏文本框内容" class="headerlink" title="案例：显示隐藏文本框内容"></a>案例：显示隐藏文本框内容</h4><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550737006593.png" class="" width="1550737006593">

<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550737019729.png" class="" width="1550737019729">

<h4 id="方式2：通过操作className属性"><a href="#方式2：通过操作className属性" class="headerlink" title="方式2：通过操作className属性"></a>方式2：通过操作className属性</h4><blockquote>
<p>元素对象.className = 值;</p>
<p>因为class是关键字，所有使用className。</p>
</blockquote>
<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550737214510.png" class="" width="1550737214510">

<p><strong>案例代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"first"</span>&gt;文本&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span></span><br><span class="line"><span class="regexp">        var test = document.querySelector('div');</span></span><br><span class="line"><span class="regexp">        test.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ this.style.backgroundColor = 'purple';</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ this.style.color = '#fff';</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ this.style.fontSize = '25px';</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ this.style.marginTop = '100px';</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ this.className = 'change';</span></span><br><span class="line"><span class="regexp">            this.className = 'first change';</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="案例：密码框格式提示错误信息"><a href="#案例：密码框格式提示错误信息" class="headerlink" title="案例：密码框格式提示错误信息"></a>案例：密码框格式提示错误信息</h4><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550737269546.png" class="" width="1550737269546">
<img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550737284218.png" class="" width="1550737284218">

<h2 id="1-6-总结"><a href="#1-6-总结" class="headerlink" title="1.6. 总结"></a>1.6. 总结</h2><img src="/2020/05/20/H5H5-API%E7%AC%94%E8%AE%B0-1/1550737354861.png" class="" width="1550737354861">
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序项目(黑马优购)笔记</title>
    <url>/2021/01/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE-%E9%BB%91%E9%A9%AC%E4%BC%98%E8%B4%AD-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1nE41117BQ?p=130" target="_blank" rel="noopener">微信小程序基础和黑马优购小项目视频(B站)</a></p>
</blockquote>
<h2 id="1-列式编程快捷键"><a href="#1-列式编程快捷键" class="headerlink" title="1. 列式编程快捷键"></a>1. 列式编程快捷键</h2><p><strong>按下鼠标滚轮选中多行，再按Ctrl+D匹配一段文字 以空格结尾</strong></p>
<h2 id="2-原生css使用变量"><a href="#2-原生css使用变量" class="headerlink" title="2. 原生css使用变量"></a>2. 原生css使用变量</h2><h3 id="2-1创建变量"><a href="#2-1创建变量" class="headerlink" title="2.1创建变量"></a>2.1创建变量</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">page</span>&#123;</span><br><span class="line">  <span class="attribute">--themeColor</span>:<span class="number">#eb4450</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2使用变量"><a href="#2-2使用变量" class="headerlink" title="2.2使用变量"></a>2.2使用变量</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">page</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="built_in">var</span>(--themeColor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="3-使用promise对象对小程序请求函数进行封装"><a href="#3-使用promise对象对小程序请求函数进行封装" class="headerlink" title="3.使用promise对象对小程序请求函数进行封装"></a>3.使用promise对象对小程序请求函数进行封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装请求方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Request=<span class="function"><span class="params">params</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            <span class="comment">//解构</span></span><br><span class="line">            ...params,</span><br><span class="line">            success: <span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">                resolve(result)</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">                reject(error)</span><br><span class="line">            &#125;,</span><br><span class="line">            complete: <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Request(&#123; <span class="attr">url</span>: <span class="string">"https://api-hmugo-web.itheima.net/api/public/v1/home/swiperdata"</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        swiperData: success.data.message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, error =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-VSCode快捷小技巧"><a href="#4-VSCode快捷小技巧" class="headerlink" title="4.VSCode快捷小技巧"></a>4.VSCode快捷小技巧</h2><p><strong>快速敲出1到100 100行view</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">view&#123;$&#125;*100</span><br></pre></td></tr></table></figure>

<h2 id="5-使用微信小程序本地缓存"><a href="#5-使用微信小程序本地缓存" class="headerlink" title="5.使用微信小程序本地缓存"></a>5.使用微信小程序本地缓存</h2><p><strong>存放</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存放进缓存中去 这是同步方法 key value</span></span><br><span class="line">     wx.setStorageSync(<span class="string">"cates"</span>,&#123;<span class="attr">time</span>:<span class="built_in">Date</span>.now(),<span class="attr">data</span>:res.data.message&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>取出来</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//key</span></span><br><span class="line"><span class="keyword">const</span> Cates=wx.getStorageSync(<span class="string">"cates"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="6-使用es7的-async和await简化promise调用"><a href="#6-使用es7的-async和await简化promise调用" class="headerlink" title="6.使用es7的 async和await简化promise调用"></a>6.使用es7的 async和await简化promise调用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法名前记得加关键字 </span></span><br><span class="line"><span class="keyword">async</span> getCategoriesData() &#123;</span><br><span class="line">  <span class="comment">// 使用ES7的async 和 await 来简化上面 then 代码</span></span><br><span class="line">  <span class="comment">// res的值为then中的res</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> Request(&#123; <span class="attr">url</span>: <span class="string">"/categories"</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>res得到的是成功的结果，如果需要用到错误的信息 则可以使用 try{}catch(error){}进行捕获</p>
</blockquote>
<h2 id="7-使用拓展运算符…进行数组拼接"><a href="#7-使用拓展运算符…进行数组拼接" class="headerlink" title="7.使用拓展运算符…进行数组拼接"></a>7.使用拓展运算符…进行数组拼接</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用...运算符解决数组拼接 将新获取的goodList和页面data中的goodList进行拼接</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      goodList:[...this.data.goodList,...goodList]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="8-处理多条请求的小技巧"><a href="#8-处理多条请求的小技巧" class="headerlink" title="8.处理多条请求的小技巧"></a>8.处理多条请求的小技巧</h2><blockquote>
<p>需求：在页面发送请求时，显示正在加载的提示，待所有请求完成时(无论成功与否)关闭正在加载的提示</p>
</blockquote>
<p><strong>在请求封装文件中声明全局变量</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明全局变量用于计算请求次数</span></span><br><span class="line"><span class="keyword">let</span> ajaxTimes=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>在请求方法内进行请求次数统计</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Request=<span class="function"><span class="params">params</span>=&gt;</span>&#123;</span><br><span class="line">    ajaxTimes++   <span class="comment">//次数统计</span></span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">        title:<span class="string">"加载中"</span> ,</span><br><span class="line">        mask: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>每完成一个请求就把请求次数减一，待减到0时，即可关闭加载中</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">complete: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">             ajaxTimes--</span><br><span class="line">             <span class="keyword">if</span>(ajaxTimes===<span class="number">0</span>)&#123;</span><br><span class="line">                 <span class="comment">//关闭正在加载的提示  解决 所有请求完成再关闭的小问题</span></span><br><span class="line">                 wx.hideLoading()</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-控制台花式打印"><a href="#9-控制台花式打印" class="headerlink" title="9.控制台花式打印"></a>9.控制台花式打印</h2><p><strong>%c相当于占位符，后面的样式对应每个%c后面的内容</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`%c 总页数为 : %c <span class="subst">$&#123;<span class="keyword">this</span>.totalPage&#125;</span> `</span>,<span class="string">'background: #606060; color: #fff; border-radius: 3px 0 0 3px;'</span>,<span class="string">'background: #1475B2; color: #fff; border-radius: 0 3px 3px 0;'</span>)</span><br></pre></td></tr></table></figure>

<p><strong>效果预览1：</strong></p>
<p><img src="http://itaylorfan.top:8081/blogs/12-30/huashidayinyulan1.png" alt="花式打印预览1"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`%c 没有下一页了!`</span>,<span class="string">'background: red; color: #fff;'</span>)</span><br></pre></td></tr></table></figure>

<p><strong>效果预览2：</strong></p>
<p><img src="http://itaylorfan.top:8081/blogs/12-30/huashidayinyulan2.png" alt="花式打印预览2"></p>
<h2 id="10-VSCode使用-emmet语法中的lorem快速生成一段话"><a href="#10-VSCode使用-emmet语法中的lorem快速生成一段话" class="headerlink" title="10.VSCode使用 emmet语法中的lorem快速生成一段话"></a>10.VSCode使用 emmet语法中的lorem快速生成一段话</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lorem   <span class="comment">/*根据提示敲下回车 直接生成一段话 以供调试*/</span></span><br><span class="line">lorem3  <span class="comment">/*生成三个单词 3可以为任意数字*/</span></span><br></pre></td></tr></table></figure>

<h2 id="11-CSS清除浮动"><a href="#11-CSS清除浮动" class="headerlink" title="11.CSS清除浮动"></a>11.CSS清除浮动</h2><p><strong>使用伪元素清除浮动</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.tab-bar</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"020"</span>;   <span class="comment">/*看不见的空格*/</span></span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">    <span class="attribute">clear</span>: both; </span><br><span class="line">    <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-CSS单行省略和多行省略"><a href="#12-CSS单行省略和多行省略" class="headerlink" title="12.CSS单行省略和多行省略"></a>12.CSS单行省略和多行省略</h2><p><strong>单行省略</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*单行省略*/</span></span><br><span class="line"><span class="comment">/* 让文字一行显示 超出显示省略号 */</span></span><br><span class="line"><span class="comment">/* 超出显示省略号 */</span></span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="comment">/* 空格也不换行 */</span></span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure>

<p><strong>多行省略</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">word-break</span>: <span class="selector-tag">break-all</span>;  <span class="comment">/*单词截取为完整单词*/</span></span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>; 		</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;    <span class="comment">/*盒式布局*/</span></span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 2;   <span class="comment">/*保留两行*/</span></span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;  <span class="comment">/*内容竖直排列*/</span></span><br></pre></td></tr></table></figure>

<h2 id="13-防抖和节流"><a href="#13-防抖和节流" class="headerlink" title="13.防抖和节流"></a>13.防抖和节流</h2><p><a href="https://www.baidu.com/link?url=42hneVrsF_8fYv5flehyqJMCmIWdY2D_SGw4CT3WRko1CujnImtslY1tT1JZxWuBZVbbgrLspu-T6EIlF6QuTa&wd=&eqid=929d0f7800006cbb000000055ff47fd7" target="_blank" rel="noopener">防抖与节流</a></p>
<h3 id="13-1防抖"><a href="#13-1防抖" class="headerlink" title="13.1防抖"></a>13.1防抖</h3><blockquote>
<p><strong>防抖一般用于搜索框</strong>，防止每输入一个字符就发送一次请求</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局定时器</span></span><br><span class="line">Timer:<span class="number">-1</span>,   </span><br><span class="line"><span class="comment">// 防抖处理 阻止过多请求  原本每输入一个字符就会触发查询函数</span></span><br><span class="line">clearTimeout(<span class="keyword">this</span>.Timer)   <span class="comment">//清除上一次的定时器</span></span><br><span class="line"><span class="keyword">this</span>.Timer=setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  <span class="comment">//重新设置定时器</span></span><br><span class="line"><span class="keyword">this</span>.getQueryList(query)  <span class="comment">//调用发送请求函数</span></span><br><span class="line">&#125;, <span class="number">1000</span>)  </span><br><span class="line"><span class="comment">//所以当用户输入停止时才触发查询函数</span></span><br></pre></td></tr></table></figure>

<h3 id="13-2节流"><a href="#13-2节流" class="headerlink" title="13.2节流"></a>13.2节流</h3><blockquote>
<p>节流一般用于下拉刷新和下拉加载中</p>
</blockquote>
<h2 id="报错相关"><a href="#报错相关" class="headerlink" title="报错相关"></a>报错相关</h2><h3 id="1-不在以下-request-合法域名列表中"><a href="#1-不在以下-request-合法域名列表中" class="headerlink" title="1. 不在以下 request 合法域名列表中"></a>1. 不在以下 request 合法域名列表中</h3><blockquote>
<p>点击微信开发者工具右上角的详情-&gt;本地设置-&gt;不校验合法域名</p>
</blockquote>
<blockquote>
<p>或者去<a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">微信公众平台</a>中 ，开发管理-&gt;开发设置-&gt;服务器域名 中添加请求地址域名的白名单  </p>
</blockquote>
<h2 id="2-微信开发者工具右上角的上传按钮消失"><a href="#2-微信开发者工具右上角的上传按钮消失" class="headerlink" title="2.微信开发者工具右上角的上传按钮消失"></a>2.微信开发者工具右上角的上传按钮消失</h2><blockquote>
<p><strong>检查微信开放平台中的APPID与微信开发者工具的APPID是否相同</strong></p>
<p>复制微信开放平台中的APPID到微信开发者工具即可解决问题</p>
</blockquote>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><h3 id="1-接口文档"><a href="#1-接口文档" class="headerlink" title="1.接口文档"></a>1.接口文档</h3><p><a href="https://www.showdoc.com.cn/128719739414963?page_id=2513235043485226" target="_blank" rel="noopener">接口文档</a></p>
<h3 id="2-小程序基础文档"><a href="#2-小程序基础文档" class="headerlink" title="2.小程序基础文档"></a>2.小程序基础文档</h3><p><a href="http://itaylorfan.top:8081/materials/weixin/weixin-base.pdf" target="_blank" rel="noopener">小程序基础文档</a></p>
<h3 id="3-项目讲解文档"><a href="#3-项目讲解文档" class="headerlink" title="3.项目讲解文档"></a>3.项目讲解文档</h3><p><a href="http://itaylorfan.top:8081/materials/weixin/weixin-project%28shopping%29.pdf" target="_blank" rel="noopener">黑马优购小项目</a></p>
<h3 id="4-本人代码地址"><a href="#4-本人代码地址" class="headerlink" title="4.本人代码地址"></a>4.本人代码地址</h3><p><a href="https://github.com/ITaylorfan/weixin-heimayougou" target="_blank" rel="noopener">项目代码</a></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇文章</title>
    <url>/2020/04/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>老早就想着建一个属于自己的小网站，无奈云服务器要花钱，所以就上网找有没有不花钱搭建网站的方法。然后就遇到了hexo+github搭建个人博客这个方法，确实一分钱都不用花，只要花点时间。首先感谢博客园的这个老铁<a href="https://www.cnblogs.com/lubians/p/12181619.html" target="_blank" rel="noopener">鲁边</a>,大部分都是按照他的步骤来的，虽然省略了一些细节，但影响不大。如果你们也想做一个属于自己的博客网站可以参考他的步骤来做。</p>
]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>把hexo部署到阿里云(呆方法)</title>
    <url>/2020/12/30/%E6%8A%8Ahexo%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91-%E5%91%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="hexo博客部署到阿里云"><a href="#hexo博客部署到阿里云" class="headerlink" title="hexo博客部署到阿里云"></a>hexo博客部署到阿里云</h1><blockquote>
<p>我的是阿里云轻量级服务器(Windows系统)</p>
<p>部署方法比较简单(比较呆)</p>
</blockquote>
<h2 id="1-先在服务器上安装nginx"><a href="#1-先在服务器上安装nginx" class="headerlink" title="1.先在服务器上安装nginx"></a>1.先在服务器上安装nginx</h2><blockquote>
<p>我的是Windows系统所以安装方法和本地pc一样</p>
</blockquote>
<a id="more"></a>

<h2 id="2-配置nginx"><a href="#2-配置nginx" class="headerlink" title="2.配置nginx"></a>2.配置nginx</h2><p><strong>找到nginx根目录下的conf-&gt;nginx.conf</strong></p>
<p><strong>在http内添加如下:</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">   server&#123;</span><br><span class="line"><span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line"><span class="attribute">root</span> ../home/www/public;</span><br><span class="line"><span class="attribute">server_name</span> <span class="number">8.136.6.54</span>;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line">	<span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>listen 是监听端口  选80端口   用ip就能直接打开 无需在ip后加端口号</p>
<p>root 是存放博客的实体目录结构  以nginx.exe文件所在处为根目录</p>
<p>server_name  后面可以填自己的域名没有就填自己服务器的公网ip</p>
<p>location 内设置默认打开的页面</p>
</blockquote>
<h2 id="3-创建实体文件夹"><a href="#3-创建实体文件夹" class="headerlink" title="3.创建实体文件夹"></a>3.创建实体文件夹</h2><blockquote>
<p>按照上面配置root中的路径来创建</p>
</blockquote>
<p><strong>下面是我的目录结构</strong></p>
<img src="/2020/12/30/%E6%8A%8Ahexo%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91-%E5%91%86%E6%96%B9%E6%B3%95/%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%911.png" class="" title="部署阿里云1">

<h2 id="4-部署到服务器"><a href="#4-部署到服务器" class="headerlink" title="4.部署到服务器"></a>4.部署到服务器</h2><p><strong>在本地PC</strong> <code>hexo g</code> <strong>打包hexo博客，生成public文件夹</strong></p>
<p><strong>然后把public文件夹复制到服务器端配置的博客文件夹中</strong></p>
<img src="/2020/12/30/%E6%8A%8Ahexo%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91-%E5%91%86%E6%96%B9%E6%B3%95/%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%912.png" class="" title="部署阿里云2">

<h2 id="5-完成！"><a href="#5-完成！" class="headerlink" title="5.完成！"></a>5.完成！</h2><p><strong>输入公网IP即可访问博客</strong></p>
<p><a href="http://itaylorfan.top/" target="_blank" rel="noopener">我的博客</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库课程设计(Vue)的一些笔记</title>
    <url>/2020/11/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Audi4S店管理系统-Vue"><a href="#Audi4S店管理系统-Vue" class="headerlink" title="Audi4S店管理系统(Vue)"></a>Audi4S店管理系统(Vue)</h1><h2 id="1-安装sass"><a href="#1-安装sass" class="headerlink" title="1.安装sass"></a>1.安装sass</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i --save-dev node-sass sass-loader</span><br></pre></td></tr></table></figure>



<h2 id="2-安装Element-UI"><a href="#2-安装Element-UI" class="headerlink" title="2.安装Element-UI"></a>2.安装Element-UI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-1按需引入"><a href="#2-1按需引入" class="headerlink" title="2.1按需引入"></a>2.1按需引入</h3><p><strong>安装babel-plugin-component：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure>

<p><strong>修改项目目录下的 babel.config.js文件</strong></p>
<p><strong>修改为:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    <span class="string">'@vue/cli-plugin-babel/preset'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"component"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"element-ui"</span>,</span><br><span class="line">        <span class="string">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最后在main.js中按需引入：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line">Vue.use(Button)</span><br></pre></td></tr></table></figure>

<h2 id="3-使用Echart"><a href="#3-使用Echart" class="headerlink" title="3.使用Echart"></a>3.使用Echart</h2><h3 id="3-1安装"><a href="#3-1安装" class="headerlink" title="3.1安装"></a>3.1安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i echarts -s</span><br></pre></td></tr></table></figure>

<h3 id="3-2main-js中引入"><a href="#3-2main-js中引入" class="headerlink" title="3.2main.js中引入"></a>3.2main.js中引入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span></span><br><span class="line">Vue.prototype.$echarts = echarts</span><br></pre></td></tr></table></figure>

<h3 id="3-3开始使用"><a href="#3-3开始使用" class="headerlink" title="3.3开始使用"></a>3.3开始使用</h3><p><strong>现在就可以全局使用echart了，在methods里写一个drawchart（）{}方法，里面写</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myChart = <span class="keyword">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">"myChart"</span>));</span><br><span class="line"><span class="keyword">var</span> option =&#123;</span><br><span class="line"><span class="comment">//写echart的表格内容</span></span><br><span class="line">&#125;</span><br><span class="line">myChart.setOption(option)</span><br></pre></td></tr></table></figure>

<p><strong>在mounted钩子函数里调用一个方法 this.drawchart（），图表就会显示在页面id为mychart的地方</strong></p>
<p><strong>echart最后的自适应</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         laChart.resize();<span class="comment">//各个图表都写在一个onresize里，因为这个方法只能被调用一次</span></span><br><span class="line">         qualitychart.resize();</span><br><span class="line">         safetychart.resize();</span><br><span class="line">         machart.resize();</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="4-安装axios"><a href="#4-安装axios" class="headerlink" title="4.安装axios"></a>4.安装axios</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i axios --save</span><br></pre></td></tr></table></figure>

<h2 id="5-安装localStorage"><a href="#5-安装localStorage" class="headerlink" title="5.安装localStorage"></a>5.安装localStorage</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i --save web-storage-cache</span><br></pre></td></tr></table></figure>

<p><strong>使用：配置一个api文件</strong></p>
<p><strong>常用的一些方法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Storage <span class="keyword">from</span> <span class="string">"web-storage-cache"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">const</span> localStorage=<span class="keyword">new</span> Storage()</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setLocalStorage</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localStorage.set(key,value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLocalStorage</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localStorage.get(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除一个值</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeLocalStorage</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localStorage.delete(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全部清除！！！</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">clearLocalStorage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localStorage.clear()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-路由守卫"><a href="#6-路由守卫" class="headerlink" title="6.路由守卫"></a>6.路由守卫</h2><blockquote>
<p>注意router中的this问题</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//小坑 这里必须引入vuex，不然下面的getters报错</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    redirect:<span class="string">"/Login"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">"/Login"</span>,</span><br><span class="line">    name:<span class="string">"Login"</span>,</span><br><span class="line">    component:<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">"../views/Login"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">"/Admin"</span>,</span><br><span class="line">    name:<span class="string">"Admin"</span>,</span><br><span class="line">    component:<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">"../views/Admin"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">"/Register"</span>,</span><br><span class="line">    name:<span class="string">"Register"</span>,</span><br><span class="line">    component:<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">"../components/Register"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">"*"</span>,</span><br><span class="line">    component:<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">"../components/NotFind"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由拦截</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"-----------------beforeEach-------------------------"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(to,<span class="keyword">from</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//此处没有挂载到vue实例上，所以this为undefined</span></span><br><span class="line">  <span class="comment">//获取vuex中的变量</span></span><br><span class="line">  <span class="comment">//console.log(router.app.$store.getters.isLogin)</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(to.path!==<span class="string">"/Admin"</span>)&#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(router.app.$store.getters.isLogin&amp;&amp;to.path==<span class="string">"/Admin"</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    next()</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!router.app.$store.getters.isLogin&amp;&amp;to.path==<span class="string">"/Admin"</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    next(&#123;</span><br><span class="line">      path:<span class="string">"/Login"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h2 id="7-安装百度地图"><a href="#7-安装百度地图" class="headerlink" title="7.安装百度地图"></a>7.安装百度地图</h2><p><strong>1.安装插件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-baidu-map --save</span><br></pre></td></tr></table></figure>

<p><strong>2.main.js中引入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> BaiduMap <span class="keyword">from</span> <span class="string">'vue-baidu-map'</span>;</span><br><span class="line">  Vue.use(BaiduMap, &#123;</span><br><span class="line">        <span class="comment">/* Visit http://lbsyun.baidu.com/apiconsole/key for details about app key. */</span></span><br><span class="line">        ak: <span class="string">'YOUR_APP_KEY'</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p><strong>3.public文件夹下的index.html中引入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://api.map.baidu.com/api?v=1.0&amp;type=webgl&amp;ak="</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-Element-UI日期选择器设置过期时间无法选定"><a href="#8-Element-UI日期选择器设置过期时间无法选定" class="headerlink" title="8.Element-UI日期选择器设置过期时间无法选定"></a>8.Element-UI日期选择器设置过期时间无法选定</h2><p><strong>1.加入:picker-options=”pickerOptions”</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">"选择日期"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">"ruleForm.date1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"width: 100%"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:picker-options</span>=<span class="string">"pickerOptions"</span></span></span><br><span class="line"><span class="tag">         	&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.data() return中定义</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        pickerOptions: &#123;</span><br><span class="line">        disabledDate(time) &#123;</span><br><span class="line">          <span class="comment">//此条为设置禁止用户选择今天之前的日期，包含今天。</span></span><br><span class="line">          <span class="comment">// return time.getTime() &lt;= (Date.now()-(24 * 60 * 60 * 1000));</span></span><br><span class="line">          <span class="comment">//此条为设置禁止用户选择今天之前的日期，不包含今天。</span></span><br><span class="line">          <span class="keyword">return</span> time.getTime() &lt;= <span class="built_in">Date</span>.now() - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="9-使用animate-css第三方动画库"><a href="#9-使用animate-css第三方动画库" class="headerlink" title="9.使用animate.css第三方动画库"></a>9.使用animate.css第三方动画库</h2><p><strong>1.安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install animate.css --save</span><br></pre></td></tr></table></figure>

<p><strong>2.main.js中引入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> animated <span class="keyword">from</span> <span class="string">'animate.css'</span></span><br><span class="line">Vue.use(animated)</span><br></pre></td></tr></table></figure>

<p><strong>3.使用</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"backInRight"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">"animate__animated animate__backInLeft"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">"animate__animated  animate__backOutRight"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>appear属性：设置初次加载动画</strong></p>
<h2 id="10-安装MD5加密"><a href="#10-安装MD5加密" class="headerlink" title="10.安装MD5加密"></a>10.安装MD5加密</h2><p><strong>1.安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save js-md5</span><br></pre></td></tr></table></figure>

<p><strong>2.引入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">'js-md5'</span>;</span><br><span class="line"><span class="comment">//加入原型</span></span><br><span class="line">Vue.prototype.$md5 = md5;</span><br></pre></td></tr></table></figure>

<p><strong>3.使用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$md5(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="11-验证码插件代码，使用"><a href="#11-验证码插件代码，使用" class="headerlink" title="11.验证码插件代码，使用"></a>11.验证码插件代码，使用</h2><p><strong>1.canvas生成图形</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"s-canvas"</span>&gt;</span><br><span class="line">    &lt;canvas id=<span class="string">"s-canvas"</span> :width=<span class="string">"contentWidth"</span> :height=<span class="string">"contentHeight"</span>&gt;&lt;<span class="regexp">/canvas&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'SIdentify',</span></span><br><span class="line"><span class="regexp">  props: &#123;</span></span><br><span class="line"><span class="regexp">    identifyCode: &#123; /</span><span class="regexp">/ 默认注册码</span></span><br><span class="line"><span class="regexp">      type: String,</span></span><br><span class="line"><span class="regexp">      default: '1234'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    fontSizeMin: &#123; /</span><span class="regexp">/ 字体最小值</span></span><br><span class="line"><span class="regexp">      type: Number,</span></span><br><span class="line"><span class="regexp">      default: 25</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    fontSizeMax: &#123; /</span><span class="regexp">/ 字体最大值</span></span><br><span class="line"><span class="regexp">      type: Number,</span></span><br><span class="line"><span class="regexp">      default: 35</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    backgroundColorMin: &#123; /</span><span class="regexp">/ 验证码图片背景色最小值</span></span><br><span class="line"><span class="regexp">      type: Number,</span></span><br><span class="line"><span class="regexp">      default: 200</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    backgroundColorMax: &#123; /</span><span class="regexp">/ 验证码图片背景色最大值</span></span><br><span class="line"><span class="regexp">      type: Number,</span></span><br><span class="line"><span class="regexp">      default: 220</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    dotColorMin: &#123; /</span><span class="regexp">/ 背景干扰点最小值</span></span><br><span class="line"><span class="regexp">      type: Number,</span></span><br><span class="line"><span class="regexp">      default: 60</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    dotColorMax: &#123; /</span><span class="regexp">/ 背景干扰点最大值</span></span><br><span class="line"><span class="regexp">      type: Number,</span></span><br><span class="line"><span class="regexp">      default: 120</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    contentWidth: &#123; /</span><span class="regexp">/ 容器宽度</span></span><br><span class="line"><span class="regexp">      type: Number,</span></span><br><span class="line"><span class="regexp">      default: 116</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    contentHeight: &#123; /</span><span class="regexp">/ 容器高度</span></span><br><span class="line"><span class="regexp">      type: Number,</span></span><br><span class="line"><span class="regexp">      default: 38</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 生成一个随机数</span></span><br><span class="line"><span class="regexp">    randomNum (min, max) &#123;</span></span><br><span class="line"><span class="regexp">      return Math.floor(Math.random() * (max - min) + min)</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 生成一个随机的颜色</span></span><br><span class="line"><span class="regexp">    randomColor (min, max) &#123;</span></span><br><span class="line"><span class="regexp">      let r = this.randomNum(min, max)</span></span><br><span class="line"><span class="regexp">      let g = this.randomNum(min, max)</span></span><br><span class="line"><span class="regexp">      let b = this.randomNum(min, max)</span></span><br><span class="line"><span class="regexp">      return 'rgb(' + r + ',' + g + ',' + b + ')'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    drawPic () &#123;</span></span><br><span class="line"><span class="regexp">      let canvas = document.getElementById('s-canvas')</span></span><br><span class="line"><span class="regexp">      let ctx = canvas.getContext('2d')</span></span><br><span class="line"><span class="regexp">      ctx.textBaseline = 'bottom'</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 绘制背景</span></span><br><span class="line"><span class="regexp">      ctx.fillStyle = this.randomColor(this.backgroundColorMin, this.backgroundColorMax)</span></span><br><span class="line"><span class="regexp">      ctx.fillRect(0, 0, this.contentWidth, this.contentHeight)</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 绘制文字</span></span><br><span class="line"><span class="regexp">      for (let i = 0; i &lt; this.identifyCode.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">        this.drawText(ctx, this.identifyCode[i], i)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      this.drawLine(ctx)</span></span><br><span class="line"><span class="regexp">      this.drawDot(ctx)</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    drawText (ctx, txt, i) &#123;</span></span><br><span class="line"><span class="regexp">      ctx.fillStyle = this.randomColor(50, 160) /</span><span class="regexp">/ 随机生成字体颜色</span></span><br><span class="line"><span class="regexp">      ctx.font = this.randomNum(this.fontSizeMin, this.fontSizeMax) + 'px SimHei' /</span><span class="regexp">/ 随机生成字体大小</span></span><br><span class="line"><span class="regexp">      let x = (i + 1) * (this.contentWidth /</span> (<span class="keyword">this</span>.identifyCode.length + <span class="number">1</span>))</span><br><span class="line">      <span class="keyword">let</span> y = <span class="keyword">this</span>.randomNum(<span class="keyword">this</span>.fontSizeMax, <span class="keyword">this</span>.contentHeight - <span class="number">5</span>)</span><br><span class="line">      <span class="keyword">var</span> deg = <span class="keyword">this</span>.randomNum(<span class="number">-30</span>, <span class="number">30</span>)</span><br><span class="line">      <span class="comment">// 修改坐标原点和旋转角度</span></span><br><span class="line">      ctx.translate(x, y)</span><br><span class="line">      ctx.rotate(deg * <span class="built_in">Math</span>.PI / <span class="number">180</span>)</span><br><span class="line">      ctx.fillText(txt, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="comment">// 恢复坐标原点和旋转角度</span></span><br><span class="line">      ctx.rotate(-deg * <span class="built_in">Math</span>.PI / <span class="number">180</span>)</span><br><span class="line">      ctx.translate(-x, -y)</span><br><span class="line">    &#125;,</span><br><span class="line">    drawLine (ctx) &#123;</span><br><span class="line">      <span class="comment">// 绘制干扰线</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        ctx.strokeStyle = <span class="keyword">this</span>.randomColor(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        ctx.moveTo(<span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentWidth), <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentHeight))</span><br><span class="line">        ctx.lineTo(<span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentWidth), <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentHeight))</span><br><span class="line">        ctx.stroke()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    drawDot (ctx) &#123;</span><br><span class="line">      <span class="comment">// 绘制干扰点</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        ctx.fillStyle = <span class="keyword">this</span>.randomColor(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        ctx.arc(<span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentWidth), <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentHeight), <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI)</span><br><span class="line">        ctx.fill()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    identifyCode () &#123;</span><br><span class="line">      <span class="keyword">this</span>.drawPic()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.drawPic()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2.创建容器组件放置生成的图形</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"inventoryRecord"</span>&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;div @click=<span class="string">"changeCode()"</span>&gt;</span><br><span class="line">      &lt;!-- 引入验证码组件 --&gt;</span><br><span class="line">      &lt;identify :identifyCode=<span class="string">"identifyCode"</span>&gt;&lt;<span class="regexp">/identify&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 引入验证码组件</span></span><br><span class="line"><span class="keyword">import</span> identify <span class="keyword">from</span> <span class="string">'@/components/Home/identify.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'inventoryRecord'</span>,</span><br><span class="line">  <span class="comment">// 注册验证码组件</span></span><br><span class="line">  components: &#123; identify &#125;,</span><br><span class="line">  <span class="comment">//监听密码变化</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">      <span class="comment">//将变化的值传给父组件</span></span><br><span class="line">      identifyCode(v)&#123;</span><br><span class="line">          <span class="keyword">this</span>.$emit(<span class="string">"getCheckCode"</span>,v)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Welcome to Your Vue.js App商品库存编辑记录'</span>,</span><br><span class="line">      passWord: <span class="string">'123456'</span>,</span><br><span class="line">      <span class="comment">// 验证码初始值</span></span><br><span class="line">      identifyCode: <span class="string">'1234'</span>,</span><br><span class="line">      <span class="comment">// 验证码的随机取值范围</span></span><br><span class="line">      identifyCodes: <span class="string">'1234567890'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="comment">//let data = this.$md5(this.passWord)</span></span><br><span class="line">    <span class="comment">//console.log(data)// e10adc3949ba59abbe56e057f20f883e</span></span><br><span class="line">    <span class="comment">// 刷新页面就生成随机验证码</span></span><br><span class="line">    <span class="keyword">this</span>.identifyCode = <span class="string">''</span></span><br><span class="line">    <span class="keyword">this</span>.makeCode(<span class="keyword">this</span>.identifyCodes, <span class="number">4</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 点击验证码刷新验证码</span></span><br><span class="line">    changeCode () &#123;</span><br><span class="line">      <span class="keyword">this</span>.identifyCode = <span class="string">''</span></span><br><span class="line">      <span class="keyword">this</span>.makeCode(<span class="keyword">this</span>.identifyCodes, <span class="number">4</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生成一个随机整数  randomNum(0, 10) 0 到 10 的随机整数， 包含 0 和 10</span></span><br><span class="line">    randomNum (min, max) &#123;</span><br><span class="line">      max = max + <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min) + min)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 随机生成验证码字符串</span></span><br><span class="line">    makeCode (data, len) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.identifyCode += data[<span class="keyword">this</span>.randomNum(<span class="number">0</span>, data.length - <span class="number">1</span>)]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3.vue中使用上面的组件即可</strong></p>
<h2 id="JS知识"><a href="#JS知识" class="headerlink" title="JS知识"></a>JS知识</h2><h3 id="1-String类型转Date类型"><a href="#1-String类型转Date类型" class="headerlink" title="1.String类型转Date类型"></a>1.String类型转Date类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.parse(data);  <span class="comment">//直接转</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Date类型转String类型"><a href="#2-Date类型转String类型" class="headerlink" title="2.Date类型转String类型"></a>2.Date类型转String类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span> (<span class="params">fmt</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//author: meizz</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> o = &#123;</span><br><span class="line">              <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//月份</span></span><br><span class="line"></span><br><span class="line">              <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//日</span></span><br><span class="line"></span><br><span class="line">              <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//小时</span></span><br><span class="line"></span><br><span class="line">              <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//分</span></span><br><span class="line"></span><br><span class="line">              <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒</span></span><br><span class="line"></span><br><span class="line">              <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度</span></span><br><span class="line"></span><br><span class="line">              S: <span class="keyword">this</span>.getMilliseconds(), <span class="comment">//毫秒</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt))</span><br><span class="line">              fmt = fmt.replace(</span><br><span class="line">                <span class="built_in">RegExp</span>.$<span class="number">1</span>,</span><br><span class="line">                (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length)</span><br><span class="line">              );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o)</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt))</span><br><span class="line">                fmt = fmt.replace(</span><br><span class="line">                  <span class="built_in">RegExp</span>.$<span class="number">1</span>,</span><br><span class="line">                  <span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span></span><br><span class="line">                    ? o[k]</span><br><span class="line">                    : (<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> fmt;</span><br><span class="line">          &#125;; <span class="comment">//将data转换为yyyy/MM/dd类型</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">new</span> <span class="built_in">Date</span>(data).format(<span class="string">"yyyy/MM/dd"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-阻止elementUI中Input的浏览器默认事件"><a href="#3-阻止elementUI中Input的浏览器默认事件" class="headerlink" title="3.阻止elementUI中Input的浏览器默认事件"></a>3.阻止elementUI中Input的浏览器默认事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">//this.ruleForm.fileList.length === 1是触发条件</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.ruleForm.fileList.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> hanle = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//阻止浏览器默认事件</span></span><br><span class="line">          <span class="keyword">if</span> (event.preventDefault &amp;&amp; event) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ruleForm.fileList.length === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//获取input节点</span></span><br><span class="line">           <span class="keyword">let</span> inputFile = <span class="built_in">document</span></span><br><span class="line">          .getElementById(<span class="string">"uploader"</span>)</span><br><span class="line">          .getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>]</span><br><span class="line">          .getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>];</span><br><span class="line">          <span class="built_in">console</span>.log(inputFile)</span><br><span class="line">          <span class="comment">//此变量是判断是否已经上传文件</span></span><br><span class="line">          inputFile.addEventListener(<span class="string">"click"</span>, hanle, <span class="literal">false</span>); <span class="comment">//满足条件给input绑定事件</span></span><br><span class="line">          <span class="keyword">this</span>.$message.error(<span class="string">"只能上传一张图片！"</span>);</span><br><span class="line">          setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            inputFile.removeEventListener(<span class="string">"click"</span>, hanle, <span class="literal">false</span>); <span class="comment">//移除事件</span></span><br><span class="line">          &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//如果将 inputFile.removeEventListener('click',hanle,false)写在else,不能移除hanle事件</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-动态设置元素flex高度"><a href="#4-动态设置元素flex高度" class="headerlink" title="4.动态设置元素flex高度"></a>4.动态设置元素flex高度</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> banner=<span class="built_in">document</span>.getElementById(<span class="string">"banner"</span>);  <span class="comment">//获取容器ID</span></span><br><span class="line"><span class="keyword">let</span> innerHeight=<span class="built_in">window</span>.innerHeight;            <span class="comment">//获取浏览器可视化区域高度</span></span><br><span class="line">banner.style.cssText=<span class="string">`flex:0 0 <span class="subst">$&#123;innerHeight<span class="number">-50</span>&#125;</span>px`</span>;  <span class="comment">//设置flex高度(用的flex布局)</span></span><br></pre></td></tr></table></figure>

<h3 id="5-判断一个字符串是否为数字"><a href="#5-判断一个字符串是否为数字" class="headerlink" title="5.判断一个字符串是否为数字"></a>5.判断一个字符串是否为数字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断字符串是否为数字</span></span><br><span class="line">           checkNumber(theObj) &#123;</span><br><span class="line">               <span class="keyword">var</span> reg = <span class="regexp">/^[0-9]+.?[0-9]*$/</span>;</span><br><span class="line">               <span class="keyword">if</span> (reg.test(theObj)) &#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-url转blob"><a href="#6-url转blob" class="headerlink" title="6.url转blob"></a>6.url转blob</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个异步方法 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlToBlob</span>(<span class="params">the_url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">"get"</span>, the_url, <span class="literal">true</span>);</span><br><span class="line">  xhr.responseType = <span class="string">"blob"</span>;</span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">              callback(<span class="keyword">this</span>.response);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"> urlToBlob(url,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>



<h2 id="CSS知识"><a href="#CSS知识" class="headerlink" title="CSS知识"></a>CSS知识</h2><h2 id="1-设置文字垂直排列"><a href="#1-设置文字垂直排列" class="headerlink" title="1.设置文字垂直排列"></a>1.设置文字垂直排列</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">writing-mode:vertical-lr;  //垂直方向，从左向右</span><br></pre></td></tr></table></figure>

<h2 id="2-设置字与字的间距"><a href="#2-设置字与字的间距" class="headerlink" title="2.设置字与字的间距"></a>2.设置字与字的间距</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">letter-spacing:5px;     //设置字与字的间距</span><br></pre></td></tr></table></figure>

<h2 id="MySQL知识"><a href="#MySQL知识" class="headerlink" title="MySQL知识"></a>MySQL知识</h2><h2 id="1-设置字段自动获取当前时间"><a href="#1-设置字段自动获取当前时间" class="headerlink" title="1.设置字段自动获取当前时间"></a>1.设置字段自动获取当前时间</h2><blockquote>
<ol>
<li><p>将字段类型设为  <strong>TIMESTAMP</strong> </p>
</li>
<li><p>将默认值设为  <strong>CURRENT_TIMESTAMP</strong></p>
</li>
</ol>
</blockquote>
<h2 id="2-删除一行数据后自动增长跳过当前id导致id不连续问题"><a href="#2-删除一行数据后自动增长跳过当前id导致id不连续问题" class="headerlink" title="2.删除一行数据后自动增长跳过当前id导致id不连续问题"></a>2.删除一行数据后自动增长跳过当前id导致id不连续问题</h2><p><strong>删除后，插入前执行语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> customerinfo AUTO_INCREMENT=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-创建触发器"><a href="#3-创建触发器" class="headerlink" title="3.创建触发器"></a>3.创建触发器</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">    <span class="comment">/*!50017 DEFINER = 'root'@'localhost' */</span></span><br><span class="line">    <span class="keyword">TRIGGER</span> <span class="string">`user_notice_trigger`</span> <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="string">`user_submit`</span> </span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> </span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_notice(userInfoId,userSubmitId) <span class="keyword">VALUE</span>(new.userInfoId,new.id); //执行sql代码块</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>



<h2 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h2><ol>
<li><h3 id="npm-run-build-打包后-dist文件夹下index-html打开空白并报错解决"><a href="#npm-run-build-打包后-dist文件夹下index-html打开空白并报错解决" class="headerlink" title="npm run build 打包后 dist文件夹下index.html打开空白并报错解决"></a>npm run build 打包后 dist文件夹下index.html打开空白并报错解决</h3><p><strong>在项目目录中vue.config.js中配置:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">publicPath:process.env.NODE_ENV ===<span class="string">"production"</span> ? <span class="string">"./"</span>:<span class="string">"/"</span>,</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="安装完一个插件后报错Error-Cannot-find-module-‘babel-plugin-component’"><a href="#安装完一个插件后报错Error-Cannot-find-module-‘babel-plugin-component’" class="headerlink" title="安装完一个插件后报错Error: Cannot find module ‘babel-plugin-component’"></a>安装完一个插件后报错Error: Cannot find module ‘babel-plugin-component’</h3><p><strong>只需:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>给hexo博客添加看板娘(大神版)</title>
    <url>/2020/12/30/%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98-%E5%A4%A7%E7%A5%9E%E7%89%88/</url>
    <content><![CDATA[<h1 id="给hexo博客添加看板娘"><a href="#给hexo博客添加看板娘" class="headerlink" title="给hexo博客添加看板娘"></a>给hexo博客添加看板娘</h1><blockquote>
<p>我添加的是大神版，功能齐全(能说话，能换装)</p>
</blockquote>
<h2 id="1-下载大神的项目"><a href="#1-下载大神的项目" class="headerlink" title="1.下载大神的项目"></a>1.下载大神的项目</h2><p><strong>下载</strong> <a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">张书樵大神的项目</a>，<strong>解压到本地博客目录的 <code>themes/next/source</code> 下，修改文件夹名为 <code>live2d-widget</code>，修改项目中的 <code>autoload.js</code> 文件，如下：</strong><br><strong>将</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/"</span>;</span><br></pre></td></tr></table></figure>

<p><strong>改为</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">"/live2d-widget/"</span>;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<img src="/2020/12/30/%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98-%E5%A4%A7%E7%A5%9E%E7%89%88/%E7%9C%8B%E6%9D%BF%E5%A8%981.png" class="" title="看板娘1">

<h2 id="2-在主题的主布局文件中引入"><a href="#2-在主题的主布局文件中引入" class="headerlink" title="2.在主题的主布局文件中引入"></a>2.在主题的主布局文件中引入</h2><p><strong>我的路径为/themes/hexo-theme-ayer/layout/layout.ejs</strong></p>
<p><strong>在此文件中新增内容：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/live2d-widget/autoload.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-在主题的配置文件中配置"><a href="#3-在主题的配置文件中配置" class="headerlink" title="3.在主题的配置文件中配置"></a>3.在主题的配置文件中配置</h2><p><strong>在_config.yml文件中，新增如下内容：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">live2d: </span><br><span class="line"> enable: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="4-自定义看板娘大小、位置、格式、文本内容等"><a href="#4-自定义看板娘大小、位置、格式、文本内容等" class="headerlink" title="4.自定义看板娘大小、位置、格式、文本内容等"></a>4.自定义看板娘大小、位置、格式、文本内容等</h2><p><strong>可以找到 live2d-weight文件夹下的</strong> <code>waifu-tips.js</code> 、 <code>waifu-tips.json</code> <strong>和</strong> <code>waifu.css</code> <strong>进行修改</strong></p>
<h2 id="5-注意"><a href="#5-注意" class="headerlink" title="5.注意"></a>5.注意</h2><p><strong>如果你的看板娘没有右侧的小菜单，请引入如下文件：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>我的是在主布局文件</strong><code>layout.ejs</code><strong>中进行添加的</strong></p>
<p><strong>我的</strong><code>layout.ejs</code><strong>文件如下</strong>：</p>
<img src="/2020/12/30/%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98-%E5%A4%A7%E7%A5%9E%E7%89%88/%E7%9C%8B%E6%9D%BF%E5%A8%982.png" class="" title="看板娘2">

<p><strong>箭头所指即为我添加的内容</strong></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2021/10/21/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p> 正则表达式并不是JavaScript里面独有的技术，基本上所有的编程语言都支持这个技术。</p>
<p>正则表达式有以下几个特点【它的特点也可以认为是它的使用场景】</p>
<ol>
<li>正则表达式只对字符串进行操作</li>
<li>正则表达式做的是根据你所设定的<strong>规则</strong>对字符串进行“验证”，“提取”，“搜索”，“替换”等操作</li>
<li>JavaScript中的正则表达式是一个内置对象，它可以直接使用，它使用<code>RegExp</code>构造函数来创建，或直接使用字面量表示法<code>/正则规则/</code></li>
</ol>
<a id="more"></a>

<p>正则表达式分为三个部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[正则表达式 ]--&gt;B[模式规则]</span><br><span class="line">A--&gt;C[修饰符]</span><br><span class="line">A--&gt;D[方法]</span><br></pre></td></tr></table></figure>

<h3 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h3><p>正则表达式它是一个对象，我们要使用对象的方法去创建它的，它的构造函数是<code>RegExp</code>,它的语法如下</p>
<p><strong>第一种创建方式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern: string | <span class="built_in">RegExp</span>, flags?: string): <span class="built_in">RegExp</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的pattern代表的是规则，后面的flags代表的是修饰符</p>
</blockquote>
<p>所以根所据上面的语法要求，我们可以偿试着去创建一个正则</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"爱"</span>);   <span class="comment">//这就是最基本的正则表达式创建</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">""</span>,<span class="string">"g"</span>);	<span class="comment">//这里就添加了一个修饰符</span></span><br></pre></td></tr></table></figure>

<p><strong>第二种创建方式</strong></p>
<p>这一种创建方式我们叫字面量创建，它直接使用<code>/规则/</code>这种方式来创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/爱/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg2);    <span class="comment">//  /爱/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> reg2);  <span class="comment">// object</span></span><br></pre></td></tr></table></figure>

<p>上面就是正则表达式的创建过程，在学习正则表达式的过程当中，我们先了解正则表达式的两个方法</p>
<ol>
<li><code>test()</code>方法，用于验证某个字符串是否符合这个正则表达式规则(返回true或false)</li>
<li><code>exec()</code>方法，用于根据正则表达式去字符串中提取符合要求的字符</li>
</ol>
<p>同时要注意，正则表达式在创建的过程当中，它还可以添加修饰符<code>flags</code>，主要的修饰符有3个</p>
<ol>
<li><code>g</code>代表全局<code>global</code>的意思</li>
<li><code>i</code>代表<code>ignore</code>忽略大小写</li>
<li><code>m</code>代表<code>multipleline</code>多行的意思，也就是可以换行查找</li>
</ol>
<h3 id="正则表达式的规则"><a href="#正则表达式的规则" class="headerlink" title="正则表达式的规则"></a>正则表达式的规则</h3><h4 id="一元符"><a href="#一元符" class="headerlink" title="一元符"></a>一元符</h4><table>
<thead>
<tr>
<th align="left">元字符</th>
<th align="left">对应说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.</td>
<td align="left">匹配除换行符之外的任意字符</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配字母数字下划线，等同于：[a-zA-Z0-9_]</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任意空白符</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配数字，等同于[0-9]</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配单词边界</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">或匹配，如 /x|y/ 正则可匹配x或y两个字符</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配字符串的开始</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配字符串的结束</td>
</tr>
</tbody></table>
<h4 id="原子表与原子组"><a href="#原子表与原子组" class="headerlink" title="原子表与原子组"></a>原子表与原子组</h4><p><strong>原子表</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//现在我希望匹配以下的东西杨标，陈标，张标</span></span><br><span class="line"><span class="comment">// 原子表指的是[]</span></span><br><span class="line"><span class="comment">// 原子组指的是()</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[杨陈张]标$/</span>;</span><br><span class="line">reg.test(<span class="string">"杨标"</span>);		<span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"陈标"</span>);		<span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"张标"</span>);		<span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"李标"</span>);     <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>原子表是以中括号的形式存在，它会从这个表中拿一个出来进行匹配</p>
<p>在原子表里面，还可以写区间范围</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/[a-z]/</span>;  <span class="comment">//代表小写字母</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/[A-Z]/</span>;  <span class="comment">//代表大写字母</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/[0-9]/</span>;  <span class="comment">//代表数字，相当于\d</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：<strong>原子表中的范围不能倒着写，写反了会报错</strong></p>
<p><strong>原子组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//现在我希望匹配以下的东西杨标，陈标，张标</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/杨标|陈标|张标/</span>;</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/[杨陈张]标/</span>;</span><br><span class="line"><span class="comment">//上面的正则表达式是符合要求的，但是很繁琐</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/(杨|陈|张)标/</span>;</span><br><span class="line"><span class="comment">//如果是用小括号包起来，就是原子组</span></span><br></pre></td></tr></table></figure>

<p>原子组后期的优点非常多</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"大家好，今天是2021-01-06 14:48:30,今天天气不好，有点冷"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;) (\d&#123;2&#125;):(\d&#123;2&#125;):(\d&#123;2&#125;)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = reg.exec(str);   <span class="comment">//通过正则表达式提取的结果</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的案例就是通过原子组来进行的二次提取操作</p>
</blockquote>
<h4 id="反义字符"><a href="#反义字符" class="headerlink" title="反义字符"></a>反义字符</h4><table>
<thead>
<tr>
<th align="left">反义字符</th>
<th align="left">对应说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[^x]</td>
<td align="left">匹配除“x”之外的所有字符，其中“x”可以为任意字符</td>
</tr>
<tr>
<td align="left">[^xyz]</td>
<td align="left">同上，匹配除“x、y、z”之外的任意字符</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">匹配除了字母、数字、下划线之外的所有字符，等同于：<code>[^\w]</code></td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配除空白符之外的任意字符，等同于：<code>[^\s]</code></td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">匹配不是单词边界的字符，等同于：<code>[^\b]</code></td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配不是数字的所有字符，等同于：<code>[^\d]</code></td>
</tr>
</tbody></table>
<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><table>
<thead>
<tr>
<th align="left">转义字符</th>
<th align="left">对应说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\xnn</td>
<td align="left">匹配十六进制数</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">匹配换页符，等同于：\x0c</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配换行符，等同于：\x0a</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">匹配回车符，等同于：\x0d</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配水平制表符，等同于：\x09</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">匹配垂直制表符，等同于：\x0b</td>
</tr>
<tr>
<td align="left">\unnnn</td>
<td align="left">匹配Unicode字符，如：\u00A0</td>
</tr>
</tbody></table>
<p>正则表达式里面一些特殊的东西是需要转义的，如<code>[,],/,.{,},+,*,?</code>等，转义需要使用<code>\</code>表示</p>
<h4 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h4><table>
<thead>
<tr>
<th align="left">匹配字符</th>
<th align="left">对应说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">重复出现零次或多次</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">重复出现一次或多次</td>
</tr>
<tr>
<td align="left">？</td>
<td align="left">重复出现零次或一次</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">重复出现n次</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td align="left">至少重复出现n次</td>
</tr>
<tr>
<td align="left">{m,n}</td>
<td align="left">重复重现m到n次，其中，m&lt;n</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们希望验证一个字符串，它是a开始，以c结束。中间有4个英文字母怎么办呢</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a[a-zA-Z]c$/</span>;</span><br><span class="line"><span class="comment">//第一种写法，直接写4次，这是笨办法</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^a[a-zA-Z]&#123;4&#125;c$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证一个字符串，它是a开始，c结束，中间有4~6个数字，怎么办</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^a\d&#123;4,6&#125;c$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证一个字符串，它是a开始，c结束，中间有至少4个数字，怎么办</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/^a\d&#123;4,&#125;c$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最多有四个数字</span></span><br><span class="line"><span class="keyword">var</span> reg4 = <span class="regexp">/^a\d&#123;0,4&#125;c$/</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的写法是我们的<code>m-n</code>的写法，还有一些特殊的写法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//验证一个字符串，以a开始,c结束，中间可以有1个或多个数字</span></span><br><span class="line"><span class="keyword">var</span> reg4= <span class="regexp">/^a\d&#123;1,&#125;c$/</span>;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">var</span> reg5 = <span class="regexp">/^a\d+c$/</span>;   <span class="comment">//+号代表1次多或次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//验证一个字符串，以a开始，以c结束，中间有0次或多次出数字</span></span><br><span class="line"><span class="keyword">var</span> reg6= <span class="regexp">/^a\d*c$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有一个姓名，它以杨开始，以标结束，中间可以有一个或0个字符，怎么办呢</span></span><br><span class="line"><span class="keyword">var</span> reg =  <span class="regexp">/^杨.?标$/</span></span><br></pre></td></tr></table></figure>

<h4 id="贪婪与惰性"><a href="#贪婪与惰性" class="headerlink" title="贪婪与惰性"></a>贪婪与惰性</h4><table>
<thead>
<tr>
<th align="left">相关字符</th>
<th align="left">对应说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*?</td>
<td align="left">重复任意次，但尽可能少的重复</td>
</tr>
<tr>
<td align="left">+?</td>
<td align="left">重复一次或多次，但尽可能少的重复</td>
</tr>
<tr>
<td align="left">??</td>
<td align="left">重复零次或一次，但尽可能少的重复</td>
</tr>
<tr>
<td align="left">{m,n}?</td>
<td align="left">重复m到n次，但尽可能少的重复</td>
</tr>
<tr>
<td align="left">{n,}?</td>
<td align="left">重复n次以上，但尽可能少的重复</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"cbcertydiouycesdfsertd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我的要求，提取以c开始,d结束,中间是任何长度的英文字母</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/c[a-z]*d/</span>;</span><br><span class="line"><span class="comment">// 这个时候的正则是有问题的，*处理贪婪模式，它会贪式，（*代表0次到多次，它会贪多次）</span></span><br><span class="line"><span class="comment">//如果我们直接以reg为标准去匹配，我们会发现，它会从头匹配到尾，但是字符串中间是是有符合要求的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/c[a-z]*?d/g</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/613f3e6544eaada73957a0ee.png" alt="image-20210106162113155"></p>
<ul>
<li>贪婪模式：尽可能的选取多个【婪多个】</li>
<li>惰性模式：尽可能少取以个【懒惰】</li>
</ul>
<p>在禁止贪婪模式以后，就会变成惰性模式，它会尽可能的少重复</p>
<h4 id="原子组编号"><a href="#原子组编号" class="headerlink" title="原子组编号"></a>原子组编号</h4><p>在我们之前学习原子组的时候我们学过，可以将规则通过<code>()</code>来形成一个分组，其实在形成分组的时候，默认会形成一个分组编号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"&lt;div&gt;&lt;/div&gt;"</span>;</span><br><span class="line"><span class="comment">//现在希望编写一个正则去验证HTML的标签</span></span><br><span class="line"><span class="comment">//初步的思维</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/&lt;[a-zA-Z0-9]+&gt;&lt;\/[a-zA-Z0-9]+&gt;/</span>;</span><br></pre></td></tr></table></figure>

<p>在上面的正则表达式当中，我们表面看起来是已经完成了功能，但是有隐患，如果我们的字符串是<code>&lt;div&gt;&lt;/span&gt;</code>这个时候它也会验证成功，这是不符合要求的</p>
<p>我们要求的是开始标签名与结束标签名保持一致。我开始匹配的内容<code>[a-zA-Z0-9]+</code>要与后面匹配的<code>[a-zA-Z0-9]+</code>保持一致，这怎么办呢，这个时候就要使用到原子组编号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/&lt;([a-zA-Z0-9]+)&gt;&lt;\/\1&gt;/</span>;</span><br></pre></td></tr></table></figure>

<p>后面正则表达式所出现的<code>\1</code>代表的是匹配出来的第1个分组内容</p>
<p>我们还可以通过下面的案例来学习分组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"fdafffdaaklfjklja"</span>;</span><br><span class="line"><span class="comment">//现在要求找出字符串中连续重复的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1+/g</span>;</span><br><span class="line">str.match(reg);  <span class="comment">//这样就可以得到结果了</span></span><br></pre></td></tr></table></figure>

<p>当然原子组的编号不仅仅只有1个，可以实现多个组的编号，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">"ababcdefaceced1212rtioio4ybyb"</span>;</span><br><span class="line"><span class="comment">//在里面找出那些有规律的两个一起重复的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg =<span class="regexp">/(\w)(\w)\1\2/g</span>;</span><br><span class="line">str.match(reg);</span><br></pre></td></tr></table></figure>

<p><strong>分组不产生原子组编号</strong></p>
<blockquote>
<p>()分组产生分组号</p>
<p>(?:)分组不产生原子组编号</p>
</blockquote>
<p>在正常情况下，原子组当中只要有了小括号就会在提取的时候产生编号，如下所示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"今天是9月10日，唉呀！今天又跑到香港去玩了，买了好多东西，购物花了我￥346.77元，结果吃饭只能用美元，花了我$34.78元,坐港铁花了￥11元。"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?&lt;=[\$￥])\d+(\.\d+)?/g</span>;</span><br><span class="line">reg.exec(str);</span><br><span class="line"><span class="comment">//得到结果如下</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/613f3f8144eaada73959570e.png" alt="image-20210913141612135"></p>
<p>但是在这里，我们不需要这个编号，只是仅仅希望它们保持一个分组，所以就希望有一个技术是<strong>分组不编号</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?&lt;=[\$￥])\d+(?:\.\d+)?/g</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/613f3fa344eaada739599204.png" alt="image-20210913142248589"></p>
<h4 id="前瞻后顾"><a href="#前瞻后顾" class="headerlink" title="前瞻后顾"></a>前瞻后顾</h4><p>在弄清楚之个东西之前，先要让同学们知道什么是正则表达式的前后关系</p>
<blockquote>
<p>在学习这个地方之前，还一定要弄清楚，</p>
<ol>
<li>你的匹配条件是什么？</li>
<li>你的限制条件是什么？</li>
</ol>
<p>例如：李强要找一个女朋友 ，但是限定条件是这个女的要有钱，漂亮，身高170CM以上</p>
<ol>
<li>匹配条件：女</li>
<li>限定条件：有钱，漂亮，身高170CM</li>
</ol>
</blockquote>
<h5 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h5><p>前瞻(Look ahead positive): 匹配的是A,限制条件是A前面是B。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A(?&#x3D;B)</span><br></pre></td></tr></table></figure>

<p>如<strong>想要匹配abc并且abc的前面是123的表达式，应该这样</strong></p>
<img src="https://pic.imgdb.cn/item/613f40cf44eaada7395b79b6.png" alt="image-20210106172004702" style="zoom:80%;" />

<h5 id="负前瞻"><a href="#负前瞻" class="headerlink" title="负前瞻"></a>负前瞻</h5><p>负前瞻(Look ahead negative): 顾名思义，该正则匹配A，限制条件是A前面不是B</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A(?!B)</span><br></pre></td></tr></table></figure>

<p>想要<strong>匹配abc并且abc的前面不是123的表达式，应该这样：</strong></p>
<img src="https://pic.imgdb.cn/item/613f417044eaada7395c6fdd.png" alt="image-20210106172148524" style="zoom:80%;" />

<h5 id="后顾"><a href="#后顾" class="headerlink" title="后顾"></a>后顾</h5><p>后顾(Look behind positive ): 匹配表达式A，限制条件A的后面是B</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(?&lt;&#x3D;B)A</span><br></pre></td></tr></table></figure>

<p>想要<strong>匹配abc并且abc的后面是123的表达式</strong></p>
<img src="https://pic.imgdb.cn/item/613f419444eaada7395cac75.png" alt="image-20210106172636353" style="zoom:80%;" />

<h5 id="负后顾"><a href="#负后顾" class="headerlink" title="负后顾"></a>负后顾</h5><p>负后顾(Look behind negative ): 匹配表达式A,限制条件是A的后面不是B</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(?&lt;!B)A</span><br></pre></td></tr></table></figure>

<p>想要<strong>匹配abc并且abc的后面不是123的表达式</strong>，应该这样：</p>
<img src="https://pic.imgdb.cn/item/613f41cd44eaada7395d0756.png" alt="image-20210106172754076" style="zoom:80%;" />

<h3 id="正则表达式的操作方法"><a href="#正则表达式的操作方法" class="headerlink" title="正则表达式的操作方法"></a>正则表达式的操作方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>String.prototype.replace()</td>
<td>字符串替换</td>
</tr>
<tr>
<td>String.prototype.search()</td>
<td>字符串查找</td>
</tr>
<tr>
<td>String.prototype.match()</td>
<td>字符串匹配提取</td>
</tr>
<tr>
<td>String.prototype.split()</td>
<td>字符串根据正则表达式分割</td>
</tr>
<tr>
<td>RegExp.prototype.test()</td>
<td>根据正则规则验证字符串</td>
</tr>
<tr>
<td>RegExp.prototype.exec()</td>
<td>根据正则表达式规则提取字符串</td>
</tr>
</tbody></table>
<h4 id="test-验证"><a href="#test-验证" class="headerlink" title="test()验证"></a>test()验证</h4><p>这是<strong>正则表达式的一个方法</strong>，用于验证一个字符串是否符合正则的要求，如果符合就返回<code>true</code>，不符合就返回<code>false</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正则表达式的验证是test方法，它是正则对象的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证用户名，必须字母或下划线开头，后面接任意非空字符，总长度在6~10位</span></span><br><span class="line"><span class="comment">     * 验证年龄：必须是正整数</span></span><br><span class="line"><span class="comment">     * 验证性别：必须是男或女</span></span><br><span class="line"><span class="comment">     * 验证爱好：必须是 看书，睡觉，玩游戏三者之顺选择，可以选多个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-z]\S&#123;5,9&#125;$/i</span>;</span><br><span class="line">reg1.test(<span class="string">"a123abd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^\d+$/</span>;</span><br><span class="line">reg2.test(<span class="string">"12"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/^[男女]$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个正则要去掉重复的情况</span></span><br><span class="line"><span class="keyword">var</span> reg4 = <span class="regexp">/(看书|睡觉|玩游戏)+/</span>;</span><br></pre></td></tr></table></figure>

<h4 id="exec-提取"><a href="#exec-提取" class="headerlink" title="exec()提取"></a>exec()提取</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">"今天是9月10日，唉呀！今天又跑到香港去玩了，买了好多东西，购物花了我￥346.77元，结果吃饭只能用美元，花了我$34.78元,坐港铁花了￥10元。"</span>;</span><br><span class="line"><span class="comment">//在上面的字符串里面，我们要提取所有的金额（美圆和人民币）</span></span><br></pre></td></tr></table></figure>

<p><strong>第一种方式的操作：手动操作</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在上面的字符串里面，我们要提取所有的金额（美圆和人民币）</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"今天是9月10日，唉呀！今天又跑到香港去玩了，买了好多东西，购物花了我￥346.77元，结果吃饭只能用美元，花了我$34.78元,坐港铁花了￥11元。"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?&lt;=[\$￥])\d+(\.\d+)?/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//第一次提取						//346.77</span></span><br><span class="line">result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">//第二次提取						//34.78</span></span><br><span class="line">result = reg.exec(str);		</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">//第三次提取						//11</span></span><br><span class="line">result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">//第四次提取						//null</span></span><br><span class="line">result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<p><strong>第二种方式的操作：使用循环</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span> ((result = reg.exec(str)) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/613f3f8144eaada73959570e.png" alt="image-20210913141612135"></p>
<blockquote>
<p>这一种正则表达式的提取是一种非常高级的提取方法，我们可以在复杂操作里面使用这个方法，但是一般简单的提取操作，我们会使用更简单的方法</p>
</blockquote>
<hr>
<h4 id="match-提取"><a href="#match-提取" class="headerlink" title="match()提取"></a>match()提取</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//match方法不是正则表达式对象的方法，它是字符串对象的方法</span></span><br><span class="line"><span class="comment">//match方法是匹配的意思，根据正则表达式来匹配</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"今天是9月10日，唉呀！今天又跑到香港去玩了，买了好多东西，购物花了我￥346.77元，结果吃饭只能用美元，花了我$34.78元,坐港铁花了￥11元。"</span>;</span><br><span class="line"><span class="comment">//在上面的字符串里面，我们要提取所有的金额（美圆和人民币）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?&lt;=[\$￥])\d+(?:\.\d+)?/g</span>;</span><br><span class="line"><span class="comment">//以前是使用正则表达式为主体，去操作字符串</span></span><br><span class="line"><span class="comment">//现在是以字符串为主体，去匹配正则</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(reg);   <span class="comment">//['346.77', '34.78', '11']</span></span><br></pre></td></tr></table></figure>

<p>在上面的代码里面，我们可以看到，<code>match</code>方法与正则表达式对象里面的<code>exec</code>方法都是用于提取符要求的字符的，但是<code>exec</code>可以做到原子组的提取，而<code>match</code>则不行，如下所示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"我的身份证号是425789199011150105,张三的身份证号是12355420050405233x"</span>;</span><br><span class="line">    <span class="comment">//写一个正则，提取字符串，并提取每个人性别组成对象</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        [&#123;</span></span><br><span class="line"><span class="comment">            IDCard:"425789199011150105",</span></span><br><span class="line"><span class="comment">            birthday:"1990-11-15",</span></span><br><span class="line"><span class="comment">            sex:"女"</span></span><br><span class="line"><span class="comment">        &#125;,&#123;</span></span><br><span class="line"><span class="comment">            IDCard:"12355420050405233x",</span></span><br><span class="line"><span class="comment">            birthday:"2005-05-05",</span></span><br><span class="line"><span class="comment">            sex:"男"</span></span><br><span class="line"><span class="comment">        &#125;]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> reg1 = <span class="regexp">/\d&#123;17&#125;[\dx]/g</span>;</span><br><span class="line">    <span class="keyword">var</span> result1 = str.match(reg1); <span class="comment">//['425789199011150105', '12355420050405233x']</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面明显不是最好的处理办法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> reg2 = <span class="regexp">/\d&#123;6&#125;(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)\d&#123;2&#125;(\d&#123;1&#125;)[\dx]/g</span>;</span><br><span class="line">    <span class="keyword">var</span> result2 = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">while</span> ((result2 = reg2.exec(str)) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;</span><br><span class="line">            IDCard: result2[<span class="number">0</span>],</span><br><span class="line">            <span class="comment">// birthday:result2.slice(1,4).join("-"),</span></span><br><span class="line">            birthday: result2[<span class="number">1</span>] + <span class="string">"-"</span> + result2[<span class="number">2</span>] + <span class="string">"-"</span> + result2[<span class="number">3</span>],</span><br><span class="line">            sex: result2[<span class="number">4</span>] % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">"女"</span> : <span class="string">"男"</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：无论是<code>exec()</code>还是<code>match()</code> 在目前阶段进行提取操作的时候，最后是加一个全局修饰符<code>g</code></p>
</blockquote>
<h4 id="split-分割"><a href="#split-分割" class="headerlink" title="split()分割"></a>split()分割</h4><p>字符串的split方法之前我们已经讲过了，它是通过某一个特定的字符去拆分字符串形成数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"get-element-by-id"</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">"-"</span>);   <span class="comment">//["get", "element", "by", "id"];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"我们是123club组合我们的的年龄是19岁身高都在170公分以上"</span>;</span><br><span class="line"><span class="comment">//希望通过中间在数字去拆分 ["我们是","club组合哈组合我们的的年龄是","岁身高都在","公分以上"];</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = str1.split(reg1);</span><br></pre></td></tr></table></figure>

<h4 id="search-搜索"><a href="#search-搜索" class="headerlink" title="search()搜索"></a>search()搜索</h4><p>之前在字符串里面，我们可以通过<code>search</code>查找某个字符串的索引位置，只是那个时候使用是<code>indexOf</code></p>
<p><strong>以前的情况下面</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"大家好,我是人见人爱的张三，我的身高是170CM!"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"大家好，我是高富帅李四，我的身高是186CM!"</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">"大家好，我是美女西施，我的身高是169CM!"</span>;</span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">"大家好，我是古典成熟高质量男性小乐乐，我的身高是178CM!"</span>;</span><br><span class="line"><span class="comment">//在上面的字符串当中，找所有的数字的位置</span></span><br><span class="line">str1.indexOf(<span class="string">"170"</span>);</span><br><span class="line">str2.indexOf(<span class="string">"186"</span>);</span><br><span class="line">str3.indexOf(<span class="string">"169"</span>);</span><br><span class="line">str4.indexOf(<span class="string">"178"</span>);</span><br><span class="line"><span class="comment">//这个参数在变化，如果这里有100个变量，我就有可能要写100句话</span></span><br><span class="line">str1.search(<span class="regexp">/\d+/g</span>);</span><br><span class="line">str2.search(<span class="regexp">/\d+/g</span>);</span><br><span class="line">str3.search(<span class="regexp">/\d+/g</span>);</span><br><span class="line">str4.search(<span class="regexp">/\d+/g</span>);</span><br><span class="line"><span class="comment">//这个时候的参数就固定成了一个正则表达式</span></span><br></pre></td></tr></table></figure>

<h4 id="replace-替换"><a href="#replace-替换" class="headerlink" title="replace()替换"></a>replace()替换</h4><p>它是字符串的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"我爱你，你爱我吗？"</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = str.replace(<span class="string">"爱"</span>,<span class="string">"恨"</span>);  <span class="comment">//"我恨你，你爱我吗？"；</span></span><br></pre></td></tr></table></figure>

<p>replace方法默认情况下只会替换第一个匹配项，不会全局匹配，所以如果要全局匹配，则只能使用正则</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"我爱你，你爱我吗？"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = str.replace(<span class="regexp">/爱/g</span>,<span class="string">"恨"</span>);		<span class="comment">//"我恨你，你恨我吗";</span></span><br></pre></td></tr></table></figure>

<p>当我们所查找替换的元素一旦是通过正则匹配的，则<code>replace()</code>第二个参数就变了，它变成了一个回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"我爱你，你爱我吗？"</span>;</span><br><span class="line">str.replace(<span class="regexp">/爱/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个参数：p代表正册表达式的匹配项</span></span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>当正则表达式里面有原子组的时候</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"大家好，今天是2021-01-06 14:48:30,今天天气不好，有点冷"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;4&#125;-(\d&#123;2&#125;)-\d&#123;2&#125;\s(\d&#123;2&#125;):\d&#123;2&#125;:\d&#123;2&#125;/g</span>;</span><br><span class="line">str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">p,g1,g2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个参数：正则匹配的结果</span></span><br><span class="line">    <span class="comment">// 第后面开始的参数则代表原子组编号 group1   group2</span></span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">    <span class="built_in">console</span>.log(g1);</span><br><span class="line">    <span class="built_in">console</span>.log(g2);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/613f450f44eaada739626a89.png" alt="image-20210913152135000"></p>
<p>上面的<code>01</code>就是原子组1的结果，<code>02</code>就是原子组2的结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给一个连字符串例如：get-element-by-id转化成驼峰形（推荐使用正则表达式+replace的方式完成）</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"get-element-by-id"</span>;</span><br><span class="line"><span class="comment">//getElementById;</span></span><br><span class="line"><span class="keyword">var</span> str2 = str1.replace(<span class="regexp">/-([a-z])/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">p,g1</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(p,g1);</span></span><br><span class="line">    <span class="keyword">return</span> g1.toUpperCase();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>正则只对字符串进行操作</li>
<li>正则的创建方式要弄清楚</li>
<li>正则的规则<ul>
<li>一元符</li>
<li>原子组与原子表</li>
<li>重复匹配</li>
<li>原子组编号</li>
<li>前瞻后顾</li>
</ul>
</li>
<li>使用到正则的地方目前你们所接触只有<code>String</code>对象与<code>RegExp</code>对象</li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>给hexo加一些小插件</title>
    <url>/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="本地搜索功能"><a href="#本地搜索功能" class="headerlink" title="本地搜索功能"></a>本地搜索功能</h1><ol>
<li>插件主页：<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener" title="插件主页">hexo-generator-search</a></li>
<li>安装代码：<code>$ npm install hexo-generator-search</code></li>
<li>进行配置：在主题中的_config.yml文件中打开<a id="more"></a>
<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/1.png" class="" title="配置图片"></li>
<li>展示：<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/2.png" class="" title="功能展示"></li>
</ol>
<h1 id="网站运行时长"><a href="#网站运行时长" class="headerlink" title="网站运行时长"></a>网站运行时长</h1><blockquote>
<p>这个不需要下载插件，只需改代码。</p>
</blockquote>
<ol>
<li>在<code>hexo/themes/你的主题文件夹/layout</code>文件夹下找到你的<code>footer</code>文件，即脚布局文件，在对应的位置添加一下代码。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span id&#x3D;&quot;timeDate&quot;&gt;载入天数...&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;times&quot;&gt;载入时分秒...&lt;&#x2F;span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now &#x3D; new Date(); </span><br><span class="line">    function createtime() &#123; </span><br><span class="line">        var grt&#x3D; new Date(&quot;02&#x2F;14&#x2F;2018 12:49:00&quot;);&#x2F;&#x2F;此处修改你的建站时间或者网站上线时间 </span><br><span class="line">        now.setTime(now.getTime()+250); </span><br><span class="line">        days &#x3D; (now - grt ) &#x2F; 1000 &#x2F; 60 &#x2F; 60 &#x2F; 24; dnum &#x3D; Math.floor(days); </span><br><span class="line">        hours &#x3D; (now - grt ) &#x2F; 1000 &#x2F; 60 &#x2F; 60 - (24 * dnum); hnum &#x3D; Math.floor(hours); </span><br><span class="line">        if(String(hnum).length &#x3D;&#x3D;1 )&#123;hnum &#x3D; &quot;0&quot; + hnum;&#125; minutes &#x3D; (now - grt ) &#x2F; 1000 &#x2F;60 - (24 * 60 * dnum) - (60 * hnum); </span><br><span class="line">        mnum &#x3D; Math.floor(minutes); if(String(mnum).length &#x3D;&#x3D;1 )&#123;mnum &#x3D; &quot;0&quot; + mnum;&#125; </span><br><span class="line">        seconds &#x3D; (now - grt ) &#x2F; 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line">        snum &#x3D; Math.round(seconds); if(String(snum).length &#x3D;&#x3D;1 )&#123;snum &#x3D; &quot;0&quot; + snum;&#125; </span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML &#x3D; &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;; </span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML &#x3D; hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li>运行效果：<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/3.png" class="" title="运行效果"></li>
</ol>
<h1 id="添加RSS订阅功能"><a href="#添加RSS订阅功能" class="headerlink" title="添加RSS订阅功能"></a>添加RSS订阅功能</h1><ol>
<li>下载插件：<code>hexo-generator-feed</code><br>安装代码：<code>$ npm install hexo-generator-feed</code></li>
<li>启用插件：在博客工程文件根目录下(非主题目录)<code>_config.yml</code>文件中添加如下内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">plugins:</span><br><span class="line">  hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br></pre></td></tr></table></figure></li>
<li>主题中显示该功能：<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/4.png" class="" title="配置信息"></li>
<li>生成静态文件：<code>hexo g</code> 生成完成后点开RSS按钮可以看到：<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/5.png" class="" title="运行效果"></li>
<li>使用该功能：打开QQ邮箱之类的，填入自己的博客地址 <img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/6.png" class="" title="QQ邮箱"><img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/7.png" class="" title="QQ邮箱"></li>
</ol>
<h1 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h1><ol>
<li><p>这里我使用的是Valine（一款快速、简洁且高效的无后端评论系统）</p>
</li>
<li><p>我们的评论系统其实是放在LeanCloud上的，因此首先需要去注册一个账号 <a href="https://www.leancloud.cn/" target="_blank" rel="noopener" title="LeanCloud点我注册">LeanCloud点我注册</a></p>
</li>
<li><p>注册完以后需要创建一个应用，名字可以随便起，然后 <strong>进入应用</strong>-&gt;<strong>设置</strong>-&gt;<strong>应用key</strong><br>获取你的appid 和 appkey 如图所示：</p>
<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/9.png" class="" title="appid和appkey">
</li>
<li><p>拿到你的appid和appkey之后，打开主题配置文件 搜索 valine，填入appid 和 appkey<br>这是我的主题配置文件：</p>
<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/8.png" class="" title="主题配置文件">
</li>
<li><p>最后！记得在LeanCloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去（我的博客地址）</p>
<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/10.png" class="" title="我的博客地址">
<p>刷新一下~ 就可以看到评论框了。<br>效果展示：</p>
<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/11.png" class="" title="效果展示">
</li>
<li><p>前往LeanCloud的储存空间可以删除评论</p>
<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/13.png" class="" title="效果展示">

</li>
</ol>
<h1 id="添加本地在线编辑功能"><a href="#添加本地在线编辑功能" class="headerlink" title="添加本地在线编辑功能"></a>添加本地在线编辑功能</h1><blockquote>
<p>Hexo Admin 是一个本地在线式文章管理器，可以用直观可视化的方式新建、编辑博客文章、page页面，添加标签、分类等，并且支持剪贴板粘贴图片（自动在source_images_目录中创建文件),是不是感觉很棒，接下来我就简单讲述下Hexo Admin插件的安装</p>
</blockquote>
<ol>
<li>在你的hexo站点目录下，输入以下代码进行安装<br><code>npm install --save hexo-admin</code></li>
<li>下面你就可以启动服务，进行检查是否安装成功,注意，浏览器输入网址是:localhost:4000/admin,后面记得加/admin,4000是你的端口号，记得改成你的启动端口号<br><code>hexo s</code>本地启动服务<br>效果图：<img src="/2020/04/25/%E7%BB%99hexo%E5%8A%A0%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/12.png" class="" title="效果图"></li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机三级数据库笔记</title>
    <url>/2021/03/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%89%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="计算机三级数据库第一套题"><a href="#计算机三级数据库第一套题" class="headerlink" title="计算机三级数据库第一套题"></a>计算机三级数据库第一套题</h1><h2 id="一、选择题"><a href="#一、选择题" class="headerlink" title="一、选择题"></a>一、选择题</h2><ol>
<li><p><strong>应用服务器</strong>从数据库服务器接收数据并返回给客户端。</p>
</li>
<li><p>关系模型是<strong>静态稳定的</strong>，关系是<strong>动态的</strong>，<strong>随用户操作变化</strong>。</p>
</li>
<li><p>设计人机界面可采用<strong>原型迭代法</strong>，首先进行用户界面<strong>初步设计</strong>，然后与用户不断讨论，改进设计方案。</p>
</li>
<li><p><strong>不能</strong>删除数据库中的日志内容，以获得更多的空间。（<strong>会破坏数据库的安全性和可靠性</strong>）</p>
</li>
<li><p>创建索引的SQL语句格式:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span>] <span class="keyword">index</span> &lt;索引名&gt; <span class="keyword">on</span> &lt;表名&gt; (&lt;列名&gt;[&lt;次序&gt;],&lt;列名&gt;[&lt;次序&gt;],) <span class="keyword">include</span> (属性名) <span class="keyword">where</span> 约束条件</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>（<em>）在对用户进行授权时 *</em>deny修饰符<strong>表示拒绝。</strong>权限冲突时deny优先**。</p>
<p>deny(拒绝)与不授权的区别:</p>
<blockquote>
<p>deny <strong>不可继承</strong>其他角色中已有的权限 ，不授权<strong>可以继承</strong>其他角色中已有的权限</p>
</blockquote>
</li>
<li><p><strong>db_datawriter</strong>角色具有:<strong>插入、删除、更新操作</strong>;不具有查询操作。</p>
</li>
<li><p>将属性值作为参数，<strong>不采用索引键值比较</strong>，而是采用一定的计算方法定位数据的是<strong>散列(哈希)索引</strong>。</p>
</li>
<li><p>系统数据库 master、model、msdb、tempdb和用户数据库，备份策略。</p>
<blockquote>
<p>master、model、msdb修改后<strong>立即备份</strong>。</p>
<p>tempdb<strong>无须备份</strong>、临时文件每次启动都会清空。</p>
<p><strong>用户数据库周期性备份</strong>。</p>
</blockquote>
</li>
<li><p>文件备份<strong>仅对数据库文件备份</strong>，<strong>不会对日志文件进行备份</strong>。</p>
<blockquote>
<p><strong>文件备份</strong>、<strong>差异文件备份</strong>完成后需要对日志文件再进行备份。</p>
<p><strong>完整数据库备份</strong>、<strong>差异数据库备份</strong>完成后<strong>不需要</strong>再备份日志文件。</p>
</blockquote>
</li>
<li><p><strong>介质故障</strong>，又称为<strong>硬故障</strong>，是指物理设备的损坏导致数据库无法运行。</p>
</li>
<li><p><strong>系统故障</strong>是指造成系统停止运转的任何事件，使得系统要重新启动。</p>
</li>
<li><p>（<em>）*</em>分布式数据库<strong>中的</strong>分布透明性**包括：</p>
<blockquote>
<p>分片透明性</p>
<p>位置透明性</p>
<p>局部数据模型透明性</p>
</blockquote>
</li>
<li><p>在并行数据库中，需要将表拆分到不同的磁盘上。</p>
<p>并行数据库常用划分方法有:</p>
<blockquote>
<p>轮转法、散列划分、范围划分</p>
</blockquote>
<p><strong>最适合整表扫描的拆分方式是:轮转法</strong></p>
<blockquote>
<p>轮转法在扫描时可以并行地从几个磁盘中读取数据，负载平衡，充分发挥了并行性。</p>
</blockquote>
</li>
</ol>
<h2 id="二、应用题"><a href="#二、应用题" class="headerlink" title="二、应用题"></a>二、应用题</h2><ol>
<li><p>数据库管理系统提供了数据定义语言(DDL),用于定义各种数据库对象。数据定义语句经DDL编译器编译后，各种对象的描述信息存放在数据库的<u><strong>数据字典</strong></u>中。(<strong>数据字典</strong>:数据项、数据结构、数据流、数据存储和数据处理)。</p>
</li>
<li><p>关系数据库中要求关系的主码不能为空，这属于数据模型三要素中的<strong><u>完整性约束</u></strong>（<strong>三要素</strong>:数据结构、数据操作和完整性约束）。</p>
</li>
<li><p>数据库主要角色及权限:</p>
<table>
<thead>
<tr>
<th align="center">角色</th>
<th align="center">权限</th>
</tr>
</thead>
<tbody><tr>
<td align="center">bulkadmin</td>
<td align="center">执行BULK INSERT语句(高效导入大量数据量的平面文件)</td>
</tr>
<tr>
<td align="center">dbccreator</td>
<td align="center">创建、修改、删除和还原数据库</td>
</tr>
<tr>
<td align="center">diskadmin</td>
<td align="center">管理磁盘文件</td>
</tr>
<tr>
<td align="center">processadmin</td>
<td align="center">管理在SQL Server实例中运行的进程</td>
</tr>
<tr>
<td align="center">securityadmin</td>
<td align="center">管理服务器登录账户</td>
</tr>
<tr>
<td align="center">serveradmin</td>
<td align="center">配置服务器范围设置</td>
</tr>
<tr>
<td align="center">setupadmin</td>
<td align="center">添加和删除链接服务器</td>
</tr>
<tr>
<td align="center">sysadmin</td>
<td align="center">在SQL Server中进行任何活动，该角色的权限跨越所有其它固定服务器角色。</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li><p>数据库管理系统一般通过周期性检查<u><strong>事物等待图</strong></u>来实现死锁检测。</p>
</li>
<li><p>一个事物执行过程中，其正在访问的数据被其他事物修改，导致处理结果不正确。这是由于不满足并发事物间的<strong><u>隔离性</u></strong>而引起的。</p>
</li>
<li><p>在数据库系统出现故障后进行恢复。</p>
<blockquote>
<p>故障时<strong>已经</strong>提交的执行<strong>redo</strong>操作</p>
<p>故障时<strong>未</strong>提交的执行<strong>undo</strong>操作</p>
</blockquote>
</li>
<li><p>并行数据服务器分为两种结构：<strong>完全共享资源结构</strong>和<strong>完全不共享资源结构</strong>。</p>
</li>
<li><p>（<em>）数据仓库是<u>*</em>一个面向主题的、集成的、非易失的、且随时间变化的数据集合**</u>。</p>
</li>
<li><p>粒度是反映数据库系统中综合程度的指标。表中属性<u><strong>细化越低，粒度越大</strong></u>。越详细粒度越小。</p>
</li>
</ol>
<h2 id="三、PL-SQL语句"><a href="#三、PL-SQL语句" class="headerlink" title="三、PL/SQL语句"></a>三、PL/SQL语句</h2><p><strong>格式：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 过程名</span><br><span class="line">@[参数名] [类型],@[参数名][类型] <span class="comment">/*过程首部 默认是输入参数 可以加output修饰 成为输出参数*/</span>  </span><br><span class="line"><span class="keyword">AS</span>		<span class="comment">/*as下面对应的&lt;PL/SQL&gt;块 为过程体*/</span></span><br><span class="line">	<span class="keyword">Declare</span></span><br><span class="line">	******</span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">	******</span><br><span class="line">	<span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h1 id="计算机三级数据库第二套题"><a href="#计算机三级数据库第二套题" class="headerlink" title="计算机三级数据库第二套题"></a>计算机三级数据库第二套题</h1><h2 id="一、选择题-1"><a href="#一、选择题-1" class="headerlink" title="一、选择题"></a>一、选择题</h2><ol>
<li><p>（<em>）*</em>存储管理器**负责检查用户是否具有数据访问权限。</p>
</li>
<li><p><strong>查询处理器</strong>会为编译好的查询语句生成执行计划，并根据执行计划访问相关数据。</p>
</li>
<li><p>三级模式结构和数据独立性：</p>
<blockquote>
<ol>
<li>在一个数据库中可以定义<strong>多个外模式</strong>，而<strong>内模式只有一个</strong>。</li>
<li>三级模式结构提供了数据独立性，即当数据的逻辑结构和存储结构发生变化时，应用程序不受影响。</li>
</ol>
</blockquote>
</li>
<li><p><strong>前触发型触发器</strong>只执行触发器指定的内容而不执行引发触发器的SQL语句。</p>
</li>
<li><p>（<em>）创建一个新的用户数据库时，该用户数据库主要数据文件的大小*</em>不能小于 model数据库**主要数据文件的大小。(model数据库为新数据库提供模板)。</p>
</li>
<li><p>在创建表时，当用check进行约束条件限制时，若其只涉及对某一列的约束则可以放在该列后面，<strong>如果是约束条件中涉及两列或两列以上，则为整个表的约束，放在表的最后面。</strong></p>
</li>
<li><p>视图在SQL语句相同的情况下不能提高查询效率。</p>
</li>
<li><p><strong>基于锁的并发控制技术</strong>：</p>
<p>数据库中的锁主要分为共享锁和排它锁。</p>
<blockquote>
<ol>
<li><strong>当事务T对某个数据加上排它锁时，T可以对该数据进行读和写，其他任何事务都不能再对该数据加任何类型的锁，直到T释放该锁才行；</strong></li>
<li><strong>当事务T对某个数据加上共享锁，则T只能对该数据进行读操作，不能修改数据，且其他事务也可以对该数据加共享锁但不能加排它锁。只有等到该数据没有被其他任何事务访问时才能加排它锁。</strong></li>
</ol>
</blockquote>
<blockquote>
<ol>
<li>锁是一种特殊的二元信号量，用来控制多个并发事物对共享资源的使用。</li>
<li>数据库系统可以采用先来先服务的方式防止出现活锁现象。</li>
<li>当数据库管理系统检测到死锁后，可以采用撤销死锁事物的方式解除死锁。</li>
</ol>
</blockquote>
</li>
<li><p><strong>主索引是根据数据对象的主键建立的索引</strong>，<strong>它们决定了被索引记录的位置</strong>，而<strong>辅助索引</strong>没有这样的限制，<strong>可以用于任何索引目的并且可以查找多个数据文件的存放位置</strong>。而<strong>位图索引一般在范围查询时使用</strong>。</p>
</li>
<li><p>表在创建时必须设置主码，<strong>若未设置</strong>则<strong>默认所有属性集合为主码</strong>。</p>
</li>
<li><p><strong>日志文件</strong></p>
<blockquote>
<ol>
<li><strong>日志写入顺序必须和并行事务执行的时间次序一致</strong>，因为这样才能在数据库恢复时进行redo和undo操作，<strong>从而保证数据的一致性而不会产生脏数据</strong>。</li>
<li><strong>必须先写日志再写数据库</strong>，这样当数据库发生故障时可以根据日志完全恢复，否则如果先写数据，当数据刚写完时，数据库故障而没来得及写日志，导致数据恢复时发生错误。</li>
<li><strong>日志文件中检查点记录的主要作用是提高系统出现故障后的恢复速率</strong>。</li>
</ol>
</blockquote>
</li>
<li><p>恢复数据库正确的实例语句：</p>
<p><strong>先恢复数据库，再恢复日志文件</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">restore</span> <span class="keyword">database</span> MyDB <span class="keyword">from</span> BK <span class="keyword">with</span> <span class="keyword">file</span>=<span class="number">1</span>,norecovery  <span class="comment">/*norecovery恢复后数据库不可以用*/</span></span><br><span class="line"><span class="keyword">restore</span> <span class="keyword">log</span> MyDB <span class="keyword">from</span> BK <span class="keyword">with</span> <span class="keyword">file</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>master数据库可以使用的备份方法<strong>只有完整备份</strong>。(master最重要的数据库)</p>
</li>
<li><p><strong>并行数据库</strong></p>
<blockquote>
<ol>
<li><strong>并行数据库系统的主要目的是通过高速通信介质连接多个可独立处理的单元以并行执行的方式完成对数据库系统的互联查询、内部查询以及各种内部操作</strong>。<strong>分布式数据库系统的主要目的是实现场地自治和数据全局透明共享</strong>。</li>
<li>层次结构可以分为两层，<strong>顶层是无共享结构</strong>，<strong>底层是共享内存或共享磁盘结构</strong>。</li>
<li><strong>无共享结构通过最小化共享资源来降低资源竞争</strong>，<strong>因此具有很高的可扩展性</strong>，<strong>适合于OLTP(联机事务处理)应用</strong>。</li>
<li><strong>并行数据库系统经常通过负载均衡的方法来提高数据库系统的业务吞吐率</strong>。</li>
</ol>
</blockquote>
</li>
<li><p>现有一个具有多个分店的大型连锁超市，……为了提高数据访问率，系统将每年每个分店的销售数据分成独立的数据表，这种划分方式为<strong><u>多维划分</u></strong>。（维是人们观察事物的角度，同样的数据从不同维进行观察可能会得到不同的结果。）</p>
</li>
<li><p><strong>分布式数据库</strong>的<strong>分配方式</strong>包括<strong>集中式、分割式、全复制式、混合式</strong>。</p>
<blockquote>
<ol>
<li><strong>集中式：所有数据片断都安排在一个场地上；</strong></li>
<li><strong>分割式：全局数据有且只有一份，它们被划分成若干片段，每个片段被分配在一个特定的场地上；</strong></li>
<li><strong>全复制式：每个站点都有全局数据的复制样本，数据的冗余性最大；</strong></li>
<li><strong>混合式：全局数据被分成若干个数据子集，每个子集都被安排在一个或多个不同的场地上，但每个场地未必保存所有数据。</strong></li>
</ol>
</blockquote>
</li>
<li><p><strong>联机事务处理(OLTP)</strong>和<strong>联机分析处理(OLAP)：</strong></p>
<blockquote>
<ol>
<li><p><strong>OLTP是对数据库联机的日常操作，通常是对一条记录的查询和修改，要求快速响应用户的请求，对数据的安全性、完整性及事务吞吐量要求很高。</strong></p>
</li>
<li><p><strong>OLAP是对数据的查询和分析操作，通常是对海量历史数据的查询和分析，要访问的数据量非常大，查询和分析操作十分复杂。</strong></p>
</li>
<li><p><strong>OLAP为宏观分析，OLTP为微观操作，所以前者面向中上层和决策者使用，而后者面向企业的中下层业务人员使用</strong>。</p>
</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="二、应用题-1"><a href="#二、应用题-1" class="headerlink" title="二、应用题"></a>二、应用题</h2><ol>
<li><p>设用UML设计某数据库应用系统，设计人员规划了一组应用程序集，该集合由动态链接库和可执行程序构成。为了展现这些应用程序集间的组织和依赖关系，以对源代码、可执行程序的发布等进行系统建模，应采用的UML图是 <u><strong>组件</strong></u> 图。</p>
<blockquote>
<p><strong><em>(组件图提供系统的物理视图。UML图形中组件图的用途是显示系统中的软件对其他软件组件(列如，库函数))的依赖关系，它可以在一个非常高的层次上显示，从而仅显示粗粒度的组件，也可以在组件包层次上显示。</em></strong></p>
</blockquote>
</li>
<li><p><strong>自连接</strong>是SQL语句中经常要用的连接方式，使用自连接可以将自身表的一个镜像当做另一张表来对待，从而得到一些特殊的数据。简而言之，<strong>自连接的本意就是将一张表看成多张表来做连接</strong>。</p>
</li>
<li><p>在SQL Server 2008的某用户数据库中，设有T表，现要在T表的c1列和c2列上建立一个复合唯一聚集索引，其中c1列值重复率为20%，c2列为10%。建立一个性能最优的索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span>  <span class="keyword">unique</span>  clustered  <span class="keyword">index</span>  Idx1 <span class="keyword">on</span> T(c2,c1);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>聚集索引是指索引项的顺序与表中记录的物理顺序一致的索引组织。用户可以在最经常查询的列上建立聚集索引以提高查询效率。unique表示要建立的每一个索引值对应唯一的数据记录，先对c2表索引然后对c1表索引，可以使索引的性能最优。</strong></p>
</blockquote>
</li>
<li><p>（<em>）数据库管理系统中的加锁协议规定了事务的加锁时间、持续时间和释放锁时间，其中<u>*</em>三级加锁**</u>协议可以完全保证并发事务数据的一致性。</p>
<blockquote>
<p><strong>三级加锁协议也称为三级封锁协议，它保证正确地调度事务的并发操作，是事务对数据库对象加锁、解锁必须遵守的一种规则。在运用X锁（排它锁）和S锁（共享锁）对数据对象加锁时，还需要约定一些规则，列如何时申请X锁和S锁、持锁时间、何时释放等。</strong></p>
</blockquote>
</li>
<li><p>（<em>）通常数据库的转储机制用三种，分别是*</em><u>完全转储</u><strong>、</strong><u>差量转储</u><strong>和</strong><u>增量转储</u>**。</p>
<blockquote>
<ol>
<li><p><strong>完全转储：是指对整个数据库中的数据全部重新备份，效率低，时间长；</strong></p>
</li>
<li><p><strong>差量转储：是指基于上一次完全转储基点之后变化转储，是对上次转储以后对所有文件中修改或删除的记录的转储，效率高，时间短；</strong></p>
</li>
<li><p><strong>增量转储是对数据库中凡是有记录变化的文件的整个文件进行复制，效率介于前两种转储方式之间。</strong></p>
</li>
</ol>
</blockquote>
</li>
<li><p>在数据仓库设计和建设过程中，设计者需要调查用户的决策或数据处理需求，并将功能相近且需要相关联数据支持的需求进行归类，得到不同的需求集合，并在企业数据模型中寻找能够满足各个需求集合的数据集合，然后针对各个数据集合开展数据仓库数据模型的设计。这种设计方法称为<strong><u>面向主题</u></strong>的设计方法。</p>
<blockquote>
<p><strong>面向主题的数据组织方式，就是在较高层次上对分析对象数据的一个完整并且一致的描述，能刻画各个分析对象所涉及的企业各项数据，以及数据之间的联系。所谓较高层级是相对面向应用的数据组织方式而言的，即按照主题进行数据组织的方式具有更高的数据抽象级别。与传统数据库面向应用进行数据组织的特点相对应，数据仓库中的数据面向主题进行组织。例如，一个生产企业的数据仓库所组织的主题可能有产品订货分析和货物发运分析等。</strong></p>
</blockquote>
</li>
<li><p><strong>数据仓库是为了构建新的分析处理环境而出现的一种数据存储的组织技术。</strong></p>
</li>
</ol>
<h1 id="计算机三级数据库第三套题"><a href="#计算机三级数据库第三套题" class="headerlink" title="计算机三级数据库第三套题"></a>计算机三级数据库第三套题</h1><h2 id="一、选择题-2"><a href="#一、选择题-2" class="headerlink" title="一、选择题"></a>一、选择题</h2><ol>
<li><p>对模式进行分解时，既要保证分解具有“无损连接性”，又要保证分解“保持函数依赖”。</p>
<blockquote>
<p><strong>无损连接</strong>，指分解的若干连接重组时可以精确恢复到原来的数据表，数据的记录既没有增加也没有减少。</p>
<p><strong>保持函数依赖</strong>，指原关系模式有的属性之间的隐含关系在分解后不能丢失。</p>
</blockquote>
</li>
<li><p><strong>数据库物理设计</strong></p>
<blockquote>
<ol>
<li>物理设计着眼于数据库底层的物理存储与存取，与操作系统和硬件环境及数据库管理系统密切相关。</li>
<li>为了提高系统的性能，应该根据应用情况将数据的易变部分和稳定部分、经常存储部分和存取频率较低的部分分开存放，较常用的放在高速读写的磁盘上。根据访问频率定。</li>
<li>物理设计过程中需要考虑设置合理的数据库管理系统参数和操作系统相关参数。</li>
<li><strong>物理设计过程中需要考虑RAID级别、操作系统的文件管理机制、数据库管理系统支持的索引类型。</strong></li>
</ol>
</blockquote>
</li>
<li><p><strong>三层浏览器/服务器(B/S)架构是现在比较流行的应用系统架构。</strong></p>
<blockquote>
<ol>
<li>表示层使用Web浏览器实现，位于客户端，一般无需安装其他程序。</li>
<li>数据层位于数据库服务器，由DBMS完成数据存储和数据存取等数据管理功能。</li>
<li>此架构将人机交互、应用业务逻辑和数据管理三类功能分离，提高了可维护性。</li>
<li><strong>与二层的客户/服务器(C/S)架构相比较。三层架构将更多的任务传给服务器端计算，所以增加了网络的通信量，其运行速度受制于网络，并不一定会提高。在适用Internet、维护工作量等方面，B/S比C/S强；在运行速度、数据安全和人机交互等方面，不如C/S.</strong></li>
</ol>
</blockquote>
</li>
<li><p><strong>关于关系数据模型和关系表的说法</strong></p>
<blockquote>
<ol>
<li>关系数据模型以集合论为基础表述和处理数据</li>
<li><strong>关系数据语言分为关系代数语言、关系演算语言和兼具两者双重特点的语言，如SQL，但所有这些语言的共同点是<u>非过程化的</u>集合操作语言。</strong></li>
<li>在关系表上执行select或delete操作时，DBMS会检查数据完整性约束。（错）查询数据表时SQL语句不会检查数据的完整性约束。</li>
</ol>
</blockquote>
</li>
<li><p>数据库物理设计</p>
<blockquote>
<ol>
<li>在频繁执行插入、修改和删除操作的表上建立索引可能会降低系统的整体性能。</li>
<li>在一张表的某列上需要频繁执行精确匹配查询时，可以考虑为此列<strong>建立哈希索引</strong>。</li>
<li><strong>为了提高写入性能，数据库一般应尽量避免存储在RAID10的磁盘存储系统中。(<u>错</u>！)RAID10比RAID5在写数据上更稳定、速度更快、所以应尽量存储在RAID10的磁盘存储系统中。</strong></li>
<li>如果系统中存在频繁的多表连接操作，可以考虑将这些基本表组织为聚集文件，以提高查询效率。</li>
</ol>
</blockquote>
</li>
<li><p>UML的类图</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>图形样式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>类</td>
<td>空心三角实线</td>
<td>子类对父类的继承</td>
</tr>
<tr>
<td>接口</td>
<td>空心三角虚线</td>
<td>多继承</td>
</tr>
<tr>
<td>聚合关系</td>
<td>空心菱形实线</td>
<td>弱拥有关系</td>
</tr>
<tr>
<td>合成关系</td>
<td>实心菱形实线</td>
<td>强拥有严格的整体关系</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>SQL中case when语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*简单赋值查询用法*/</span></span><br><span class="line">case sex</span><br><span class="line">when '1' then '男'</span><br><span class="line">when '2' then '女'</span><br><span class="line">else '其他'</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*复杂赋值查询用法*/</span></span><br><span class="line"><span class="keyword">case</span>  <span class="comment">/*注意这里没有变量名*/</span></span><br><span class="line">	<span class="keyword">when</span> Grade <span class="keyword">between</span> <span class="number">90</span> <span class="keyword">and</span> <span class="number">100</span> <span class="keyword">then</span> <span class="string">'优'</span></span><br><span class="line">	<span class="comment">/*省略*/</span></span><br><span class="line">	<span class="keyword">when</span> Grade <span class="keyword">between</span> <span class="number">60</span> <span class="keyword">and</span> <span class="number">69</span> <span class="keyword">then</span> <span class="string">'及格'</span></span><br><span class="line">	<span class="keyword">else</span> <span class="string">'不及格'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>标量函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">FUNCTION</span> dbo.GetTotal(@GoodID <span class="built_in">char</span>(<span class="number">6</span>))</span><br><span class="line"><span class="keyword">Returns</span> <span class="built_in">int</span> <span class="keyword">AS</span>          <span class="comment">/*AS可以去掉 注意此处是returns*/</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">Return</span> (<span class="keyword">select</span> <span class="keyword">sum</span>(销售价格) <span class="keyword">from</span> 销售表  <span class="keyword">where</span> 商品号=@GoodID)  <span class="comment">/*注意此处是return*/</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分区表是将一个表的数据按水平方式划分为不同的子集，从而可以更快速有效地访问数据子集。现有表R(A,B)以及针对该表的SQL语句，如果基于列A对R进行范围分区，该分区设计方案能提高其性能的SQL语句是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> A,<span class="keyword">sum</span>(B) <span class="keyword">from</span> R <span class="keyword">group</span> <span class="keyword">by</span> A</span><br></pre></td></tr></table></figure>

<p><strong>（A属性基于对R进行水平划分，即区别子集主要是通过A属性。）</strong></p>
</li>
<li><p><strong>（*）对于架构的说法：</strong></p>
<blockquote>
<ol>
<li><strong>架构是形成单个命名空间的数据库实体的集合。命名空间也是一个集合，其中每个元素的名称都是唯一的。架构与用户的关系是<u>一对多</u>的关系，<u>一个用户只能对应一个架构</u>，但多个用户可以共享一个架构。</strong></li>
<li><strong>架构相当于数据库对象的容器，在同一个数据库中架构不能重名。</strong></li>
<li><strong>架构是数据库中的逻辑命名空间，同一个数据库的不同架构中可以存在同名表。</strong></li>
<li><strong>在一个架构中可以定义表、视图等不同数据库对象</strong></li>
</ol>
</blockquote>
</li>
<li><p>设数据库管理员为SQL Server 2008默认实例中的某数据库实施了基于维护计划的数据库备份任务。配置完成后，发现此维护计划并未执行但数据库运行正常。有关此维护计划未执行的原因，最有可能的是 <u><strong>SQL Server 代理(MSSQLSERVER)</strong></u> 服务未启动。</p>
<blockquote>
<p><strong>SQL Server Agent是一个任务规划器的警报管理器，在实际应用环境下，可以先将那些周期性的活动定义成一个任务，然后让其在SQL Server Agent的帮助下自动运行。系统管理员，可以利用SQL Server Agent 向自己通知某些警告信息，从而定位出现的问题以提高管理效率。SQL Server Agent 主要包括以下几个组件：作业、警报和操作。</strong></p>
</blockquote>
</li>
<li><p><strong>SQL Server实例就是在数据库中存在的现实的数据库的例子，它是后台进程和数据库文件的集合</strong>。仅具有登录权限的用户对SQL Server 只能进行系统数据库中有关SQL Server的一些系统信息的查询，即只能对master、msdb数据库部分数据进行查询。.</p>
</li>
<li><p><strong>检测死锁有多种方法，包括超时法、等待图法等。事务等待图法动态地反映了所有事务的等待情况，并发控制的子系统<u>周期性地生成事务等待图进行检测</u>，而不是在执行每个事务时进行检测。</strong></p>
</li>
<li><p><strong>属于</strong>数据库日常监控内容：<strong>1.数据库空间使用情况。2.数据库缓冲区命中率情况。3.数据库中索引使用情况</strong>。</p>
<p><strong>不属于</strong>：数据库服务器网络是否畅通(操作系统管理员的职责)；数据库用户向数据库发送的每条SQL语句(数量庞大、且没有稳定的衡量指标，不属于监控范围)   </p>
</li>
<li><p>（<em>）*</em>数据库性能优化：**</p>
<blockquote>
<ol>
<li>增加派生性冗余列可以降低查询过程中的计算量。</li>
<li>增加冗余列可以减少查询过程中的UNION操作。（<strong>错</strong>）（增加冗余列指的是在多个表中添加相同的列，这样虽然增加了数据库服务器存储的负担，但可以减少查询过程中的JOIN（连接）操作，而不是UNION（并操作））</li>
<li>适当降低关系模式的规范化程度，可以减少查询过程中的JOIN操作。</li>
<li>当一个表的数据量超过一定规模时，可以采用分割表的方法提高效率。</li>
</ol>
</blockquote>
</li>
<li><p>减少数据库管理系统中的死锁，可以在<strong><u>应用程序设计过程</u></strong>中采取的措施</p>
<blockquote>
<ol>
<li>事务按同一顺序访问资源</li>
<li>将大事务切分成若干个小事务</li>
<li>使用绑定连接</li>
</ol>
</blockquote>
<p>检测事务等待图并撤销回路中的某个事务(<u><strong>不是在设计过程中</strong></u>  这是在数据库应用系统运行过程中由DBMS完成的操作)</p>
</li>
<li><p>数据库差异备份所备份的内容是：<strong>从最近的一次完整备份到当前时间数据库中变化的数据和日志。</strong></p>
</li>
<li><p>数据文件的空间使用量<strong>未必</strong>比日志文件大，因为日志是快速增长的。使用日志备份并<strong>不能降低数据库的备份空间。</strong></p>
</li>
<li><p><strong>（*）分布数据库分布透明性的描述:</strong></p>
<blockquote>
<ol>
<li>分片透明性是最高层次，指的是用户或应用程序只对全局关系进行操作而不必考虑关系分片的情况。</li>
<li>位置透明性是下一层次，指用户或应用程序只需了解数据分片情况，而不必了解片段的存储场地。</li>
<li>局部数据模型透明性指的是用户或用户程序不必了解局部场地上使用的是哪种数据模型，但是必须了解全局数据的分片情况，还需要了解各片段的副本复制情况及各片段和它们副本的场地位置分配情况。</li>
</ol>
</blockquote>
</li>
<li><p><strong>（*）元数据是关于数据的数据，或者叫做描述数据的数据。元数据描述了数据的结构、内容、链和索引等项内容。在关系数据中，这种描述就是对数据库、表、列等其他对象的定义。</strong></p>
</li>
</ol>
<h2 id="二、应用题-2"><a href="#二、应用题-2" class="headerlink" title="二、应用题"></a>二、应用题</h2><ol>
<li><p>如果数据文件中数据记录排列顺序与索引文件中索引项的排列顺序一致，则此种索引被称为<u><strong>聚集索引。</strong></u>(clustered)</p>
</li>
<li><p>关系数据库中的视图提供了<strong><u>逻辑</u></strong>数据独立性。</p>
</li>
<li><p>(<em>)在SQL Server 2008中，用于判断游标数据提取状态的全局变量是 <u>*</em>@@FETCH_STATUS**</u></p>
</li>
<li><p>datediff()函数用于计算两个日期之差。</p>
</li>
<li><p>在SQL Server 2008 中，只具有修改数据库中全部用户表数据权限的系统角色是<strong><u>db_datawriter</u></strong>。(9个SQL内置角色之一)</p>
</li>
<li><p>由于死锁导致的事务回滚属于数据库故障中的<u><strong>内部事务</strong></u>故障。</p>
<p>数据库系统中的故障的种类分为：</p>
<blockquote>
<p><strong>事务内部故障、系统故障、介质故障、计算机病毒。</strong></p>
<p><strong>事务内部故障分为预期事务内部故障和非预期事务内部故障。</strong>非预期的事务内部故障是不可预期的，不能由应用程序处理的，包括运算溢出、并发事务发生死锁而被撤销该事务、违反了某些完整性限制等。</p>
<p><strong>系统故障</strong>是造成系统停止运转的任何事件，使得系统需要重新启动。<strong>介质故障</strong>指硬件损坏等。</p>
</blockquote>
</li>
<li><p>(<em>)*</em>两阶段加锁协议<strong>可以保证事务调度的</strong><u>可串行</u>**性。</p>
<blockquote>
<p>DBMS对并发事务的不同的调度可能会产生不同的结果。为了衡量调度正确性，执行结果如果可以等价于串行调度则认为是正确的，这样的调度叫<strong>可串行调度</strong>。而<strong>两段加锁协议就是实现可串行调度的协议。</strong>若并发执行的所有事务均遵守两段锁协议，则这些事务的任何并发调度都是可串的。</p>
</blockquote>
</li>
<li><p>只复制最近一次数据库完全转储以来发生变化的数据的转储方式称为<strong>差量转储。</strong></p>
</li>
<li><p>(<em>)在分布数据库中，采用*</em><u>半连接</u>**操作可以减少场地之间的数据传输量。</p>
<blockquote>
<p>在一个关系传输到另一场地后，并非每个数据都参与连接操作，因此，不参与连接的数据或无用的数据不必在网络中来回传输。<strong>采用半连接操作即可在网络中只传输参与连接的数据。</strong></p>
</blockquote>
</li>
<li><p>(<em>)在进行多维分析时，如果将每年销售额投影到每个月上来进行观察，这种分析动作被称为*</em><u>钻取</u>**。</p>
<blockquote>
<p>常用的OLAP多维分析操作有切片、切块、旋转、下钻和卷起。</p>
<ol>
<li><strong>卷起</strong>：是在数据立方体中执行聚集操作，通过在维级别中上升或通过消除某个或某些维来观察更概括的数据。</li>
<li><strong>下钻</strong>：是通过在维级别中下降或通过引入某个或某些维来更细致的观察数据。</li>
<li><strong>切片和切块</strong>：实现局部数据的显示，帮助用户从众多混杂的数据中进行选择。</li>
<li><strong>旋转</strong>：就是改变维的方向。</li>
</ol>
</blockquote>
</li>
<li><p>（<em>）数据仓库中，元数据主要分为*</em><u>技术</u><strong>元数据和</strong><u>业务</u>**元数据两类。</p>
</li>
<li><p>创建视图中的 with schemabinding 关键字：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名</span><br><span class="line">	<span class="keyword">with</span> schemabinding</span><br><span class="line">	<span class="keyword">as</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>schemabinding 选项，防止视图所引用的表在视图未被调整的情况下发生改变。一旦视图指定了with  schemabinding 选项，那么在修改当前视图的表或视图时，一旦对当前视图产生影响（导致视图失效），则不允许修改。</p>
</blockquote>
</li>
</ol>
<h2 id="三、分区方案"><a href="#三、分区方案" class="headerlink" title="三、分区方案"></a>三、分区方案</h2><ol>
<li><p>基于RangePF1分区函数创建分区方案RangePS1，每个分区对应一个文件组。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">partition</span> scheme RangePS1</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">partition</span> RangePF1</span><br><span class="line"><span class="keyword">to</span>(文件组,文件组,文件组,文件组)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用RangePS1分区方案创建一个分区表PartitionT(Gid,GoodName,Price)，该表基于Gid列创建分区</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> PartitionT(</span><br><span class="line">	Gid <span class="built_in">int</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>) primary <span class="keyword">key</span>,</span><br><span class="line">	GoodName <span class="built_in">varchar</span>(<span class="number">40</span>),</span><br><span class="line">	Price <span class="built_in">float</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">on</span> RangePS1(Gid)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="计算机三级数据库第四套题"><a href="#计算机三级数据库第四套题" class="headerlink" title="计算机三级数据库第四套题"></a>计算机三级数据库第四套题</h1><h2 id="一、选择题-3"><a href="#一、选择题-3" class="headerlink" title="一、选择题"></a>一、选择题</h2><ol>
<li><p>用SQL语句描述事务活动。<strong>不属于逻辑设计所包含的活动</strong><u>（SQL语句通常不认为是设计范畴，已经实现了）</u></p>
</li>
<li><p>（<em>）包含索引设计的层次是：<u>*</em>数据持久层**</u>。</p>
<blockquote>
<p>数据库应用系统设计包括四个层次：1.表示层 、2.业务逻辑层 、3.数据访问层、4.数据持久层</p>
<p>数据持久层的设计工作属于数据组织与存储等方面的<strong>物理设计</strong>内容。</p>
<p>索引设计属于物理设计。</p>
</blockquote>
</li>
<li><p><strong>查询处理器</strong>和<strong>存储管理器</strong>是数据库管理系统中的核心模块。</p>
<blockquote>
<ol>
<li>查询处理器中的DML编译器会对用户提交的DML语句进行优化，并将其转换能够执行的底层数据库操作指令。</li>
<li>存储管理器中的缓冲区管理器负责将从磁盘读出的数据块放入内存缓冲区，同时也负责对缓冲区中的数据块进行维护。</li>
<li>查询处理器中的DDL编译器编译或解释用户提交的DDL语句，并将生成的元数据存储在数据库的数据字典中。</li>
<li>查询处理器中的查询执行引擎会会根据编译器产生的指令完成具体数据库数据访问功能。</li>
</ol>
</blockquote>
<p><strong>补充：</strong>DML数据操作语言，如：insert、update、delete;</p>
<p>​             DDL数据定义语言，如：create table、drop、alter;</p>
</li>
<li><p>触发器中<strong>inserted</strong>表用于存储insert和update语句所影响行的新值的副本，<strong>deleted</strong>表用于存储delete和update语句所影响行的旧值的副本。</p>
</li>
<li><p>关于SQL Server 2008中视图的说法：</p>
<blockquote>
<ol>
<li>数据库只存储标准视图的定义，并不存储标准视图的内容。</li>
<li>(*)如果在视图上创建了唯一聚集索引，则数据库中将保存该视图的内容。</li>
<li>索引视图引用的基本表必须与视图在同一个数据库中。</li>
</ol>
</blockquote>
</li>
<li><p>(*)关于索引视图的说法:</p>
<blockquote>
<ol>
<li>当很少对基表数据进行更改操作时，适合建立索引视图。</li>
<li>（*）索引视图的数据物理地保存在数据库中，因此建立索引视图会占用更多的存储空间</li>
<li>如果Group By列具有高基数度的数据聚合，则不适合建立索引视图。</li>
<li>对于经常执行连接和聚合操作的查询，适合建立索引视图。</li>
</ol>
</blockquote>
</li>
<li><p>关于SQL Server 2008 中guest用户的说法：</p>
<blockquote>
<ol>
<li>guest用户没有对应的登录账户名</li>
<li>通过授权语句可以启用数据库中的guest用户（默认为禁用状态）</li>
<li>所有数据库用户都<strong><u>不是</u></strong>继承该数据库中guest用户的权限</li>
<li>任何SQL Server 登录账户都可以访问启用了guest用户的数据库</li>
</ol>
</blockquote>
</li>
<li><p>（*）关于SQL Server 2008 身份验证模式的说法：</p>
<blockquote>
<ol>
<li>在<strong>Windows身份验证模式</strong>下，不允许 sa 登录到SQL Server服务器</li>
<li>不管是哪种身份验证模式，Windows中的Administrator无需授权就可登录到SQL Server服务器</li>
<li>安装好SQL Server之后，可以根据需要随时更改身份验证模式</li>
<li>在<strong>Windows身份验证模式</strong>下，<strong>所有Windows用户登录到SQL Server服务器都无需提供用户名和密码</strong>，但SQL Server会从用户登录到Windows时提供的用户名和密码<strong>查找当前用户信息</strong>，判断其是否是SQL Server的合法用户，不是，则拒绝登录。</li>
</ol>
</blockquote>
</li>
<li><p>关于数据库实施、运行和维护的说法中，最恰当的是</p>
<blockquote>
<p><strong>对于数据量极大的中大型系统，不需要等待所有的数据都入库后才开始试运行，可以先装载少量的数据，等到试运行的结果符合设计的要求后，再批量装入全部数据。</strong></p>
</blockquote>
</li>
<li><p>(<em>)设某数据库服务器中配置有2块300GB和1块500GB的硬盘，为了保证可靠性，数据库管理员在3块硬盘上建立了*</em>RAID5<strong>。建立了RAID5后，可用的磁盘空间为</strong>600GB**</p>
<blockquote>
<p><strong>Raid5需要3块硬盘（Raid 10需要4块），并把数据和相对应的奇偶校验信息存储到组成Raid5的各个磁盘上。其中任意 N-1 块磁盘上都存储完整数据，也就是说有相当于一块硬盘容量的空间用于存储奇偶校验信息。</strong></p>
</blockquote>
</li>
<li><p>（<em>）数据库的恢复顺序：*</em>1.恢复最近的完全数据库备份；2.恢复完全数据库备份之后的最近的差异数据库备份；3.按日志备份的先后顺序恢复自最近的完全或差异数据库备份之后的所有日志备份。**</p>
</li>
<li><p>（*）XML数据库是一种新型的数据库管理系统。下列关于XML数据库的说法：</p>
<blockquote>
<ol>
<li><p><strong>目前 XML数据库主要包括XEDB、NXD和 HXD三种类型。</strong></p>
</li>
<li><p><strong>很多关系数据库厂商在其传统的数据库产品中进行了扩充，使其能够处理XML文档</strong></p>
</li>
<li><p><strong>在数据库本身具有层次特征时，XML文档能够清晰地表达数据的层次特征。</strong></p>
</li>
<li><p>（错！）由于XML文档本身带有标记，可以自描述，因此XML数据库并不对XML文档进行解析。（<strong>解释：XML文档自身标记只是对本身的描述，需要数据库的解析才能达到真正用途</strong>）</p>
</li>
</ol>
</blockquote>
</li>
<li><p>下列关于分布式数据库和并行数据库的说法</p>
<blockquote>
<ol>
<li>（错）为了满足高并发业务的需要，共享内存结构的并行数据库比较适用于如银行出纳、民航售票等OLTP应用。（解析：OLTP应用需要进行大量的并行事务，因此若采用共享内存结构会引起大量数据冲突。）</li>
<li>（错）在分布式数据库的查询中，导致数据传输量大的主要原因是数据间的连接操作和<u>选择</u>操作。（解析：是连接操作和并操作。）</li>
<li>（对）<strong>如果数据分布不合理，并行数据库仅仅依靠多处理器，共享硬件资源等手段是无法实现真正意义上的并行处理的，也无法使其性能最优化。</strong></li>
<li>（错）与集中式数据库系统的事务相比，分布式数据库系统中只需要一个场地完成提交即可完成一个全局事务，这正是分布式数据库的优越之处。(解析：<strong>分布式数据库因为不同的分片和副本，因此很多时候在一个场地完成提交不能完成全局事务，如虽完成某片数据更新，却并没有完成全局数据更新。</strong>)</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="二、应用题-3"><a href="#二、应用题-3" class="headerlink" title="二、应用题"></a>二、应用题</h2><ol>
<li><p>数据库管理系统为用户和应用程序提供了<strong><u>DDL</u></strong>语言，用此语言可以定义数据库的模式结构，但此语言执行后的结果不能回滚。（<strong>DDL：数据库模式定义语言，用于描述数据库中要存储的现实世界实体的语言；DML：数据操纵语言，用户通过它可以实现对数据库的基本操作。</strong>）</p>
</li>
<li><p>当用户在一个关系表的某一列上建立一个非聚集索引（该表没有聚集索引）时，数据库管理系统会自动为该索引维护一个索引结构。该索引结构中的记录是由<strong><u>索引列列值</u></strong>和它相对的<strong>指针</strong>构成的。</p>
</li>
<li><p>在UML中，当要描述状态之间的转换时，可通过<strong><u>时间图</u></strong>来体现时间因子的作用。</p>
</li>
<li><p>（<em>）在SQL Server 2008中，能够出现在Select语句目标列中的用户自定义函数是*</em><u>标量</u><strong>函数。（</strong>SQL Server 2008 支持三种用户自定义函数：标量函数、内嵌表值函数和多语句表值函数。标量函数可以出现在select语句目标列中，其他两个函数必须放在select语句的from子句中。**）</p>
</li>
<li><p>（*）SQL Server 2008 中声明游标的语句为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Declare</span> vendor_cursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line">SELECT...</span><br></pre></td></tr></table></figure>
</li>
<li><p>SQL Server 2008中设置 不允许用户获得对表的某种操作权限的命令为：Deny 对象权限名 ON {表名|视图} TO {数据库用户名|用户角色名}。</p>
</li>
<li><p>（<em>）在OLAP的实现方式中，以多维数据作为存储·结构的被称作 <u>*</em>M<strong></u>OLAP。（</strong>MOLAP称为基于多维库的OLAP，这种OLAP的核心是多维数据库技术。MOLAP工具以多维数据库的形式将元数据、基础事实数据和导出数据存储在以多维数组为基本存储结构的多维数据库中。**）</p>
</li>
</ol>
<h1 id="计算机三级数据库第五套题"><a href="#计算机三级数据库第五套题" class="headerlink" title="计算机三级数据库第五套题"></a>计算机三级数据库第五套题</h1><h2 id="一、选择题-4"><a href="#一、选择题-4" class="headerlink" title="一、选择题"></a>一、选择题</h2><ol>
<li><p><strong>建立数据仓库不是简单的把企业的各种应用集中在一起，而是利用企业信息系统生成的数据，<u>以面向主题、集成</u>的方式合理组织数据，解决数据分析应用和企业基本业务之间的性能冲突问题。</strong></p>
</li>
<li><p><strong>数据库应用系统设计</strong>需要考虑<strong>数据组织与存储</strong>、<strong>数据访问与处理</strong>、<strong>应用设计</strong>等几个方面。</p>
</li>
<li><p><strong>视图</strong>中<strong>可以使用</strong>order by 语句；<strong>子·查询语句</strong>中<strong>不能使用</strong>order by 语句。</p>
</li>
<li><p>优化查询的说法：</p>
<blockquote>
<ol>
<li><strong>避免或简化排序的目的是实现查询优化。</strong></li>
<li>在保证数据库一致性的前提下，将频繁操作的多个可以分割的处理过程放在一个存储过程中，这样可以大大提高系统的响应速度。（<strong>错</strong>）（<strong>解释</strong>：放在<strong>多个存储</strong>过程中，才可以提高系统的响应速度。）</li>
<li>使用<strong>游标</strong>会占用较多的系统资源，尤其对于大规模并发量的情况下，<strong>很容易使得系统资源耗尽而崩溃</strong>，而使用<strong>临时表</strong>能够<strong>加速查询。</strong></li>
<li><strong>相关子查询不可以加速查询。</strong></li>
</ol>
</blockquote>
</li>
<li><p>下列全部属于结构图的组图是</p>
<blockquote>
<p>类图、对象图、组件图、部署图、用例图。</p>
</blockquote>
<p><strong>结构图是指以模块调用关系为线索，用自上而下的连线表示调用关系并注明参数传递的方向和内容，从宏观上反应模块层次结构的图形。</strong></p>
</li>
<li><p>关系表与元组</p>
<blockquote>
<ol>
<li>关系表在逻辑上由一系列元组组成。</li>
<li>每个元组由多个属性组成。</li>
<li><strong>每个元组可以用数据库磁盘文件中的一个逻辑记录来存储</strong>。（<strong>记录包括多个域</strong>）</li>
<li><strong>元组的每个属性对应文件记录的一个域。</strong></li>
</ol>
</blockquote>
</li>
<li><p>ADO对象模型中，RecordSet对象的AddNew方法的功能是：<strong>在对应的数据库表中增加一条新记录。</strong></p>
<blockquote>
<p> RecordSet 对象<strong>用于操作来自提供者的数据</strong>。使用ADO时，<strong>通过RecordSet对象可对几乎所有数据进行操作</strong>，<strong>所有RecordSet对象均使用记录 (行) 字段 (列) 进行构造。</strong></p>
<p> <strong>RecordSet的常用方法为：</strong></p>
<ol>
<li>AddNew，创建一条新记录；</li>
<li>Cancel，撤销一次执行；</li>
<li>Close，关闭一个RecordSet；</li>
<li>Delete，删除一条记录或一组记录；</li>
<li>MoveNext，把记录指针移动到下一条记录。</li>
</ol>
</blockquote>
</li>
<li><p>属于优化SQL语句执行效率方法的有：</p>
<blockquote>
<ol>
<li>利用存储过程封装频繁使用的SQL语句。</li>
<li>不要随意使用游标</li>
<li>合理使用相关子查询</li>
</ol>
</blockquote>
</li>
<li><p>DBAS生命周期模型中时间最长的阶段是：<u><strong>运行管理与维护</strong></u>（是一个长久的过程，时间一般是以年为单位，其成本消耗也是巨大的）</p>
</li>
<li><p><strong>数据仓库</strong>不是用做日常查询，也不是汇总和统计，而<strong>主要用于提取数据中的潜在信息和知识。</strong></p>
</li>
<li><p><strong>数据挖掘采用适当的算法</strong>，从<strong>数据仓库</strong>的海量数据中<strong>提取具有潜在价值的信息和知识。</strong></p>
</li>
<li><p>（<em>）分布式数据库系统的“分片透明性”位于*</em><u>全局概念模式与分片模式之间</u>**。</p>
<blockquote>
<p><strong>分片透明性</strong>。<strong>用户编写程序只须对全局关系进行操作</strong>，不必考虑数据的分片及存储场地。<strong>当分片模式改变时，只须改变全局概念到分片模式的映象，而不会影响全局概念模式和应用程序，即实现了分片透明性</strong>。 </p>
</blockquote>
</li>
<li><p>（<em>）*</em>关于操作型数据和DSS(分析)型数据特征有如下说法:**</p>
<blockquote>
<ol>
<li>操作型数据更新频率高，DSS型数据一般不更新</li>
<li>操作型数据是详细的，DSS型数据是综合的</li>
<li>操作型数据处理需求先可知，DSS型数据处理需求事先不明确</li>
<li><strong>操作型数据对性能要求较高、无冗余</strong>。</li>
</ol>
</blockquote>
</li>
<li><p>一般而言，分布式数据库查询优化的首要目标是：<strong>使查询时通信代价最省</strong>。</p>
<blockquote>
<p>首先，通信代价较 I/O代价容易估计。其次，对于分布式数据库查询优化而言，<strong>通信代价比 I/O代价和CPU代价更为重要</strong></p>
</blockquote>
</li>
<li><p>关于事务调度：</p>
<blockquote>
<ol>
<li>调度分为<strong>串行调度</strong>和<strong>并发调度</strong>。</li>
<li><strong>串行调度</strong>的特点是<strong>一个事务的所有操作都执行完后才开始执行另一个事务</strong>。</li>
<li>多个事务的调度必须保持每个事务的操作在<strong>事务中的执行顺序不变</strong></li>
</ol>
</blockquote>
<p>事务的四大特性：①原子性 ②一致性 ③隔离性 ④持久性</p>
</li>
<li><p>事务日志用于保存：<strong>对数据的更新操作</strong>（它存储对数据进行的所有更改）</p>
</li>
</ol>
<h2 id="二、应用题-4"><a href="#二、应用题-4" class="headerlink" title="二、应用题"></a>二、应用题</h2><ol>
<li><p>数据库管理员要随时观察数据库的动态变化，并在数据库出现错误、故障或产生不适应的情况时能够随时采取有效措施保护数据库。这种监控机制称为<strong><u>手动监控机制</u></strong>。</p>
<blockquote>
<p>对数据库系统的监控分为<strong>手动监控机制和自动监控机制</strong>两种。</p>
</blockquote>
</li>
<li><p>在SQL中，用<strong><u>distinct</u></strong>关键词消除重复出现的元组。</p>
</li>
<li><p>事务是数据库执行的基本单位，如果一个事务执行成功，则全部更新提交；如果一个事务执行失败，则已做过的更新被恢复原状，好像整个事务从未执行过，这就是保持数据库处于<strong><u>一致性</u></strong>状态。</p>
</li>
<li><p>（<em>）数据仓库是一个面向主题的、集成的、时变的、非易失的数据集合，支持管理部门的决策过程，数据仓库通过数据转移从多个数据源提取数据，为了解决不同数据源格式上的不统一、需要进行的数据操作是*</em><u>转换</u>**。</p>
<blockquote>
<p><strong>数据转换</strong>的主要任务是对<strong>数据粒度以及不一致的数据进行转换</strong>。</p>
</blockquote>
</li>
<li><p>（<em>）如果数据库中的一个基本表中的数据量很少，且插入、删除、更新等操作频繁，该基本表最佳采用的文件结构是*</em><u>堆文件</u>**。</p>
<blockquote>
<p><strong>堆文件</strong>：也称为无序文件。在堆文件中，记录随机地存储在文件物理空间中，新插入的记录存储在文件的末尾。</p>
</blockquote>
</li>
<li><p>（<em>）在UML模型中，用于表达一系列的对象、对象间的联系以及对象间发送和接收消息的图是*</em><u>通信图或协作图</u>**。</p>
<blockquote>
<p><strong>在UML模型中，通信图是交互图的一种，也被称作协作图。它是表达对象之间的联系以及对象间发送和接收消息的图。</strong></p>
</blockquote>
</li>
</ol>
<h1 id="计算机三级数据库第六套题"><a href="#计算机三级数据库第六套题" class="headerlink" title="计算机三级数据库第六套题"></a>计算机三级数据库第六套题</h1><h2 id="一、选择题-5"><a href="#一、选择题-5" class="headerlink" title="一、选择题"></a>一、选择题</h2><ol>
<li><p><strong>DBAS需求分析</strong>阶段的性能分析是分析DBAS应具有的性能指标。</p>
<p><strong>其性能指标有</strong></p>
<blockquote>
<ol>
<li>数据操作响应时间，或数据访问响应时间；</li>
<li>系统吞吐量，即指系统在单位时间内可以完成的数据库事务或查询的数量；</li>
<li>允许并发访问最大用户数；</li>
<li>每TPS(price per TPS)代价值。</li>
</ol>
</blockquote>
</li>
<li><p>在信息系统的需求分析中，广为使用的DFD建模方法属于<strong><u> 分析方法</u></strong>。</p>
<blockquote>
<p>自顶向下的结构化分析法</p>
</blockquote>
</li>
<li><p>关于索引的说法</p>
<blockquote>
<ol>
<li>（<em>）*</em>聚集索引的键值可以重复**。</li>
<li>索引是<strong>典型的空间换取时间的方法</strong>，因此在设计索引时要在空间和时间两者之间进行权衡。</li>
<li>建立聚集索引时，数据库管理系统会按照聚集索引键值对数据进行排序。</li>
<li><strong>当经常进行范围查询时</strong>，在<strong>范围列上建立索引可以提高该类查询的效率</strong>。</li>
</ol>
</blockquote>
</li>
<li><p><strong>（*）不适合建立索引的情况</strong>：</p>
<blockquote>
<ol>
<li>查询中很少使用或参考的列不适合建立索引。</li>
<li>只有很少量数据的值也不适合建立索引。</li>
<li><strong>经常进行更新的列不适合建立索引</strong>。</li>
</ol>
</blockquote>
</li>
<li><p><strong>（*）适合建立索引的情况</strong>：</p>
<blockquote>
<ol>
<li><strong>经常需要搜索的列上</strong>，可以加快搜索的速度；</li>
<li><strong>在经常使用连接的列上（这些列主要是一些外键）</strong>可以加快连接速度，<strong>在经常需要根据范围进行索引的列上创建索引</strong>。因为索引已经排序，其指定的范围是连续的；</li>
<li><strong>在经常使用where子句的列上创建索引</strong>，加快条件的判断速度。</li>
</ol>
</blockquote>
</li>
<li><p>数据库概念设计是面向企业或组织中的数据需求的。下列是有关概念设计的说法：</p>
<blockquote>
<ol>
<li><strong>按照具有相同属性特征原则对客观事物进行分类</strong>，在分类的基础上概括命名，得到实体集。</li>
<li>从一个联系的两端（两个方向）确定实体集之间联系的基数，并把联系的基数标注在模型中。</li>
<li>要保证一个实体集中定义的<strong>每一个属性有意义、不重名</strong>。</li>
</ol>
<p><strong>（错误）</strong>分析和定义实体集中的每一个实例，并用有意义的符号或文字分别描述它们。<strong>（这是对实体集的命名）</strong></p>
</blockquote>
</li>
<li><p><u><strong>硬件容错</strong></u>最完全的方法是设计两套相同的数据库系统同时工作，数据的变化也同步，空间有一定的距离，<strong>因此同时破坏两套的概率几乎为零</strong>，这样就能达到数据库的完全安全。</p>
</li>
<li><p>（*）现有SQL Server 2008 数据库服务器，其中一个数据库占用80GB的空间，另有一台用于备份的计算机，该机器上有4个大小均为50GB的硬盘分区。若要将此数据库完全备份到该计算机上，则</p>
<blockquote>
<p><strong>可以先在每个分区上分别建立一个备份设备</strong>，指定每个设备的大小均为20GB，并建立一个包含这4个备份设备的<strong>备份媒体集</strong>，<strong>最后再用此备份媒体集备份数据库。</strong></p>
</blockquote>
</li>
<li><p>（<em>）数据库*</em>系统总体设计<strong>的主要内容包括</strong>确定DBAS体系结构<strong>、</strong>软硬件选型和配置设计<strong>、</strong>应用软件总体设计<strong>和</strong>业务规则初步设计**。</p>
</li>
<li><p>统一建模语言UML是一种常用于数据库系统设计和开发的可视化建模语言。关于UML，有下列说法：</p>
<blockquote>
<ol>
<li>UML中的<strong>视图是由一个或多个图组成的，一个图是系统模型中的某个侧面的展示</strong>。</li>
<li>用于描述系统的物理部署情况的是<strong>部署视图</strong>。</li>
<li><strong>类图和对象图都是UML的逻辑视图</strong>，用于描述系统在某个时间的静态结构。</li>
<li>在用例图中，与系统交互的人和其他实体<strong>都可以成为系统的角色</strong>。</li>
</ol>
</blockquote>
</li>
<li><p><strong>静态转储时</strong>，<strong>不能进行其他事务</strong>；<strong>动态转储时</strong>，<strong>允许并发操作</strong>，用户操作和转储操作同时进行，但<strong>会降低一致性</strong>。</p>
</li>
<li><p>（<em>）*</em>事务的四个性质**：</p>
<blockquote>
<ol>
<li><p><strong>原子性</strong>：描述的是<strong>事务中包括的诸多操作为了保持一致性要么都做，要么都不做</strong>。</p>
</li>
<li><p><strong>一致性</strong>：描述的是<strong>事务执行结果从一个一致性到另一个一致性的变化</strong>。</p>
</li>
<li><p><strong>隔离性</strong>：<strong>保证其并行结果的正确性</strong>。                                                                                          </p>
</li>
<li><p><strong>持久性</strong>：<strong>对数据库的改变时永久的</strong>，当事物提交后断电，<strong>结果不受影响</strong>。</p>
</li>
</ol>
</blockquote>
</li>
<li><p>（*）在分布式数据库应用系统中，对全局关系进行分片设计时，说法正确的是</p>
<blockquote>
<p><strong>对于一个全局关系中的任意数据</strong>，<strong>不允许其不属于任何一个片段</strong>，<strong>也不允许某些数据同时属于不同的片段</strong>。</p>
</blockquote>
<p><strong>（*）数据分片有以下三个原则：</strong></p>
<blockquote>
<ol>
<li><strong>完整性原则：</strong>即全局关系的<strong>所有数据项必须包含在某个片段中</strong>，<strong>否则将导致数据库不完整</strong>，<strong>造成某些片段数据丢失</strong>；</li>
<li><strong>重构性原则：</strong>即<strong>所有片段必须能够还原全局关系</strong>；</li>
<li><strong>不相交原则（对垂直分片的主键除外）：</strong>对于一个全局关系，要保证数据不丢失，则<strong>必须要属于某个片段</strong>，即<strong>不允许不属于任何一个片段</strong>，<strong>也不允许一个全局关系的某些数据既属于该全局关系的某些片段又属于该全局关系的另一个片段**</strong>（垂直关系中的码属性除外）**。</li>
</ol>
</blockquote>
</li>
<li><p>（*）关于OLTP和OLAP，有下列说法</p>
<blockquote>
<ol>
<li><p><strong>OLTP的安全性比OLAP要高，实施起来比较困难。</strong></p>
</li>
<li><p><strong>OLTP系统要求系统必须具有很高的响应速度，而OLAP对系统的响应速度较为宽松。</strong></p>
</li>
<li><p><strong>OLTP也称为面向交易的处理系统</strong>，实时处理数据，因此响应速度必须要很高。</p>
</li>
<li><p><strong>OLAP是数据仓库系统的主要应用</strong>，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。<strong>典型的应用就是复杂的动态的报表系统。</strong></p>
<p><strong>OLAP的特点一般有</strong>：<strong><u>实时性要求不是很高、数据量大、决策支持，查询动态，随时提出查询的要求。</u></strong></p>
</li>
</ol>
</blockquote>
</li>
<li><p>在超市所从事的信息活动中，<strong>属于挖掘时间序列模式的是：</strong><u><strong>针对注册用户，分析他们的购买，向他们设定下次可能购买的优惠规则。</strong></u></p>
<blockquote>
<p><strong>时间序列分析</strong>也可以称为<strong>数据演变分析</strong>，<strong>描述行为对象随时间变化的规律或趋势，并进行建模的数据挖掘方法。</strong></p>
</blockquote>
</li>
</ol>
<h2 id="二、应用题-5"><a href="#二、应用题-5" class="headerlink" title="二、应用题"></a>二、应用题</h2><ol>
<li><p>SQL Server中根据索引的实现方式，索引技术可以分成<strong>有序索引</strong>和<strong><u>散列索引</u></strong>两大类。</p>
</li>
<li><p>在分布式数据库中，使用<u><strong>分配模式</strong></u>来描述各片段到物理存放场地的映象。</p>
<blockquote>
<p><strong>分布式数据库总的数据分布策略</strong>可以从<strong>数据分片</strong>和<strong>数据分配</strong>两个角度来考虑，<strong>一般先数据分片，再数据分配</strong>。<strong>分片是对关系的操作，而分配是对分片结果的操作。</strong>分片模式是<strong>描述每个数据片断以及全局关系到片段的映象，</strong>分配模式是<strong>描述各片段到物理存放场地的映象。</strong></p>
</blockquote>
</li>
<li><p>在SQL Server 2008中，授予某数据库中的某个用户具有该数据库中全部用户数据表的插入、删除和修改权限，比较合理的做法是将该用户添加到系统提供的<strong><u>db_datawriter</u></strong>数据库角色中。</p>
</li>
<li><p>事务是由一系列操作组成的，事务的执行表现为事务中各个操作的执行。每个事务应具有结束操作。<strong>当一个事务发生故障需要终止并取消所有已执行的数据修改时应执行undo操作。</strong></p>
</li>
<li><p><strong>在数据仓库设计和建设过程中</strong>，设计者需要调查用户的决策或数据处理需求，并将功能相近需要相关数据支持的需求进行归类，得到不同的需求集合，并在企业数据模型中寻找能够满足各个需求集合的数据集合，然后针对各个数据集合开展数据仓库数据模型的设计。这种设计方法称为<strong><u>面向主题</u></strong>的设计方法。</p>
</li>
<li><p>（<em>）OLAP主要用于支持复杂的分析操作， 侧重对决策人员和高层管理人员的数据支持。*</em>OLAP的实现方式主要由三种：**</p>
<blockquote>
<ol>
<li><strong>MOLAP：基于多维数据库</strong></li>
<li><strong>HOLAP：基于混合型数据库</strong></li>
<li><strong>ROLAP：基于关系型数据库</strong></li>
</ol>
</blockquote>
</li>
</ol>
<h1 id="计算机三级数据库第七套题"><a href="#计算机三级数据库第七套题" class="headerlink" title="计算机三级数据库第七套题"></a>计算机三级数据库第七套题</h1><h2 id="一、选择题-6"><a href="#一、选择题-6" class="headerlink" title="一、选择题"></a>一、选择题</h2><ol>
<li>数据库应用系统<strong>逻辑设计阶段</strong>有：</li>
</ol>
<blockquote>
<ol>
<li>数据库逻辑结构设计</li>
<li>数据库事务概要设计</li>
<li>应用程序概要设计</li>
</ol>
</blockquote>
<blockquote>
<p><strong>系统总体框架</strong>设计属于<strong>概念设计</strong></p>
</blockquote>
<ol start="2">
<li>数据库概念设计的目标：</li>
</ol>
<blockquote>
<ol>
<li>定义和描述应用领域涉及的数据范围</li>
<li>获取应用领域或问题域的信息模型</li>
<li>描述清楚数据的属性特征</li>
<li>描述清楚数据之间的关系</li>
<li>定义和描述数据的约束</li>
<li>说明数据的安全性要求</li>
<li>支持用户的各种数据处理需求</li>
<li>保证信息模型方便地转换成数据的逻辑结构（数据库模式），同时也便于用户理解</li>
</ol>
</blockquote>
<ol start="3">
<li>在数据库应用系统设计中，如果事务中存在和用户的长时间交互，它会带来哪些坏处</li>
</ol>
<blockquote>
<ol>
<li>降低系统的并发度</li>
<li>增加死锁的数量</li>
<li><strong>影响检查点的效果</strong></li>
</ol>
</blockquote>
<blockquote>
<p><strong>事务是并发控制的基本单位。所谓事务，它是一个操作序列。</strong></p>
<p><strong>系统在执行检查点操作时，所有的事务处理都被暂时中止，长时间的事务影响检查点的效果。</strong></p>
</blockquote>
<ol start="4">
<li><p>不同的数据库管理系统<strong>有着不同的逻辑实现结构</strong>，因此数据库空间管理办法随数据库管理系统不同而不同</p>
</li>
<li><p>属于<strong>物理设计</strong>的是：</p>
<blockquote>
<ol>
<li>文件组织与存取设计</li>
<li>数据分布设计</li>
<li>确定数据库和操作系统参数</li>
<li>从时间、空间、维护代价等方面评估物理设计结果，并将评估后的结果实施到数据库中</li>
</ol>
</blockquote>
</li>
</ol>
<blockquote>
<p>（<strong>不属于物理设计</strong>）将关系模式和相关视图转换为特定数据库管理系统的可支持的表和视图</p>
</blockquote>
<ol start="6">
<li><p>（<em>）从功能上讲，*</em>数据库应用系统设计<strong>包括下列四个层次，其中包括构件设计的是<u></strong>业务逻辑层**</u></p>
<blockquote>
<ol>
<li><strong>表示层</strong>，位于最外层，离用户最近，用于显示数据和接受用户输入的数据。</li>
<li><strong>业务逻辑层</strong>，表示层和数据访问层之间通信的桥梁，主要负责数据的传递和处理，例如数据有效性的检验、业务逻辑描述相关功能。业务逻辑层概要设计包括：结构、行为、数据接口、故障处理、安全设计、系统维护与保障等方面的内容。</li>
<li><strong>数据访问层</strong>，主要实现数据的保存和读取操作。</li>
<li><strong>数据持久层</strong>。</li>
</ol>
</blockquote>
</li>
</ol>
<blockquote>
<p>综上所述，<strong>业务逻辑层的主要任务是梳理DBAS的各项业务活动</strong>，将其表示为各种系统构件（如：类、模块、组件等），因此<strong>构件属于业务逻辑层</strong>。</p>
</blockquote>
<ol start="7">
<li><p>不同的数据库产品提供不同的应用程序接口、因此在更换数据库产品后，<strong>一般原有的应用程序和数据库接口会失效</strong>，<strong>需要重新修改应用程序</strong>。</p>
</li>
<li><p><strong>关于分布式数据库</strong>：</p>
<blockquote>
<ol>
<li>分布式数据库的事务管理包括<strong>恢复控制和并发控制</strong>，<strong>恢复控制一般采用的策略是基于两阶段的提交协议</strong>。</li>
<li><strong>分布式数据库系统的目标是高性能和高可用性</strong>，通过多个处理节点并行执行数据库任务，提高整个数据库系统的性能和可用性。</li>
</ol>
</blockquote>
</li>
<li><p>（<em>）若有算法A，能根据用户间的相似性，将客户集合划分成k个子集合，并使属于同一个子集合的客户间的相似性尽可能大，不属于同一子集合的客户间的相似性尽可能小。则算法A属于一种*</em><u>聚类算法</u>**。</p>
<blockquote>
<p><strong>关联分析算法</strong>（计算支持度和置信度）</p>
<p><strong>分类算法</strong>（事先知道有哪些种类可分）</p>
<p><strong>回归预测法</strong>（是在分析市场现象<a href="https://baike.baidu.com/item/自变量/6895256" target="_blank" rel="noopener">自变量</a>和<a href="https://baike.baidu.com/item/因变量" target="_blank" rel="noopener">因变量</a>之间相关关系的基础上，建立变量之间的<a href="https://baike.baidu.com/item/回归方程/11042494" target="_blank" rel="noopener">回归方程</a>，并将回归方程作为<a href="https://baike.baidu.com/item/预测模型/2488641" target="_blank" rel="noopener">预测模型</a>，根据<a href="https://baike.baidu.com/item/自变量/6895256" target="_blank" rel="noopener">自变量</a>在预测期的数量变化来预测因变量关系大多表现为相关关系，因此，回归分析预测法是一种重要的<a href="https://baike.baidu.com/item/市场预测/3217035" target="_blank" rel="noopener">市场预测</a>方法。）</p>
</blockquote>
</li>
<li><p>物化视图将会预先计算并保存耗时操作的结果，可大幅度提高查询效率，<strong>物化视图可人工手动刷新和自动定时刷新</strong>。</p>
</li>
<li><p>（<em>）ODS（Operation Data Store）是数据仓库体系结构中的一个可选部分，ODS具备数据仓库的部分特征和OLTP系统的部分特征，它是“*</em><u>面向主题的、集成的、当前或接近当前的、不断变化的</u>**”数据。</p>
<blockquote>
<p><strong>第一类</strong>ODS数据更新频率是<strong>秒级</strong></p>
<p><strong>第二类</strong>ODS数据更新频率是<strong>小时级</strong></p>
<p><strong>第三类</strong>ODS数据更新频率是<strong>天级</strong></p>
<p>上述三类是根据数据更新的速度划分的</p>
<p><strong>第四类</strong>ODS是根据数据<strong>来源方向和类型划分的</strong></p>
</blockquote>
</li>
<li><p>（<em>）用于*</em>数据库完整性保护**的是</p>
<blockquote>
<p><strong>创建触发器</strong></p>
<p><strong>定义事务隔离性级别</strong></p>
</blockquote>
<p><strong>数据库的完整性是指数据库中数据的正确性、一致性和相容性。</strong></p>
<p>不用于</p>
<blockquote>
<p><strong>数字签名</strong>：防止数据篡改</p>
<p><strong>定义主码</strong>：实体完整性</p>
</blockquote>
</li>
<li><p>UML的几种图介绍</p>
<blockquote>
<ol>
<li><strong>协作图</strong>：主要用于描述对象在空间中如何交互，即除了动态交互，也直接描述了对象是如何链接在一起的情形</li>
<li><strong>状态图</strong>：主要用于描述一个对象在其生存期间的动态行为，表现为一个对象所经历的状态序列，引起状态转移的事件，以及因状态转移而伴随的动作。一般可以用状态机对一个对象的生命周期建模，状态图用于显示状态机，重点在与描述状态图的控制流。</li>
<li><strong>顺序图</strong>：主要用于描述指定的一组对象是如何交互的，它着眼于消息队列，也就是在消息间如何发送和接收消息。</li>
<li><strong>部署图</strong>：描述的是系统运行时的结构，展示了硬件的配置及其软件如何部署到网络结构中。<strong>一个系统模型只有一个部署图，部署图通常用来帮助理解分布式系统</strong>。</li>
</ol>
</blockquote>
</li>
<li><p><strong>数据库管理员的职责</strong></p>
<blockquote>
<ol>
<li><strong>数据库的转储和恢复</strong></li>
<li><strong>数据库安全性、完整性控制</strong></li>
<li><strong>数据库性能的检测和改善</strong></li>
<li><strong>数据库的重组和重构</strong></li>
</ol>
</blockquote>
</li>
<li><p><strong>所有登陆名都属于public服务器角色</strong>，登陆名是不能移除public角色的，且public角色是不能删除的。</p>
</li>
<li><p>触发器是一种特殊的存储过程，它是由用户对数据的更改操作自动引发执行的。<strong>适于触发器实现的数据库控制</strong>是<u><strong>完整性控制</strong></u>。</p>
<blockquote>
<p>触发器通常用于保证业务规则和数据完整性，其主要优点是用户可以用编程的方法来实现复杂的处理逻辑和业务规则，增强了数据完整性约束的功能。</p>
</blockquote>
</li>
<li><p>频繁使用关联查询，最适合用<strong><u>聚集文件</u></strong>保存</p>
<blockquote>
<ol>
<li>聚集文件是一种具有多种记录类型文件，存储了来自多个关系表的数据，每个关系表对应文件中的一种记录类型；</li>
<li>数据库中数据量效大时，对数据库查询需要多次访问磁盘文件，严重影响性能指标，为了降低多表操作时的磁盘访问次数，提高多表查询速度，可采用聚集文件;</li>
<li>聚集文件将不同关系表中有关联关系的记录存储在同一磁盘块内，从而减少多表查询时磁盘块的访问次数，提高系统I/O速度和查找处理速度;　</li>
</ol>
</blockquote>
</li>
<li><p>关于SQL Server2008中游标的说法</p>
<blockquote>
<ol>
<li>每个游标都有一个当前行指针，<strong>当游标打开后，当前行指针自动指向结果集的第一行数据</strong></li>
<li>如果在声明游标时未指定<strong>insensitive</strong>选项，则已经提交的对基表的更新都会反映在后面的提取操作中。（<strong>insensitive关键字用于创建由游标使用的临时副本</strong>）</li>
<li>当<strong>@@FETCH_STATUS=0</strong>时，<strong>表示FETCH语句成功</strong>；当<strong>@@FETCH_STATUS=-1</strong>时，<strong>表示FETCH语句失败或行不在结果集中</strong>；<strong>@@FETCH_STATUS=-2时</strong>，<strong>表示提取的行不存在</strong></li>
<li><strong>关闭游标后。可以通过OPEN语句再次打开该游标</strong></li>
</ol>
</blockquote>
</li>
<li><p><strong>关于日志备份</strong></p>
<blockquote>
<p>日志备份<strong>仅备份日志，不备份数据</strong></p>
<p>日志备份的<strong>执行效率通常比差异备份和完整备份高</strong></p>
<p>第一次对数据库进行的备份<strong>必须是完整备份</strong></p>
<p>日志备份的<strong>时间间隔通常比差异备份短</strong></p>
</blockquote>
</li>
<li><p>关于内联(内嵌)表值函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--语法格式</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名(参数)</span><br><span class="line"><span class="keyword">returns</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">return</span>(<span class="keyword">select</span>语句)</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>在内联表值函数中，没有相关联的返回变量</li>
<li>（<strong>错</strong>）内联表值函数通过insert语句填充函数返回的表值 （<strong>用select语句填充</strong>）</li>
<li>内联表值函数的作用类似于带参数的视图</li>
<li>调用内联表值函数时，只能将内联表值函数放置在from子句中（select * from 函数名）</li>
</ol>
</blockquote>
</li>
<li><p><strong>适合建立索引</strong></p>
<blockquote>
<p><strong>经常执行查询操作并且数据量很大的表</strong></p>
<p><strong>经常出现在where子句、order by子句、group by子句中的</strong></p>
</blockquote>
<p><strong>前后都是%的列查询不会访问索引，不适合建立索引</strong></p>
</li>
<li><p>在云计算中，<strong>当云以即用即付的方式提供给公众</strong>的时候，我们称其为<strong><u>公共云</u></strong></p>
</li>
</ol>
<blockquote>
<p><strong>私有云</strong>：<strong>不对公众开放的企业或组织内部数据中心的资源</strong>。</p>
</blockquote>
<h2 id="二、应用题-6"><a href="#二、应用题-6" class="headerlink" title="二、应用题"></a>二、应用题</h2><ol>
<li><p>（<em>）具体来说，UML的语义是定义在一个*</em>四层模型概念框架**中的，这四层分别是：</p>
<blockquote>
<ol>
<li><strong>元元模型层</strong></li>
<li><strong>元模型层</strong></li>
<li><strong>模型层</strong></li>
<li><strong>用户模型层</strong></li>
</ol>
</blockquote>
</li>
<li><p>（<em>）在UML中，*</em><u>聚集</u>** 是一种特殊形式的关联。它表示类之间的关系是整体与部分的关系。</p>
</li>
<li><p>（<em>）在衡量数据库应用系统的性能指标中，*</em><u>数据吞吐量</u>**指的是系统在单位时间内可以完成的数据库事务数量。</p>
</li>
<li><p>（<em>）Google的云数据库是一个分布式的结构化数据存储系统，称作：*</em><u>Bigtable</u>**。</p>
</li>
<li><p>（<em>）知识发现主要由三个步骤组成，它们是<u>*</em>数据准备<strong></u>、<u></strong>数据挖掘<strong></u>、<u></strong>结果的解释评估**</u>。</p>
<blockquote>
<p><strong>知识发现</strong>指的是<strong>从数据集中识别出有效的、新颖的、潜在有用的以及最终可理解的模式的非平凡过程</strong>。</p>
<p>知识发现将信息变为知识，从数据矿山中找到蕴藏的知识金块，将为知识创新和知识经济的发展作出贡献，</p>
<p><strong>也是所谓“数据挖掘”的一种更为广义的说法</strong>。</p>
</blockquote>
</li>
<li><p>（<em>）在SQL Server2008，主要数据文件必须建立在*</em><u>主</u>** <strong>文件组中</strong>。</p>
<blockquote>
<p><strong>每个数据库有一个主要数据文件和若干个从文件</strong>。<strong>文件是数据库的物理体现</strong>。文件组可以包括分布在多个逻辑分区的文件，从而实现负载均衡，它允许对文件进行分组，以便于管理和数据的分配及放置。<strong>主文件组包含主要数据文件组和任何没有明确指派给其他文件组的其他文件</strong>。</p>
</blockquote>
</li>
<li><p>在分布式数据库中，如果用户编写程序时不必了解数据分片在各个场地的<u>分配情况</u>，则称为该分布式数据库系统具有<strong><u>位置</u></strong> <strong>透明性</strong>。</p>
</li>
<li><p>不同的数据库管理系统采用的日志文件格式不完全一样，概括起来主要有以<strong><u>记录为单位的日志文件</u></strong>和以<strong><u>数据块为单位的日志文件</u></strong>两种。</p>
</li>
</ol>
<h1 id="计算机三级数据库第八套题"><a href="#计算机三级数据库第八套题" class="headerlink" title="计算机三级数据库第八套题"></a>计算机三级数据库第八套题</h1><h2 id="一、选择题-7"><a href="#一、选择题-7" class="headerlink" title="一、选择题"></a>一、选择题</h2><ol>
<li><p>在划分关系模型时，<strong>一对一和一对多的关系可以合并到其他实体集中</strong>，<strong>多对多作为一个单独的实体集</strong>。</p>
</li>
<li><p>（<em>）*</em>双机热备<strong>（active-standby）：属于</strong>数据库恢复技术内容**，当介质被破坏后能够保证数据的完整性。</p>
</li>
<li><p>几种文件结构的概述：</p>
<blockquote>
<ol>
<li><p><strong>散列文件</strong>：利用散列存储方式组织的文件，亦称为直接存取文件。</p>
<p><strong>散列文件的优点</strong>：文件随机存放，记录不需进行排序；<strong>插入删除方便</strong>；<strong>存取速度快</strong>；不需要索引区，节省空间。</p>
<p><strong>散列文件的缺点</strong>：<strong>不能进行顺序存取</strong>，<strong>只能按关键字随机存取</strong>，且询问方式只限于简单询问，并且多次插入删除后，也可能造成文件结构不合理，需要重新组织文件。</p>
</li>
<li><p><strong>堆文件</strong>：也称为无序文件。在堆文件中，记录随机地存储在文件物理空间中，新插入的记录存储在文件的末尾。因为堆文件无需建立索引，维护代价非常低。<strong>虽然堆文件的数据访问效率较低，但数据量很少时，定位文件记录的时间非常短</strong>。</p>
</li>
<li><p><strong>顺序文件</strong>：文件信息存放在若干连续的物理块中。<strong>其优点</strong>是简单、支持顺序存取和随机存取速度相对较快。<strong>缺点</strong>是文件不能动态增长、<strong>不利于文件插入和删除</strong>。<strong><u>如果用户的查询定义在查找码上，则顺序文件是比较合适的文件结构</u></strong>。</p>
</li>
<li><p><strong>聚集文件</strong>：聚集文件将不同关系表中有关联关系的记录存储在一起。<strong><u>如果某些重要而频繁的用户查询经常需要进行多表连接操作，可以考虑聚集文件，来改善查询效率。</u></strong></p>
</li>
</ol>
</blockquote>
</li>
<li><p>有效减少数据库死锁发生数量的方法有</p>
<blockquote>
<ol>
<li><strong>各个事务应顺序访问共享资源</strong>。</li>
<li><strong>将各个复杂的、大的事务分解成多个简单、小的事务</strong>。（不能合并事务）</li>
<li><strong>按同一顺序访问对象</strong>。</li>
<li><strong>事务隔离性级别</strong>。</li>
<li><strong>使用绑定连接</strong>。</li>
<li><strong>灵活使用显示加速技术</strong>。</li>
</ol>
</blockquote>
</li>
<li><p>UML<strong>活动图</strong>主<u>要用于描述系统、用例和程序模块中逻辑流程的先后执行次序或并行次序</u>。</p>
</li>
<li><p>SET赋值语句给变量赋值且一个变量只有一个值。当值可能有多个时，不能用SET</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">--max()可能有多个值</span></span><br><span class="line"><span class="keyword">SET</span> @x=<span class="keyword">select</span> <span class="keyword">max</span>(工资) <span class="keyword">from</span> 职工表 <span class="keyword">where</span> 所在部门=@dept</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于SQL server 2008 数据库文件的说法</p>
<blockquote>
<ol>
<li><strong>一个数据库只能有一个主要数据文件</strong>，但可以有多个次要数据文件。</li>
<li><strong>一个数据文件不能属于多个文件组</strong>。</li>
<li><u><strong>日志文件不能包含在文件组中</strong></u>。</li>
<li><strong>一个数据库可以包含多个日志文件</strong>。</li>
</ol>
</blockquote>
</li>
<li><p>关于SQL server 2008 分区表的说法</p>
<blockquote>
<ol>
<li>分区表是从物理上将一个表划分为若干个分区。</li>
<li><strong>分区后的各分区存储在数据库中一个或多个文件组中</strong>。（不需要一定放在不同的文件组中；<strong>通过元数据来表述数据存储的逻辑地址</strong>）</li>
<li><strong>表中数据量的大小并不是是否需要进行分区的唯一考虑因素</strong>。</li>
<li><strong>对表进行分区后，用户在访问数据时不需要知道被访问数据所在的分区</strong>。</li>
</ol>
</blockquote>
</li>
<li><p>关于<strong>存取控制</strong>的说法：</p>
<blockquote>
<ol>
<li>自主存取控制主要通过GRANT、REVOKE、DENY语句来实现</li>
<li>在强制存取控制中，DBMS将实体划分为<strong>主体和客体两大类</strong></li>
<li>仅当主体的许可性级别<strong><u>大于或等于</u></strong>客体的密级时，<strong>主体才能读取相应的客体</strong>；<strong>仅当</strong>主体的许可性级别<strong><u>等于</u></strong>客体的密级时，<strong>主体才能<u>写</u>相应的客体</strong></li>
<li>强制存取控制本质上是分层次的，它比自主存取控制更严格</li>
</ol>
</blockquote>
</li>
<li><p>关于数据库的<strong><u>重组和重构</u></strong>：</p>
<blockquote>
<p><strong><u>数据库的重组并不修改原设计的逻辑和物理结构</u></strong>，而<strong><u>数据库的重构则要部分的修改数据库的模式和内模式</u></strong></p>
</blockquote>
</li>
<li><p>关于数据库中的索引：</p>
<blockquote>
<ol>
<li>在某个查询中带排序的属性有多个时可以考虑在这些属性上建立<strong>复合索引</strong></li>
<li>一个表中最多<strong>只能有一个</strong> <strong>主索引或聚集索引</strong></li>
<li>（<em>）*</em>多属性索引<strong>中，索引属性的顺序一般</strong>按照其区分度进行排序**</li>
<li><strong>B树索引一般适用于等值和范围查询</strong></li>
<li><strong>散列索引不能用于<u>范围查询</u></strong> (检索速度快)</li>
</ol>
</blockquote>
</li>
<li><p>有运行于两个地点的分布式数据库，需要对两个分布在两地数据量很大的表进行连接操作，这两张表数据变化很慢，为了提高查询速度，可行的方法是 <strong><u>将两张表复制交叉复制到两地</u></strong></p>
<blockquote>
<p><strong>分布式数据库传输代价计算</strong>：</p>
<p>（<em>）*</em>传输代价=I/O代价+CPU代价+通信代价**</p>
<p><strong>优先使通信代价最省</strong>，将两张表交叉复制到两地可以省去通信代价</p>
</blockquote>
</li>
<li><p>（<em>）*</em>检查点**能减少数据库完全恢复时所必须执行的日志，提高数据库恢复速度。关于检查点的说法</p>
<blockquote>
<ol>
<li>检查点记录的内容包括<strong>建立检查点时正在执行的事务清单</strong>和<strong>这些事务最近一个日志记录的地址</strong></li>
<li>在检查点建立的<strong>同时</strong>，数据库管理系统会将<strong>当前数据缓冲区中的所有数据记录写入数据库中</strong></li>
<li>（<em>）*</em>检查点由数据库恢复子系统定时或不定时的建立，而不是由管理员手动建立**</li>
<li>使用检查点进行恢复时<strong>需要从“重新开始文件”中找到最后一个检查点记录在日志文件中的地址</strong></li>
</ol>
</blockquote>
</li>
<li><p>有关Active-Standby（双机热备）模式服务器容错技术的说法</p>
<blockquote>
<ol>
<li>此模式需要<strong>两台服务器使用共享的存储设备</strong>，数据库中数据需要存储在此设备中</li>
<li>此模式需要在<strong>两台服务器之间建立专用的状态检测网络</strong></li>
<li>此模式中<strong>增加串口方式检测服务器状态</strong>的可以<strong>有助于避免“脑裂”现象出现</strong> <a href="https://blog.csdn.net/lgstudyvc/article/details/48296651" target="_blank" rel="noopener">什么是脑裂？</a></li>
<li>此模式可以保证在<strong>Active服务器出现故障时</strong>，<strong>在最短时间内恢复使用</strong></li>
</ol>
</blockquote>
</li>
<li><p>Active-Active（双主机）指两种不同业务分别在两台服务器上互为主备状态（即Active-Standby和Standby-Active状态），<strong>优点是两台服务器切换速度快，数据库连接不中断，应用不受影响</strong></p>
</li>
<li><p>SQL Server2008提供了<strong>三种恢复模式</strong>，不同的恢复模式决定了数据库支持的备份类型和还原方案。关于恢复模式的说法</p>
<blockquote>
<ol>
<li><strong>简单恢复模式</strong>不记录事务日志，<strong>如果数据库损坏</strong>，简单恢复模式<strong>可能造成数据丢失</strong></li>
<li><strong>完整恢复模式</strong>记录所有事务日志，<strong>同时事务日志记录保留到对其备份完毕为止</strong></li>
<li><strong>大容量日志恢复模式</strong>只对<strong>大容量操作进行最小记录</strong>，<strong>使事务日志不会被大容量加载操作所填充</strong></li>
<li><strong>大容量日志恢复模式不支持时点恢复，也不支持还原单个数据页</strong></li>
</ol>
</blockquote>
</li>
<li><p>SQL Server2008三种恢复模式的详细描述</p>
<blockquote>
<ol>
<li><p><strong>简单恢复</strong>：<strong>无日志备份</strong>。自动回收日志空间以减少空间需求，实际上不再需要管理事务日志空间。最新备份之后的更改不受保护。发生灾难时，这些更改必须重做。只能恢复到备份的结尾。</p>
</li>
<li><p><strong>完整恢复</strong>：<strong>需要日志备份</strong>。数据文件丢失或损坏不会导致数据库系统丢失工作。<strong>可以恢复到任意时点</strong>（例如应用程序或用户错误之前）。<strong>完整恢复模式还支持还原单个数据页</strong>。</p>
</li>
<li><p><strong>大容量日志恢复</strong>：<strong>需要日志备份</strong>。<strong><u>是完整恢复模式的附加模式</u></strong>，<strong>允许执行高性能的大容量复制操作</strong>。通过使用最小方式记录大规模大容量操作，减少日志空间使用量。</p>
<p>如果在最新日志备份后发生日志损坏或执行大容量日志记录操作，则必须重做自上次备份之后所做的更改，否则将丢失所有工作，<strong>可以恢复到任何备份的结尾并且不支持时点恢复和还原单个数据页</strong>。</p>
</li>
</ol>
</blockquote>
</li>
<li><p>SQL Server2008<strong>支持多种数据库还原级别</strong>。下列有关其数据库恢复的说法</p>
<blockquote>
<ol>
<li>在进行数据库整体还原和恢复过程中，此<strong>数据库处于脱机状态</strong></li>
<li>（<em>）SQL Server *</em>支持对数据库的一个数据文件进行还原<strong>，</strong>在还原过程中数据库(此文件)属于脱机状态<strong>，</strong>其他的文件都不能进行读写操作，因而其他文件也会受到影响**</li>
<li>在还原数据库之前，如果数据库的日志没有损坏，<strong>为了减少数据丢失可以进行一次尾部日志备份</strong></li>
<li>（<em>）*</em>在进行数据库还原的过程中可以将数据库移动到其他位置**</li>
</ol>
</blockquote>
</li>
<li><p><strong>快照</strong>：该方法通过对当前数据表进行“照相”，记录当前的数据表信息“相片”，然后将当前的“相片”与以前的数据表“相片”进行比较，如果不一致将通过一定的方法传到数据仓库，从而实现数据的一致性，<strong>此种方式适合于更新频率较低的数据表</strong>。</p>
</li>
</ol>
<h2 id="二、应用题-7"><a href="#二、应用题-7" class="headerlink" title="二、应用题"></a>二、应用题</h2><ol>
<li><p>每TPS代价值是用于衡量系统<strong><u>性价</u></strong>比的指标。（性能价格）</p>
</li>
<li><p>DFD方法由四种基本元素构成：<strong><u>数据流、数据处理、数据存储和外部项</u></strong>。</p>
</li>
<li><p>（<em>）UML中的*</em><u>活动图</u><strong>的主要作用是陈述活动与活动之间流程控制的转移，其作用类似于流程图，然而与流程图不同的是</strong>其支持并行行为**。</p>
</li>
<li><p>（<em>）设有学生表（学号、姓名、所在系）和选课表（学号、课程号、成绩），现要使用*</em>开窗函数**查询每个学生的姓名、所在系及选课门数（不包括没选课的学生）。请补全下列语句：</p>
<p>SELECT DISTINCT 姓名，所在系，COUNT(<em>)  *</em><u>OVER (PARTITION BY T1.学号)  OVER (PARTITION BY T2.学号)</u>**  AS 选课门数 FROM 学生表 T1 JOIN 选课表 T2 ON T1.学号=T2.学号。</p>
<blockquote>
<p>开窗函数公式：<strong><u>函数名(列) OVER(选项)。OVER关键字表示把函数当成开窗函数而不是聚合函数</u></strong>。SQL Server 2005/2008 支持两种开窗函数，分别为：<strong>排名开窗函数和聚合开窗函数</strong>。<strong><u>聚合开窗函数只能使用PARTITION BY 子句不带任何语句</u></strong>，<strong>ORDER BY 不能与聚合开窗函数一同使用</strong>。<strong>很多聚合函数都可以用作开窗函数的运算，如SUN、AVG、MAX、MIN和COUNT。</strong></p>
</blockquote>
<blockquote>
<p><strong>开窗函数简介</strong>:与聚合函数一样，开窗函数也是对行集组进行聚合计算，但是它不像普通聚合函数那样每组只返回一个值，<strong>开窗函数可以为每组返回多个值</strong>，因为开窗函数所执行聚合计</p>
<p>算的行集组是窗口。在 ISO SQL 规定了这样的函数为开窗函数，在 Oracle 中则被称为分析函数。</p>
</blockquote>
</li>
<li><p>新增汇总表的调优方法是一种以<u>空间换<strong>时间</strong></u>的调优方法。</p>
</li>
<li><p>（<em>）分布式数据库中，混合分片是水平分片、垂直分片和<u>*</em>导出**分片</u>的混合。</p>
<blockquote>
<p><strong>分布式数据库分片类型</strong>有如下几种：</p>
<ol>
<li><strong>水平分片</strong>：按一定的条件把全局关系的所有元组划分成若干不相交的子集，每个子集都是关系的一个片段。</li>
<li><strong>垂直分片</strong>：把一个全局关系的属性集分成若干个子集，并在这些子集上作投影运算，每个投影称为垂直分片。</li>
<li><strong>导出分片</strong>：又称为导出水平分片，即水平分片的条件不是本关系属性的条件，而是其他关系属性的条件。</li>
<li><strong>混合分片</strong>：以上三种方法的混合。可以先水平分片在垂直分片，或先垂直分片再水平分片，或其他形式的分片，但他们的结果是不相同的。</li>
</ol>
</blockquote>
</li>
<li><p>（<em>）在T-SQL中，提取cur1游标中<u>相对于当前行</u>向下第5行数据的语句是 FETCH *</em><u>relative</u>** 5 FROM cur1…</p>
<blockquote>
<p>其他可选参数：</p>
<p><strong>NEXT</strong>：返回紧跟当前行之后的数据行，并且当前行递增为结果行。</p>
<p><strong>PRIOR</strong>：返回紧跟当前行之前的数据行，并且当前行递减为结果行。</p>
<p><strong>FIRST</strong>：返回游标中的第一行并将其作为当前行。</p>
<p><strong>LAST</strong>：返回游标中的最后一行并将其作为当前行。</p>
<p><strong>ABSOLUTE {n|@nvar}</strong>：如果n或@nvar为正数，则返回从游标第一行开始向后的第n行，并将返回行变成新的当前行。如果n或@nvar为负数，则返回从游标第一行开始之前的第n行，并将返回行变成新的当前行。<strong>如果n或@nvar为0则不返回任何结果</strong>。n必须是正数常量,并且@nvar的数据类型必须为smallint、tinyint或int。</p>
<p><strong>RELATIVE {n|@nvar}</strong>：和absolute类似 不过relative是以当前行为起点。<strong>如果n或@nvar为0，则返回当前行</strong>。<strong>在对游标进行第一次提取时，如果在将n或@nvar设置为负数或0的情况下指定FETCH RELATIVE，则不返回任何行</strong>。</p>
</blockquote>
</li>
<li><p>（<em>）数据挖掘方法中，*</em><u>关联规则</u>**挖掘就是用于发现数据库中数据间的关联性的。</p>
<blockquote>
<p>其他挖掘方法还有：<strong>分类、回归分析、聚类、关联规则、特征、变化和偏差分析、Web页挖掘</strong></p>
</blockquote>
</li>
</ol>
<h1 id="随手记（综合）"><a href="#随手记（综合）" class="headerlink" title="随手记（综合）"></a>随手记（综合）</h1><ol>
<li><p><strong>顺序图</strong>强调的是时间，通信图强调的是空间。</p>
</li>
<li><p><strong>状态图</strong>中只能有一个起始状态，可以有多个结束状态。</p>
</li>
<li><p>类图（静态结构）、顺序图、通信图（动态结构）都属于系统结构图。</p>
</li>
<li><p><strong>用例模型由 用例、角色、系统3个部分组成</strong>。</p>
</li>
<li><p>用例之间存在的关系包括：<strong>扩展、使用和组合三种关系</strong>。</p>
</li>
<li><p>UML2.0提供了13种不同的图，分为两类：</p>
<blockquote>
<p>结构图：类图、对象图、复合结构图、包图、组件图、部署图</p>
<p>行为图：用例图、交互图（顺序图、通信图、交互概述图、时间图）、状态图和活动图</p>
</blockquote>
</li>
<li><p>修改数据大小的语法是：<code>ALTER DATABASE 数据库名 MODIFY FILE(NAME=数据库文件名,SIZE=文件容量)</code><strong>其中文件容量必须大于原有容量</strong>。</p>
</li>
<li><p><strong>定义架构</strong>的语法格式：<code>create schema 架构名 authorization 用户名</code></p>
</li>
<li><p><strong>SQL Server实例的作业信息存储在<u>msdb</u>数据库中。</strong></p>
</li>
<li><p><strong>创建分区方案</strong>时指定的文件组数<strong>不得少于</strong>(不一定要相等)分区函数生成的分区数。</p>
</li>
<li><p><strong>如果未在声明游标时指定scroll</strong>，则<strong><u>NEXT</u></strong>是唯一支持的提取选项。</p>
</li>
<li><p>在<strong>视图</strong>上<strong>不能</strong>定义<strong>After型触发器</strong>。</p>
</li>
<li><p>创建登录账户：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> login username <span class="keyword">with</span> <span class="keyword">password</span>=passwordchar</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>数据库重组：</strong></p>
<blockquote>
<p>按照系统设计要求对数据库存储空间进行全面调整，如：</p>
<ol>
<li>调整磁盘分区方法和存储空间</li>
<li>重新安排数据的存储</li>
<li>整理回收碎块等</li>
</ol>
</blockquote>
</li>
<li><p>数据库应用系统投入运行<strong>标志着系统开发任务的基本完成</strong>和<strong>系统运行维护工作的开始</strong>。</p>
</li>
<li><p><strong>数据库运行维护</strong>工作包括：</p>
<blockquote>
<ol>
<li>数据库的转储和恢复；</li>
<li>数据库的安全性和完整性控制；</li>
<li>数据库性能的监控分析和改进；</li>
<li>数据库的重组和重构。</li>
</ol>
</blockquote>
</li>
<li><p>数据库差量备份：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">backup</span> <span class="keyword">database</span> students <span class="keyword">TO</span> MyBK_1 <span class="keyword">with</span> differential,noinit</span><br><span class="line"><span class="comment">--differential 表示差异备份  noinit表示 合并 不初始化</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分布式数据库最基本的特征是：</p>
<blockquote>
<p>本地自治、非集中式管理、高可用性</p>
</blockquote>
</li>
<li><p>分布式数据库是物理上分散、逻辑上集中的数据库系统。</p>
</li>
<li><p>SaaS指 软件即服务（Software as a Service）</p>
</li>
<li><p>VB 6.0中的数据绑定控件必须具有<strong>DataSource属性</strong></p>
</li>
<li><p>VB 6.0中，ADO数据控件用于连接数据源的属性是<strong>ConnectionString</strong></p>
</li>
<li><p>一个<strong>完整的事务概要设计</strong>包括：</p>
<blockquote>
<ol>
<li><strong>事务用户</strong></li>
<li><strong>事务处理逻辑</strong></li>
<li><strong>事务名称</strong></li>
<li><strong>事务所访问的关系表及关系属性</strong></li>
</ol>
</blockquote>
</li>
<li><p>在数据库三级模式结构中，对数据库中全部的<strong>数据逻辑结构和特征</strong>进行描述的是 <strong><u>模式</u></strong>。</p>
</li>
<li><p>在分类预测任务重，需要用到的数据一般包括<strong>训练集、测试集和验证集。</strong></p>
</li>
<li><p>在数据库<u><strong>概要设计</strong></u>阶段，<strong>使用read和write原语来表达存取操作</strong>。</p>
</li>
<li><p>云计算通过集中所有的硬件计算资源，采用硬件<strong><u>虚拟技术</u></strong>，为使用者提供强大的计算能力、存储和带宽等资源。</p>
</li>
<li><p><strong>创建视图</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名 <span class="keyword">as</span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">name</span>,age,sex <span class="keyword">from</span> student;</span><br><span class="line">go	</span><br><span class="line"><span class="comment">--调用视图</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 视图名;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建索引</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span>  索引名 <span class="keyword">on</span> 表名(列);  <span class="comment">--普通索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> clustered <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表名(列);  <span class="comment">--唯一聚集索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> nonclustered <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表名(列);  <span class="comment">--唯一非聚集索引 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span>  索引名 <span class="keyword">on</span> 表名(列<span class="number">1</span>,列<span class="number">2</span>);  <span class="comment">--复合索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span>  索引名 <span class="keyword">on</span> 表名(列 <span class="keyword">desc</span>);  <span class="comment">--普通索引 按列 降序</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>存储过程</strong>：</p>
<p><strong>普通：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名 (@<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),@age <span class="built_in">int</span>) <span class="keyword">As</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">name</span>=@<span class="keyword">name</span> <span class="keyword">and</span> age=@age</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"></span><br><span class="line">exec 存储过程名 <span class="string">'范XX'</span>,<span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p><strong>带输入输出参数：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名 (</span><br><span class="line">    @<span class="keyword">id</span> <span class="built_in">int</span>,   <span class="comment">--默认输入</span></span><br><span class="line">	@<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">out</span>,   <span class="comment">--输出参数</span></span><br><span class="line">    @age <span class="built_in">int</span> <span class="keyword">output</span>    <span class="comment">--输入输出参数</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">select</span> @<span class="keyword">name</span>=<span class="keyword">name</span>,@age=age <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span>=@<span class="keyword">id</span> <span class="keyword">and</span> age=@age;  <span class="comment">--根据id和年龄查询 并 返回 姓名和年龄	</span></span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">--调用存储过程</span></span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">id</span> <span class="built_in">int</span>,@<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),@age <span class="built_in">int</span>;   <span class="comment">--定义变量</span></span><br><span class="line"><span class="comment">--给输入参数赋值</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> @age=<span class="number">20</span>;</span><br><span class="line"><span class="comment">--调用存储</span></span><br><span class="line">exec 存储过程名 @id,@name out,@age output;</span><br><span class="line"><span class="comment">--查看返回的值</span></span><br><span class="line"><span class="keyword">select</span> @<span class="keyword">name</span>,@age;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>标量函数</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名 (@<span class="keyword">id</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span>(<span class="number">10</span>)  <span class="comment">--定义返回值类型</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">declare</span> @<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">select</span> @<span class="keyword">name</span>=<span class="keyword">name</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span>=@<span class="keyword">id</span>;   <span class="comment">--给@name 变量赋值</span></span><br><span class="line">	return @name <span class="comment">--返回@name变量</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--调用</span></span><br><span class="line"><span class="keyword">select</span> dbo.函数名(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>(*)多语句表值函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名(@<span class="keyword">id</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">returns</span> @表变量名 <span class="keyword">table</span> (</span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    sex <span class="built_in">varchar</span>(<span class="number">4</span>)</span><br><span class="line">)   <span class="comment">--定义返回值表结构</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> @表变量名(<span class="keyword">name</span>,age,sex) <span class="keyword">select</span> <span class="keyword">name</span>,age,sex <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span>=@<span class="keyword">id</span>  <span class="comment">--给返回表赋值</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--分割线--</span></span><br><span class="line"><span class="comment">--调用</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age,sex <span class="keyword">from</span> dbo.函数名(<span class="number">22</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>内嵌表值函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名(@<span class="keyword">id</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="keyword">table</span>  <span class="comment">--返回值是一个表</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">select</span> <span class="keyword">name</span>,age,sex <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span>=@<span class="keyword">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--分割线--</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="comment">--调用</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 函数名(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>分区函数、分区方案和分区表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--分区函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">partition</span> <span class="keyword">function</span> RangePF(<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">Range</span> <span class="keyword">Left</span> <span class="keyword">For</span> <span class="keyword">Values</span>(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--根据上面的分区函数创建分区方案</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">partition</span> scheme RangePS</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">partition</span> RangePF <span class="keyword">to</span>(fg1,fg2,fg3,fg4)  <span class="comment">--四个文件组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--根据上面的分区方案创建分区表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> myTable(</span><br><span class="line">	Gid <span class="built_in">int</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>) primary <span class="keyword">key</span>,</span><br><span class="line">    GoodName <span class="built_in">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    Price <span class="built_in">float</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">on</span> RangePS(Gid)</span><br><span class="line"><span class="comment">--结束</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
</search>
